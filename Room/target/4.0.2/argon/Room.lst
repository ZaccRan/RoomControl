
c:/Users/Nemo/Documents/IoT/RoomControl/Room/target/4.0.2/argon/Room.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005280  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b92a0  000b92a0  000092a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b92c4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000004ac  2003e0f0  000b92c8  0001e0f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000254  2003e59c  2003e59c  0002e59c  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b9774  000b9774  00029774  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b979c  000b979c  0002979c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0012e773  00000000  00000000  000297a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000157b5  00000000  00000000  00157f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003ea6a  00000000  00000000  0016d6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003160  00000000  00000000  001ac132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000ab90  00000000  00000000  001af292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e04b  00000000  00000000  001b9e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00048e15  00000000  00000000  001f7e6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00135545  00000000  00000000  00240c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008d08  00000000  00000000  003761c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f004 f94d 	bl	b82d0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f004 f955 	bl	b82ec <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e0f0 	.word	0x2003e0f0
   b404c:	000b92c8 	.word	0x000b92c8
   b4050:	2003e59c 	.word	0x2003e59c
   b4054:	2003e59c 	.word	0x2003e59c
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f002 fd11 	bl	b6a88 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b9270 	.word	0x000b9270
   b4080:	000b9298 	.word	0x000b9298

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 ba52 	b.w	b452c <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fab5 	bl	b45f8 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f002 bcb1 	b.w	b69f8 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f002 b917 	b.w	b62c8 <malloc>

000b409a <_Znaj>:
   b409a:	f002 b915 	b.w	b62c8 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f002 b91b 	b.w	b62d8 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f002 f868 	bl	b6180 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b5e51 	.word	0x000b5e51
   b40b8:	000b846c 	.word	0x000b846c

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b40cc:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b40ce:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b40d0:	4606      	mov	r6, r0
   b40d2:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b40d4:	da0b      	bge.n	b40ee <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
   b40d6:	2a0a      	cmp	r2, #10
   b40d8:	d109      	bne.n	b40ee <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b40da:	212d      	movs	r1, #45	; 0x2d
   b40dc:	f002 fbb0 	bl	b6840 <_ZN5Print5printEc>
            val = -n;
   b40e0:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b40e2:	b2ea      	uxtb	r2, r5
   b40e4:	4630      	mov	r0, r6
    }
}
   b40e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b40ea:	f002 bbc2 	b.w	b6872 <_ZN5Print11printNumberEmh>
            val = n;
   b40ee:	4621      	mov	r1, r4
   b40f0:	e7f7      	b.n	b40e2 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>

000b40f2 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40f2:	b40e      	push	{r1, r2, r3}
   b40f4:	b503      	push	{r0, r1, lr}
   b40f6:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b40f8:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40fa:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40fe:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4100:	f002 fbd5 	bl	b68ae <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b4104:	b002      	add	sp, #8
   b4106:	f85d eb04 	ldr.w	lr, [sp], #4
   b410a:	b003      	add	sp, #12
   b410c:	4770      	bx	lr
	...

000b4110 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b4110:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b4112:	6984      	ldr	r4, [r0, #24]
   b4114:	4b0a      	ldr	r3, [pc, #40]	; (b4140 <_ZN9TCPClientD1Ev+0x30>)
   b4116:	6003      	str	r3, [r0, #0]
   b4118:	4605      	mov	r5, r0
   b411a:	b17c      	cbz	r4, b413c <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b411c:	6863      	ldr	r3, [r4, #4]
   b411e:	3b01      	subs	r3, #1
   b4120:	6063      	str	r3, [r4, #4]
   b4122:	b95b      	cbnz	r3, b413c <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b4124:	6823      	ldr	r3, [r4, #0]
   b4126:	4620      	mov	r0, r4
   b4128:	689b      	ldr	r3, [r3, #8]
   b412a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b412c:	68a3      	ldr	r3, [r4, #8]
   b412e:	3b01      	subs	r3, #1
   b4130:	60a3      	str	r3, [r4, #8]
   b4132:	b91b      	cbnz	r3, b413c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b4134:	6823      	ldr	r3, [r4, #0]
   b4136:	4620      	mov	r0, r4
   b4138:	68db      	ldr	r3, [r3, #12]
   b413a:	4798      	blx	r3
   b413c:	4628      	mov	r0, r5
   b413e:	bd38      	pop	{r3, r4, r5, pc}
   b4140:	000b9028 	.word	0x000b9028

000b4144 <_ZN9TCPClientD0Ev>:
   b4144:	b510      	push	{r4, lr}
   b4146:	4604      	mov	r4, r0
   b4148:	f7ff ffe2 	bl	b4110 <_ZN9TCPClientD1Ev>
   b414c:	4620      	mov	r0, r4
   b414e:	211c      	movs	r1, #28
   b4150:	f7ff ffa5 	bl	b409e <_ZdlPvj>
   b4154:	4620      	mov	r0, r4
   b4156:	bd10      	pop	{r4, pc}

000b4158 <_Z6setHueibiii>:
TCPClient HueClient;

bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat);
bool getHue(int lightNum);

bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat) {
   b4158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b415c:	b08c      	sub	sp, #48	; 0x30
   b415e:	4605      	mov	r5, r0
   b4160:	460f      	mov	r7, r1

  static int PrevLightNum,PrevOn, PrevColor, PrevBright, PrevSat;

  String command = "";  
   b4162:	4668      	mov	r0, sp
   b4164:	4977      	ldr	r1, [pc, #476]	; (b4344 <_Z6setHueibiii+0x1ec>)
bool setHue(int lightNum, bool HueOn, int HueColor, int HueBright, int HueSat) {
   b4166:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   b416a:	4614      	mov	r4, r2
   b416c:	461e      	mov	r6, r3
  String command = "";  
   b416e:	f002 fa8a 	bl	b6686 <_ZN6StringC1EPK19__FlashStringHelper>

  if((lightNum==PrevLightNum)&&(HueOn==PrevOn)&&(HueColor==PrevColor)&&(HueBright==PrevBright)&&(HueSat==PrevSat)) {
   b4172:	f8df e228 	ldr.w	lr, [pc, #552]	; b439c <_Z6setHueibiii+0x244>
   b4176:	4974      	ldr	r1, [pc, #464]	; (b4348 <_Z6setHueibiii+0x1f0>)
   b4178:	f8de 3000 	ldr.w	r3, [lr]
   b417c:	4873      	ldr	r0, [pc, #460]	; (b434c <_Z6setHueibiii+0x1f4>)
   b417e:	4a74      	ldr	r2, [pc, #464]	; (b4350 <_Z6setHueibiii+0x1f8>)
   b4180:	f8df c21c 	ldr.w	ip, [pc, #540]	; b43a0 <_Z6setHueibiii+0x248>
   b4184:	42ab      	cmp	r3, r5
   b4186:	d119      	bne.n	b41bc <_Z6setHueibiii+0x64>
   b4188:	680b      	ldr	r3, [r1, #0]
   b418a:	42bb      	cmp	r3, r7
   b418c:	d116      	bne.n	b41bc <_Z6setHueibiii+0x64>
   b418e:	6803      	ldr	r3, [r0, #0]
   b4190:	42a3      	cmp	r3, r4
   b4192:	d113      	bne.n	b41bc <_Z6setHueibiii+0x64>
   b4194:	6813      	ldr	r3, [r2, #0]
   b4196:	42b3      	cmp	r3, r6
   b4198:	d110      	bne.n	b41bc <_Z6setHueibiii+0x64>
   b419a:	f8dc 3000 	ldr.w	r3, [ip]
   b419e:	4543      	cmp	r3, r8
   b41a0:	d10c      	bne.n	b41bc <_Z6setHueibiii+0x64>
    Serial.printf("No Change - Cancelling CMD\n");
   b41a2:	f002 fd93 	bl	b6ccc <_Z16_fetch_usbserialv>
   b41a6:	496b      	ldr	r1, [pc, #428]	; (b4354 <_Z6setHueibiii+0x1fc>)
   b41a8:	f7ff ffa3 	bl	b40f2 <_ZN5Print6printfEPKcz>
    return false;
   b41ac:	2400      	movs	r4, #0
  String command = "";  
   b41ae:	4668      	mov	r0, sp
   b41b0:	f002 fa1e 	bl	b65f0 <_ZN6StringD1Ev>
    HueClient.stop();
    return true;  // command executed
  }
  else
    return false;  // command failed
}
   b41b4:	4620      	mov	r0, r4
   b41b6:	b00c      	add	sp, #48	; 0x30
   b41b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  PrevLightNum = lightNum;
   b41bc:	f8ce 5000 	str.w	r5, [lr]
  PrevOn = HueOn;
   b41c0:	600f      	str	r7, [r1, #0]
  PrevColor=HueColor;
   b41c2:	6004      	str	r4, [r0, #0]
  PrevBright=HueBright;
   b41c4:	6016      	str	r6, [r2, #0]
  PrevSat=HueSat;
   b41c6:	f8cc 8000 	str.w	r8, [ip]
  if(HueOn == true) {
   b41ca:	2f00      	cmp	r7, #0
   b41cc:	f000 80b5 	beq.w	b433a <_Z6setHueibiii+0x1e2>
    command = "{\"on\":true,\"sat\":";
   b41d0:	4961      	ldr	r1, [pc, #388]	; (b4358 <_Z6setHueibiii+0x200>)
   b41d2:	4668      	mov	r0, sp
   b41d4:	f002 fa85 	bl	b66e2 <_ZN6StringaSEPKc>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b41d8:	4669      	mov	r1, sp
   b41da:	a808      	add	r0, sp, #32
   b41dc:	f002 fa76 	bl	b66cc <_ZN6StringC1ERKS_>
    command = command + String(HueSat) + ",\"bri\":";
   b41e0:	220a      	movs	r2, #10
   b41e2:	4641      	mov	r1, r8
   b41e4:	a804      	add	r0, sp, #16
   b41e6:	f002 fa8e 	bl	b6706 <_ZN6StringC1Eih>
   b41ea:	a904      	add	r1, sp, #16
   b41ec:	a808      	add	r0, sp, #32
   b41ee:	f002 fad2 	bl	b6796 <_ZplRK15StringSumHelperRK6String>
   b41f2:	495a      	ldr	r1, [pc, #360]	; (b435c <_Z6setHueibiii+0x204>)
   b41f4:	f002 fadb 	bl	b67ae <_ZplRK15StringSumHelperPKc>
   b41f8:	4601      	mov	r1, r0
   b41fa:	4668      	mov	r0, sp
   b41fc:	f002 fa57 	bl	b66ae <_ZN6StringaSERKS_>
   b4200:	a804      	add	r0, sp, #16
   b4202:	f002 f9f5 	bl	b65f0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4206:	a808      	add	r0, sp, #32
   b4208:	f002 f9f2 	bl	b65f0 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b420c:	4669      	mov	r1, sp
   b420e:	a808      	add	r0, sp, #32
   b4210:	f002 fa5c 	bl	b66cc <_ZN6StringC1ERKS_>
    command = command + String(HueBright) + ",\"hue\":";
   b4214:	220a      	movs	r2, #10
   b4216:	4631      	mov	r1, r6
   b4218:	a804      	add	r0, sp, #16
   b421a:	f002 fa74 	bl	b6706 <_ZN6StringC1Eih>
   b421e:	a904      	add	r1, sp, #16
   b4220:	a808      	add	r0, sp, #32
   b4222:	f002 fab8 	bl	b6796 <_ZplRK15StringSumHelperRK6String>
   b4226:	494e      	ldr	r1, [pc, #312]	; (b4360 <_Z6setHueibiii+0x208>)
   b4228:	f002 fac1 	bl	b67ae <_ZplRK15StringSumHelperPKc>
   b422c:	4601      	mov	r1, r0
   b422e:	4668      	mov	r0, sp
   b4230:	f002 fa3d 	bl	b66ae <_ZN6StringaSERKS_>
   b4234:	a804      	add	r0, sp, #16
   b4236:	f002 f9db 	bl	b65f0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b423a:	a808      	add	r0, sp, #32
   b423c:	f002 f9d8 	bl	b65f0 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b4240:	4669      	mov	r1, sp
   b4242:	a808      	add	r0, sp, #32
   b4244:	f002 fa42 	bl	b66cc <_ZN6StringC1ERKS_>
    command = command + String(HueColor) + "}";
   b4248:	220a      	movs	r2, #10
   b424a:	4621      	mov	r1, r4
   b424c:	a804      	add	r0, sp, #16
   b424e:	f002 fa5a 	bl	b6706 <_ZN6StringC1Eih>
   b4252:	a904      	add	r1, sp, #16
   b4254:	a808      	add	r0, sp, #32
   b4256:	f002 fa9e 	bl	b6796 <_ZplRK15StringSumHelperRK6String>
   b425a:	4942      	ldr	r1, [pc, #264]	; (b4364 <_Z6setHueibiii+0x20c>)
   b425c:	f002 faa7 	bl	b67ae <_ZplRK15StringSumHelperPKc>
   b4260:	4601      	mov	r1, r0
   b4262:	4668      	mov	r0, sp
   b4264:	f002 fa23 	bl	b66ae <_ZN6StringaSERKS_>
   b4268:	a804      	add	r0, sp, #16
   b426a:	f002 f9c1 	bl	b65f0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b426e:	a808      	add	r0, sp, #32
   b4270:	f002 f9be 	bl	b65f0 <_ZN6StringD1Ev>
  if (HueClient.connect(hueHubIP, hueHubPort)) {
   b4274:	493c      	ldr	r1, [pc, #240]	; (b4368 <_Z6setHueibiii+0x210>)
   b4276:	483d      	ldr	r0, [pc, #244]	; (b436c <_Z6setHueibiii+0x214>)
   b4278:	2300      	movs	r3, #0
   b427a:	2250      	movs	r2, #80	; 0x50
   b427c:	f002 fee0 	bl	b7040 <_ZN9TCPClient7connectEPKctm>
   b4280:	4604      	mov	r4, r0
   b4282:	2800      	cmp	r0, #0
   b4284:	d093      	beq.n	b41ae <_Z6setHueibiii+0x56>
      Serial.println("Sending Command to Hue");
   b4286:	f002 fd21 	bl	b6ccc <_Z16_fetch_usbserialv>
   b428a:	4939      	ldr	r1, [pc, #228]	; (b4370 <_Z6setHueibiii+0x218>)
   b428c:	f002 fae7 	bl	b685e <_ZN5Print7printlnEPKc>
      Serial.println(command);
   b4290:	f002 fd1c 	bl	b6ccc <_Z16_fetch_usbserialv>
   b4294:	9900      	ldr	r1, [sp, #0]
   b4296:	f002 fae2 	bl	b685e <_ZN5Print7printlnEPKc>
      HueClient.print("PUT /api/");
   b429a:	4936      	ldr	r1, [pc, #216]	; (b4374 <_Z6setHueibiii+0x21c>)
   b429c:	4833      	ldr	r0, [pc, #204]	; (b436c <_Z6setHueibiii+0x214>)
   b429e:	f002 facb 	bl	b6838 <_ZN5Print5printEPKc>
      HueClient.print(hueUsername);
   b42a2:	4935      	ldr	r1, [pc, #212]	; (b4378 <_Z6setHueibiii+0x220>)
   b42a4:	4831      	ldr	r0, [pc, #196]	; (b436c <_Z6setHueibiii+0x214>)
   b42a6:	f002 fac7 	bl	b6838 <_ZN5Print5printEPKc>
      HueClient.print("/lights/");
   b42aa:	4934      	ldr	r1, [pc, #208]	; (b437c <_Z6setHueibiii+0x224>)
   b42ac:	482f      	ldr	r0, [pc, #188]	; (b436c <_Z6setHueibiii+0x214>)
   b42ae:	f002 fac3 	bl	b6838 <_ZN5Print5printEPKc>
size_t Print::print(T n, int base)
   b42b2:	220a      	movs	r2, #10
   b42b4:	482d      	ldr	r0, [pc, #180]	; (b436c <_Z6setHueibiii+0x214>)
   b42b6:	4629      	mov	r1, r5
   b42b8:	f7ff ff08 	bl	b40cc <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
      HueClient.println("/state HTTP/1.1");
   b42bc:	4930      	ldr	r1, [pc, #192]	; (b4380 <_Z6setHueibiii+0x228>)
   b42be:	482b      	ldr	r0, [pc, #172]	; (b436c <_Z6setHueibiii+0x214>)
   b42c0:	f002 facd 	bl	b685e <_ZN5Print7printlnEPKc>
      HueClient.println("keep-alive");
   b42c4:	492f      	ldr	r1, [pc, #188]	; (b4384 <_Z6setHueibiii+0x22c>)
   b42c6:	4829      	ldr	r0, [pc, #164]	; (b436c <_Z6setHueibiii+0x214>)
   b42c8:	f002 fac9 	bl	b685e <_ZN5Print7printlnEPKc>
      HueClient.print("Host: ");
   b42cc:	492e      	ldr	r1, [pc, #184]	; (b4388 <_Z6setHueibiii+0x230>)
   b42ce:	4827      	ldr	r0, [pc, #156]	; (b436c <_Z6setHueibiii+0x214>)
   b42d0:	f002 fab2 	bl	b6838 <_ZN5Print5printEPKc>
      HueClient.println(hueHubIP);
   b42d4:	4924      	ldr	r1, [pc, #144]	; (b4368 <_Z6setHueibiii+0x210>)
   b42d6:	4825      	ldr	r0, [pc, #148]	; (b436c <_Z6setHueibiii+0x214>)
   b42d8:	f002 fac1 	bl	b685e <_ZN5Print7printlnEPKc>
      HueClient.print("Content-Length: ");
   b42dc:	492b      	ldr	r1, [pc, #172]	; (b438c <_Z6setHueibiii+0x234>)
   b42de:	4823      	ldr	r0, [pc, #140]	; (b436c <_Z6setHueibiii+0x214>)
   b42e0:	f002 faaa 	bl	b6838 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b42e4:	220a      	movs	r2, #10
   b42e6:	9902      	ldr	r1, [sp, #8]
   b42e8:	4820      	ldr	r0, [pc, #128]	; (b436c <_Z6setHueibiii+0x214>)
   b42ea:	f002 fac2 	bl	b6872 <_ZN5Print11printNumberEmh>
        n += println();
   b42ee:	481f      	ldr	r0, [pc, #124]	; (b436c <_Z6setHueibiii+0x214>)
   b42f0:	f002 faa9 	bl	b6846 <_ZN5Print7printlnEv>
      HueClient.println("Content-Type: text/plain;charset=UTF-8");
   b42f4:	4926      	ldr	r1, [pc, #152]	; (b4390 <_Z6setHueibiii+0x238>)
   b42f6:	481d      	ldr	r0, [pc, #116]	; (b436c <_Z6setHueibiii+0x214>)
   b42f8:	f002 fab1 	bl	b685e <_ZN5Print7printlnEPKc>
      HueClient.println();  // blank line before body
   b42fc:	481b      	ldr	r0, [pc, #108]	; (b436c <_Z6setHueibiii+0x214>)
   b42fe:	f002 faa2 	bl	b6846 <_ZN5Print7printlnEv>
      HueClient.println(command);  // Hue command
   b4302:	9900      	ldr	r1, [sp, #0]
   b4304:	4819      	ldr	r0, [pc, #100]	; (b436c <_Z6setHueibiii+0x214>)
   b4306:	f002 faaa 	bl	b685e <_ZN5Print7printlnEPKc>
      Serial.println("From Hue");
   b430a:	f002 fcdf 	bl	b6ccc <_Z16_fetch_usbserialv>
   b430e:	4921      	ldr	r1, [pc, #132]	; (b4394 <_Z6setHueibiii+0x23c>)
   b4310:	f002 faa5 	bl	b685e <_ZN5Print7printlnEPKc>
      Serial.println(HueClient.readString()); // To close connection
   b4314:	f002 fcda 	bl	b6ccc <_Z16_fetch_usbserialv>
   b4318:	4914      	ldr	r1, [pc, #80]	; (b436c <_Z6setHueibiii+0x214>)
   b431a:	4604      	mov	r4, r0
   b431c:	a808      	add	r0, sp, #32
   b431e:	f002 fb0d 	bl	b693c <_ZN6Stream10readStringEv>
   b4322:	9908      	ldr	r1, [sp, #32]
   b4324:	4620      	mov	r0, r4
   b4326:	f002 fa9a 	bl	b685e <_ZN5Print7printlnEPKc>
   b432a:	a808      	add	r0, sp, #32
   b432c:	f002 f960 	bl	b65f0 <_ZN6StringD1Ev>
    HueClient.stop();
   b4330:	480e      	ldr	r0, [pc, #56]	; (b436c <_Z6setHueibiii+0x214>)
   b4332:	f003 f83b 	bl	b73ac <_ZN9TCPClient4stopEv>
    return true;  // command executed
   b4336:	2401      	movs	r4, #1
   b4338:	e739      	b.n	b41ae <_Z6setHueibiii+0x56>
    command = "{\"on\":false}";
   b433a:	4917      	ldr	r1, [pc, #92]	; (b4398 <_Z6setHueibiii+0x240>)
   b433c:	4668      	mov	r0, sp
   b433e:	f002 f9d0 	bl	b66e2 <_ZN6StringaSEPKc>
   b4342:	e797      	b.n	b4274 <_Z6setHueibiii+0x11c>
   b4344:	000b88aa 	.word	0x000b88aa
   b4348:	2003e60c 	.word	0x2003e60c
   b434c:	2003e614 	.word	0x2003e614
   b4350:	2003e604 	.word	0x2003e604
   b4354:	000b8481 	.word	0x000b8481
   b4358:	000b849d 	.word	0x000b849d
   b435c:	000b84af 	.word	0x000b84af
   b4360:	000b84b7 	.word	0x000b84b7
   b4364:	000b84ca 	.word	0x000b84ca
   b4368:	000b8915 	.word	0x000b8915
   b436c:	2003e5a0 	.word	0x2003e5a0
   b4370:	000b84cc 	.word	0x000b84cc
   b4374:	000b84e3 	.word	0x000b84e3
   b4378:	000b88ec 	.word	0x000b88ec
   b437c:	000b84ed 	.word	0x000b84ed
   b4380:	000b84f6 	.word	0x000b84f6
   b4384:	000b871f 	.word	0x000b871f
   b4388:	000b8506 	.word	0x000b8506
   b438c:	000b850d 	.word	0x000b850d
   b4390:	000b851e 	.word	0x000b851e
   b4394:	000b8545 	.word	0x000b8545
   b4398:	000b84bf 	.word	0x000b84bf
   b439c:	2003e608 	.word	0x2003e608
   b43a0:	2003e610 	.word	0x2003e610

000b43a4 <_Z8switchONi>:
TCPClient WemoClient;

int wemoPort = 49153;
const char *wemoIP[5] = {"192.168.1.30","192.168.1.31","192.168.1.32","192.168.1.33","192.168.1.34"};

void switchON(int wemo) {
   b43a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  
  String data1;
   b43a6:	4925      	ldr	r1, [pc, #148]	; (b443c <_Z8switchONi+0x98>)
void switchON(int wemo) {
   b43a8:	4604      	mov	r4, r0
  String data1;
   b43aa:	4668      	mov	r0, sp
   b43ac:	f002 f96b 	bl	b6686 <_ZN6StringC1EPK19__FlashStringHelper>
  
  Serial.printf("SwitchON %i \n",wemo);
   b43b0:	f002 fc8c 	bl	b6ccc <_Z16_fetch_usbserialv>
   b43b4:	4622      	mov	r2, r4
   b43b6:	4922      	ldr	r1, [pc, #136]	; (b4440 <_Z8switchONi+0x9c>)
   b43b8:	f7ff fe9b 	bl	b40f2 <_ZN5Print6printfEPKcz>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b43bc:	4921      	ldr	r1, [pc, #132]	; (b4444 <_Z8switchONi+0xa0>)
   b43be:	4668      	mov	r0, sp
   b43c0:	f002 f9cb 	bl	b675a <_ZN6String6concatEPKc>
  data1+="<?xml version=\"1.0\" encoding=\"utf-8\"?><s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"><s:Body><u:SetBinaryState xmlns:u=\"urn:Belkin:service:basicevent:1\"><BinaryState>1</BinaryState></u:SetBinaryState></s:Body></s:Envelope>"; // Use HTML encoding for comma's
  if (WemoClient.connect(wemoIP[wemo],wemoPort)) {
   b43c4:	4a20      	ldr	r2, [pc, #128]	; (b4448 <_Z8switchONi+0xa4>)
   b43c6:	4921      	ldr	r1, [pc, #132]	; (b444c <_Z8switchONi+0xa8>)
   b43c8:	8812      	ldrh	r2, [r2, #0]
   b43ca:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
   b43ce:	4820      	ldr	r0, [pc, #128]	; (b4450 <_Z8switchONi+0xac>)
   b43d0:	2300      	movs	r3, #0
   b43d2:	f002 fe35 	bl	b7040 <_ZN9TCPClient7connectEPKctm>
   b43d6:	b328      	cbz	r0, b4424 <_Z8switchONi+0x80>
        WemoClient.println("POST /upnp/control/basicevent1 HTTP/1.1");
   b43d8:	491e      	ldr	r1, [pc, #120]	; (b4454 <_Z8switchONi+0xb0>)
   b43da:	481d      	ldr	r0, [pc, #116]	; (b4450 <_Z8switchONi+0xac>)
   b43dc:	f002 fa3f 	bl	b685e <_ZN5Print7printlnEPKc>
        WemoClient.println("Content-Type: text/xml; charset=utf-8");
   b43e0:	491d      	ldr	r1, [pc, #116]	; (b4458 <_Z8switchONi+0xb4>)
   b43e2:	481b      	ldr	r0, [pc, #108]	; (b4450 <_Z8switchONi+0xac>)
   b43e4:	f002 fa3b 	bl	b685e <_ZN5Print7printlnEPKc>
        WemoClient.println("SOAPACTION: \"urn:Belkin:service:basicevent:1#SetBinaryState\"");
   b43e8:	491c      	ldr	r1, [pc, #112]	; (b445c <_Z8switchONi+0xb8>)
   b43ea:	4819      	ldr	r0, [pc, #100]	; (b4450 <_Z8switchONi+0xac>)
   b43ec:	f002 fa37 	bl	b685e <_ZN5Print7printlnEPKc>
        WemoClient.println("Connection: keep-alive");
   b43f0:	491b      	ldr	r1, [pc, #108]	; (b4460 <_Z8switchONi+0xbc>)
   b43f2:	4817      	ldr	r0, [pc, #92]	; (b4450 <_Z8switchONi+0xac>)
   b43f4:	f002 fa33 	bl	b685e <_ZN5Print7printlnEPKc>
        WemoClient.print("Content-Length: ");
   b43f8:	491a      	ldr	r1, [pc, #104]	; (b4464 <_Z8switchONi+0xc0>)
   b43fa:	4815      	ldr	r0, [pc, #84]	; (b4450 <_Z8switchONi+0xac>)
   b43fc:	f002 fa1c 	bl	b6838 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b4400:	9902      	ldr	r1, [sp, #8]
   b4402:	4813      	ldr	r0, [pc, #76]	; (b4450 <_Z8switchONi+0xac>)
   b4404:	220a      	movs	r2, #10
   b4406:	f002 fa34 	bl	b6872 <_ZN5Print11printNumberEmh>
        n += println();
   b440a:	4811      	ldr	r0, [pc, #68]	; (b4450 <_Z8switchONi+0xac>)
   b440c:	f002 fa1b 	bl	b6846 <_ZN5Print7printlnEv>
        WemoClient.println(data1.length());
        WemoClient.println();
   b4410:	480f      	ldr	r0, [pc, #60]	; (b4450 <_Z8switchONi+0xac>)
   b4412:	f002 fa18 	bl	b6846 <_ZN5Print7printlnEv>
        WemoClient.print(data1);
   b4416:	9900      	ldr	r1, [sp, #0]
   b4418:	480d      	ldr	r0, [pc, #52]	; (b4450 <_Z8switchONi+0xac>)
   b441a:	f002 fa0d 	bl	b6838 <_ZN5Print5printEPKc>
        WemoClient.println();
   b441e:	480c      	ldr	r0, [pc, #48]	; (b4450 <_Z8switchONi+0xac>)
   b4420:	f002 fa11 	bl	b6846 <_ZN5Print7printlnEv>
    }

  if (WemoClient.connected()) {
   b4424:	480a      	ldr	r0, [pc, #40]	; (b4450 <_Z8switchONi+0xac>)
   b4426:	f002 fe89 	bl	b713c <_ZN9TCPClient9connectedEv>
   b442a:	b110      	cbz	r0, b4432 <_Z8switchONi+0x8e>
     WemoClient.stop();
   b442c:	4808      	ldr	r0, [pc, #32]	; (b4450 <_Z8switchONi+0xac>)
   b442e:	f002 ffbd 	bl	b73ac <_ZN9TCPClient4stopEv>
  String data1;
   b4432:	4668      	mov	r0, sp
   b4434:	f002 f8dc 	bl	b65f0 <_ZN6StringD1Ev>
  }
}
   b4438:	b004      	add	sp, #16
   b443a:	bd10      	pop	{r4, pc}
   b443c:	000b88aa 	.word	0x000b88aa
   b4440:	000b854e 	.word	0x000b854e
   b4444:	000b855c 	.word	0x000b855c
   b4448:	2003e11c 	.word	0x2003e11c
   b444c:	2003e108 	.word	0x2003e108
   b4450:	2003e5e8 	.word	0x2003e5e8
   b4454:	000b8688 	.word	0x000b8688
   b4458:	000b86b0 	.word	0x000b86b0
   b445c:	000b86d6 	.word	0x000b86d6
   b4460:	000b8713 	.word	0x000b8713
   b4464:	000b850d 	.word	0x000b850d

000b4468 <_Z9switchOFFi>:

void switchOFF(int wemo){
   b4468:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  String data1;
   b446a:	4925      	ldr	r1, [pc, #148]	; (b4500 <_Z9switchOFFi+0x98>)
void switchOFF(int wemo){
   b446c:	4604      	mov	r4, r0
  String data1;
   b446e:	4668      	mov	r0, sp
   b4470:	f002 f909 	bl	b6686 <_ZN6StringC1EPK19__FlashStringHelper>
  
  Serial.printf("switchOFF %i \n",wemo);
   b4474:	f002 fc2a 	bl	b6ccc <_Z16_fetch_usbserialv>
   b4478:	4622      	mov	r2, r4
   b447a:	4922      	ldr	r1, [pc, #136]	; (b4504 <_Z9switchOFFi+0x9c>)
   b447c:	f7ff fe39 	bl	b40f2 <_ZN5Print6printfEPKcz>
   b4480:	4921      	ldr	r1, [pc, #132]	; (b4508 <_Z9switchOFFi+0xa0>)
   b4482:	4668      	mov	r0, sp
   b4484:	f002 f969 	bl	b675a <_ZN6String6concatEPKc>
  data1+="<?xml version=\"1.0\" encoding=\"utf-8\"?><s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"><s:Body><u:SetBinaryState xmlns:u=\"urn:Belkin:service:basicevent:1\"><BinaryState>0</BinaryState></u:SetBinaryState></s:Body></s:Envelope>"; // Use HTML encoding for comma's
  if (WemoClient.connect(wemoIP[wemo],wemoPort)) {
   b4488:	4a20      	ldr	r2, [pc, #128]	; (b450c <_Z9switchOFFi+0xa4>)
   b448a:	4921      	ldr	r1, [pc, #132]	; (b4510 <_Z9switchOFFi+0xa8>)
   b448c:	8812      	ldrh	r2, [r2, #0]
   b448e:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
   b4492:	4820      	ldr	r0, [pc, #128]	; (b4514 <_Z9switchOFFi+0xac>)
   b4494:	2300      	movs	r3, #0
   b4496:	f002 fdd3 	bl	b7040 <_ZN9TCPClient7connectEPKctm>
   b449a:	b328      	cbz	r0, b44e8 <_Z9switchOFFi+0x80>
        WemoClient.println("POST /upnp/control/basicevent1 HTTP/1.1");
   b449c:	491e      	ldr	r1, [pc, #120]	; (b4518 <_Z9switchOFFi+0xb0>)
   b449e:	481d      	ldr	r0, [pc, #116]	; (b4514 <_Z9switchOFFi+0xac>)
   b44a0:	f002 f9dd 	bl	b685e <_ZN5Print7printlnEPKc>
        WemoClient.println("Content-Type: text/xml; charset=utf-8");
   b44a4:	491d      	ldr	r1, [pc, #116]	; (b451c <_Z9switchOFFi+0xb4>)
   b44a6:	481b      	ldr	r0, [pc, #108]	; (b4514 <_Z9switchOFFi+0xac>)
   b44a8:	f002 f9d9 	bl	b685e <_ZN5Print7printlnEPKc>
        WemoClient.println("SOAPACTION: \"urn:Belkin:service:basicevent:1#SetBinaryState\"");
   b44ac:	491c      	ldr	r1, [pc, #112]	; (b4520 <_Z9switchOFFi+0xb8>)
   b44ae:	4819      	ldr	r0, [pc, #100]	; (b4514 <_Z9switchOFFi+0xac>)
   b44b0:	f002 f9d5 	bl	b685e <_ZN5Print7printlnEPKc>
        WemoClient.println("Connection: keep-alive");
   b44b4:	491b      	ldr	r1, [pc, #108]	; (b4524 <_Z9switchOFFi+0xbc>)
   b44b6:	4817      	ldr	r0, [pc, #92]	; (b4514 <_Z9switchOFFi+0xac>)
   b44b8:	f002 f9d1 	bl	b685e <_ZN5Print7printlnEPKc>
        WemoClient.print("Content-Length: ");
   b44bc:	491a      	ldr	r1, [pc, #104]	; (b4528 <_Z9switchOFFi+0xc0>)
   b44be:	4815      	ldr	r0, [pc, #84]	; (b4514 <_Z9switchOFFi+0xac>)
   b44c0:	f002 f9ba 	bl	b6838 <_ZN5Print5printEPKc>
        return printNumber(val, base) + t;
   b44c4:	9902      	ldr	r1, [sp, #8]
   b44c6:	4813      	ldr	r0, [pc, #76]	; (b4514 <_Z9switchOFFi+0xac>)
   b44c8:	220a      	movs	r2, #10
   b44ca:	f002 f9d2 	bl	b6872 <_ZN5Print11printNumberEmh>
        n += println();
   b44ce:	4811      	ldr	r0, [pc, #68]	; (b4514 <_Z9switchOFFi+0xac>)
   b44d0:	f002 f9b9 	bl	b6846 <_ZN5Print7printlnEv>
        WemoClient.println(data1.length());
        WemoClient.println();
   b44d4:	480f      	ldr	r0, [pc, #60]	; (b4514 <_Z9switchOFFi+0xac>)
   b44d6:	f002 f9b6 	bl	b6846 <_ZN5Print7printlnEv>
        WemoClient.print(data1);
   b44da:	9900      	ldr	r1, [sp, #0]
   b44dc:	480d      	ldr	r0, [pc, #52]	; (b4514 <_Z9switchOFFi+0xac>)
   b44de:	f002 f9ab 	bl	b6838 <_ZN5Print5printEPKc>
        WemoClient.println();
   b44e2:	480c      	ldr	r0, [pc, #48]	; (b4514 <_Z9switchOFFi+0xac>)
   b44e4:	f002 f9af 	bl	b6846 <_ZN5Print7printlnEv>
    }
   
  if (WemoClient.connected()) {
   b44e8:	480a      	ldr	r0, [pc, #40]	; (b4514 <_Z9switchOFFi+0xac>)
   b44ea:	f002 fe27 	bl	b713c <_ZN9TCPClient9connectedEv>
   b44ee:	b110      	cbz	r0, b44f6 <_Z9switchOFFi+0x8e>
     WemoClient.stop();
   b44f0:	4808      	ldr	r0, [pc, #32]	; (b4514 <_Z9switchOFFi+0xac>)
   b44f2:	f002 ff5b 	bl	b73ac <_ZN9TCPClient4stopEv>
  String data1;
   b44f6:	4668      	mov	r0, sp
   b44f8:	f002 f87a 	bl	b65f0 <_ZN6StringD1Ev>
  }
}
   b44fc:	b004      	add	sp, #16
   b44fe:	bd10      	pop	{r4, pc}
   b4500:	000b88aa 	.word	0x000b88aa
   b4504:	000b872a 	.word	0x000b872a
   b4508:	000b8739 	.word	0x000b8739
   b450c:	2003e11c 	.word	0x2003e11c
   b4510:	2003e108 	.word	0x2003e108
   b4514:	2003e5e8 	.word	0x2003e5e8
   b4518:	000b8688 	.word	0x000b8688
   b451c:	000b86b0 	.word	0x000b86b0
   b4520:	000b86d6 	.word	0x000b86d6
   b4524:	000b8713 	.word	0x000b8713
   b4528:	000b850d 	.word	0x000b850d

000b452c <setup>:
Button buttonB(A0),buttonR(A1);
bool b,r;

int x=0;         //

void setup() {
   b452c:	b538      	push	{r3, r4, r5, lr}
  Wire.begin();
   b452e:	f003 f99b 	bl	b7868 <_Z19__fetch_global_Wirev>
   b4532:	f002 fc8d 	bl	b6e50 <_ZN7TwoWire5beginEv>
  status=bmp.begin(0x76);
   b4536:	482b      	ldr	r0, [pc, #172]	; (b45e4 <setup+0xb8>)
   b4538:	2176      	movs	r1, #118	; 0x76
   b453a:	f001 fbd9 	bl	b5cf0 <_ZN15Adafruit_BMP2805beginEh>
   b453e:	4b2a      	ldr	r3, [pc, #168]	; (b45e8 <setup+0xbc>)
   b4540:	7018      	strb	r0, [r3, #0]
  if(status==false){
   b4542:	b928      	cbnz	r0, b4550 <setup+0x24>
      Serial.printf("BMP280 at address 0x%02X failed to start\n", 0x76);
   b4544:	f002 fbc2 	bl	b6ccc <_Z16_fetch_usbserialv>
   b4548:	4928      	ldr	r1, [pc, #160]	; (b45ec <setup+0xc0>)
   b454a:	2276      	movs	r2, #118	; 0x76
   b454c:	f7ff fdd1 	bl	b40f2 <_ZN5Print6printfEPKcz>
    }

  pix.begin();
   b4550:	4827      	ldr	r0, [pc, #156]	; (b45f0 <setup+0xc4>)
   b4552:	f000 faa4 	bl	b4a9e <_ZN17Adafruit_NeoPixel5beginEv>
  
  pinMode(W,INPUT);
   b4556:	2100      	movs	r1, #0
   b4558:	200e      	movs	r0, #14
   b455a:	f003 f8b3 	bl	b76c4 <pinMode>
  pinMode(A0,INPUT);
   b455e:	2100      	movs	r1, #0
   b4560:	2013      	movs	r0, #19
   b4562:	f003 f8af 	bl	b76c4 <pinMode>
  pinMode(D10,OUTPUT);   //Blue's
   b4566:	2101      	movs	r1, #1
   b4568:	200a      	movs	r0, #10
   b456a:	f003 f8ab 	bl	b76c4 <pinMode>
  pinMode(A1,INPUT);
   b456e:	2100      	movs	r1, #0
   b4570:	2012      	movs	r0, #18
   b4572:	f003 f8a7 	bl	b76c4 <pinMode>
  pinMode(D9,OUTPUT);       //Red's
   b4576:	2101      	movs	r1, #1
   b4578:	2009      	movs	r0, #9
   b457a:	f003 f8a3 	bl	b76c4 <pinMode>
  pinMode(PIXPIN,OUTPUT);
   b457e:	2101      	movs	r1, #1
   b4580:	2002      	movs	r0, #2
   b4582:	f003 f89f 	bl	b76c4 <pinMode>

  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b4586:	223c      	movs	r2, #60	; 0x3c
   b4588:	2102      	movs	r1, #2
   b458a:	481a      	ldr	r0, [pc, #104]	; (b45f4 <setup+0xc8>)
   b458c:	f000 ff9e 	bl	b54cc <_ZN16Adafruit_SSD13065beginEhh>
  display.clearDisplay();
   b4590:	4818      	ldr	r0, [pc, #96]	; (b45f4 <setup+0xc8>)
   b4592:	f000 feb3 	bl	b52fc <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   b4596:	4817      	ldr	r0, [pc, #92]	; (b45f4 <setup+0xc8>)
   b4598:	f000 ff28 	bl	b53ec <_ZN16Adafruit_SSD13067displayEv>

  Serial.begin(9600);
   b459c:	f002 fb96 	bl	b6ccc <_Z16_fetch_usbserialv>
   b45a0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b45a4:	f002 fb82 	bl	b6cac <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b45a8:	2000      	movs	r0, #0
   b45aa:	f001 fc69 	bl	b5e80 <hal_timer_millis>
        while (_while() && !_condition()) {
   b45ae:	f643 2598 	movw	r5, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b45b2:	4604      	mov	r4, r0
   b45b4:	2000      	movs	r0, #0
   b45b6:	f001 fc63 	bl	b5e80 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b45ba:	1b00      	subs	r0, r0, r4
   b45bc:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b45c0:	42a8      	cmp	r0, r5
   b45c2:	f171 0300 	sbcs.w	r3, r1, #0
   b45c6:	d207      	bcs.n	b45d8 <setup+0xac>
  waitFor(Serial.isConnected,15000);
   b45c8:	f002 fb80 	bl	b6ccc <_Z16_fetch_usbserialv>
   b45cc:	f002 fb72 	bl	b6cb4 <_ZN9USBSerial11isConnectedEv>
   b45d0:	b910      	cbnz	r0, b45d8 <setup+0xac>
            spark_process();
   b45d2:	f001 fe69 	bl	b62a8 <spark_process>
        while (_while() && !_condition()) {
   b45d6:	e7ed      	b.n	b45b4 <setup+0x88>
   b45d8:	f002 fb78 	bl	b6ccc <_Z16_fetch_usbserialv>
  // WiFi.connect();
  // while(WiFi.connecting()) {
  //   Serial.printf(".");
  // }
  // Serial.printf("\n\n");
}
   b45dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  waitFor(Serial.isConnected,15000);
   b45e0:	f002 bb68 	b.w	b6cb4 <_ZN9USBSerial11isConnectedEv>
   b45e4:	2003e61c 	.word	0x2003e61c
   b45e8:	2003e6a1 	.word	0x2003e6a1
   b45ec:	000b8865 	.word	0x000b8865
   b45f0:	2003e68c 	.word	0x2003e68c
   b45f4:	2003e658 	.word	0x2003e658

000b45f8 <loop>:



void loop() {
   b45f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  display.setRotation(1);                //temp oled display
   b45fa:	2101      	movs	r1, #1
   b45fc:	48b6      	ldr	r0, [pc, #728]	; (b48d8 <loop+0x2e0>)
  bmp.readTemperature();                 //using tempf to automatic control wemo1&2
  tempC=bmp.readTemperature();
   b45fe:	4db7      	ldr	r5, [pc, #732]	; (b48dc <loop+0x2e4>)
  tempF=(tempC*1.8)+32;
   b4600:	4cb7      	ldr	r4, [pc, #732]	; (b48e0 <loop+0x2e8>)
  display.setRotation(1);                //temp oled display
   b4602:	f001 f9ee 	bl	b59e2 <_ZN12Adafruit_GFX11setRotationEh>
  bmp.readTemperature();                 //using tempf to automatic control wemo1&2
   b4606:	48b7      	ldr	r0, [pc, #732]	; (b48e4 <loop+0x2ec>)
   b4608:	f001 fb44 	bl	b5c94 <_ZN15Adafruit_BMP28015readTemperatureEv>
  tempC=bmp.readTemperature();
   b460c:	48b5      	ldr	r0, [pc, #724]	; (b48e4 <loop+0x2ec>)
   b460e:	f001 fb41 	bl	b5c94 <_ZN15Adafruit_BMP28015readTemperatureEv>
   b4612:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b4616:	ee17 0a90 	vmov	r0, s15
   b461a:	edc5 7a00 	vstr	s15, [r5]
  tempF=(tempC*1.8)+32;
   b461e:	f003 fbad 	bl	b7d7c <__aeabi_i2d>
   b4622:	a3ab      	add	r3, pc, #684	; (adr r3, b48d0 <loop+0x2d8>)
   b4624:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4628:	f003 fc12 	bl	b7e50 <__aeabi_dmul>
   b462c:	4bae      	ldr	r3, [pc, #696]	; (b48e8 <loop+0x2f0>)
   b462e:	2200      	movs	r2, #0
   b4630:	f003 fa58 	bl	b7ae4 <__adddf3>
   b4634:	f003 fe1e 	bl	b8274 <__aeabi_d2iz>
  display.setTextSize(1);
   b4638:	2101      	movs	r1, #1
  tempF=(tempC*1.8)+32;
   b463a:	6020      	str	r0, [r4, #0]
  display.setTextSize(1);
   b463c:	48a6      	ldr	r0, [pc, #664]	; (b48d8 <loop+0x2e0>)
   b463e:	f001 f9c6 	bl	b59ce <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
   b4642:	48a5      	ldr	r0, [pc, #660]	; (b48d8 <loop+0x2e0>)
   b4644:	2101      	movs	r1, #1
   b4646:	f001 f9c7 	bl	b59d8 <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(0,0);
   b464a:	2200      	movs	r2, #0
   b464c:	4611      	mov	r1, r2
   b464e:	48a2      	ldr	r0, [pc, #648]	; (b48d8 <loop+0x2e0>)
   b4650:	f001 f9ba 	bl	b59c8 <_ZN12Adafruit_GFX9setCursorEss>
  display.printf("%iC\n",tempC);
   b4654:	682a      	ldr	r2, [r5, #0]
   b4656:	49a5      	ldr	r1, [pc, #660]	; (b48ec <loop+0x2f4>)
   b4658:	489f      	ldr	r0, [pc, #636]	; (b48d8 <loop+0x2e0>)
   b465a:	f7ff fd4a 	bl	b40f2 <_ZN5Print6printfEPKcz>
  display.printf("%iF\n",tempF);
   b465e:	6822      	ldr	r2, [r4, #0]
   b4660:	49a3      	ldr	r1, [pc, #652]	; (b48f0 <loop+0x2f8>)
   b4662:	489d      	ldr	r0, [pc, #628]	; (b48d8 <loop+0x2e0>)
   b4664:	f7ff fd45 	bl	b40f2 <_ZN5Print6printfEPKcz>
  display.display();
   b4668:	489b      	ldr	r0, [pc, #620]	; (b48d8 <loop+0x2e0>)
   b466a:	f000 febf 	bl	b53ec <_ZN16Adafruit_SSD13067displayEv>
  Serial.printf("%iC\n",tempC);
   b466e:	f002 fb2d 	bl	b6ccc <_Z16_fetch_usbserialv>
   b4672:	682a      	ldr	r2, [r5, #0]
   b4674:	499d      	ldr	r1, [pc, #628]	; (b48ec <loop+0x2f4>)
   b4676:	f7ff fd3c 	bl	b40f2 <_ZN5Print6printfEPKcz>
  Serial.printf("%iF\n",tempF);
   b467a:	f002 fb27 	bl	b6ccc <_Z16_fetch_usbserialv>
   b467e:	6822      	ldr	r2, [r4, #0]
   b4680:	499b      	ldr	r1, [pc, #620]	; (b48f0 <loop+0x2f8>)
  display.clearDisplay();
  if(water<=50){
   b4682:	4c9c      	ldr	r4, [pc, #624]	; (b48f4 <loop+0x2fc>)
  Serial.printf("%iF\n",tempF);
   b4684:	f7ff fd35 	bl	b40f2 <_ZN5Print6printfEPKcz>
  display.clearDisplay();
   b4688:	4893      	ldr	r0, [pc, #588]	; (b48d8 <loop+0x2e0>)
   b468a:	f000 fe37 	bl	b52fc <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(water<=50){
   b468e:	6823      	ldr	r3, [r4, #0]
   b4690:	2b32      	cmp	r3, #50	; 0x32
   b4692:	dc03      	bgt.n	b469c <loop+0xa4>
      display.printf("Water\nNeeded");     //set by water sensor
   b4694:	4998      	ldr	r1, [pc, #608]	; (b48f8 <loop+0x300>)
   b4696:	4890      	ldr	r0, [pc, #576]	; (b48d8 <loop+0x2e0>)
   b4698:	f7ff fd2b 	bl	b40f2 <_ZN5Print6printfEPKcz>
    }
  display.display();
   b469c:	488e      	ldr	r0, [pc, #568]	; (b48d8 <loop+0x2e0>)
   b469e:	f000 fea5 	bl	b53ec <_ZN16Adafruit_SSD13067displayEv>
  
  water=analogRead(W);
   b46a2:	200e      	movs	r0, #14
   b46a4:	f003 f84b 	bl	b773e <analogRead>
  Serial.printf("%i\n\n",water);
  int blind;
  blind=map(water,0,955,255,0);  //little to no water, neopixel max brightness
   b46a8:	2500      	movs	r5, #0
  water=analogRead(W);
   b46aa:	6020      	str	r0, [r4, #0]
  Serial.printf("%i\n\n",water);
   b46ac:	f002 fb0e 	bl	b6ccc <_Z16_fetch_usbserialv>
   b46b0:	6822      	ldr	r2, [r4, #0]
   b46b2:	4992      	ldr	r1, [pc, #584]	; (b48fc <loop+0x304>)
   b46b4:	f7ff fd1d 	bl	b40f2 <_ZN5Print6printfEPKcz>
  blind=map(water,0,955,255,0);  //little to no water, neopixel max brightness
   b46b8:	9500      	str	r5, [sp, #0]
   b46ba:	23ff      	movs	r3, #255	; 0xff
   b46bc:	f240 32bb 	movw	r2, #955	; 0x3bb
   b46c0:	4629      	mov	r1, r5
   b46c2:	6820      	ldr	r0, [r4, #0]
   b46c4:	f002 f960 	bl	b6988 <_Z3mapiiiii>
  pix.setBrightness(blind);
   b46c8:	b2c1      	uxtb	r1, r0
   b46ca:	488d      	ldr	r0, [pc, #564]	; (b4900 <loop+0x308>)
   b46cc:	f000 fc0f 	bl	b4eee <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  pix.setPixelColor(0,0x008000);
   b46d0:	4629      	mov	r1, r5
   b46d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   b46d6:	488a      	ldr	r0, [pc, #552]	; (b4900 <loop+0x308>)
   b46d8:	f000 fbc6 	bl	b4e68 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
  pix.show();
   b46dc:	4888      	ldr	r0, [pc, #544]	; (b4900 <loop+0x308>)
   b46de:	f000 fa17 	bl	b4b10 <_ZN17Adafruit_NeoPixel4showEv>

    bool isClicked() {
      static bool _prevButtonState;
      bool _buttonState, _clicked;

      _buttonState = digitalRead(_buttonPin);
   b46e2:	4b88      	ldr	r3, [pc, #544]	; (b4904 <loop+0x30c>)
   b46e4:	8818      	ldrh	r0, [r3, #0]
   b46e6:	f003 f817 	bl	b7718 <digitalRead>
   b46ea:	1b42      	subs	r2, r0, r5
      if(_buttonState != _prevButtonState) {
   b46ec:	4d86      	ldr	r5, [pc, #536]	; (b4908 <loop+0x310>)
   b46ee:	4b87      	ldr	r3, [pc, #540]	; (b490c <loop+0x314>)
   b46f0:	7829      	ldrb	r1, [r5, #0]
      _buttonState = digitalRead(_buttonPin);
   b46f2:	bf18      	it	ne
   b46f4:	2201      	movne	r2, #1
      if(_buttonState != _prevButtonState) {
   b46f6:	4291      	cmp	r1, r2
   b46f8:	f040 80a4 	bne.w	b4844 <loop+0x24c>
        _clicked = _buttonState;
      }
      else {
        _clicked = false;
      }
      _prevButtonState=_buttonState;
   b46fc:	7029      	strb	r1, [r5, #0]

if(buttonB.isClicked()){
    b=!b;
  }
if(b){
   b46fe:	781c      	ldrb	r4, [r3, #0]
   b4700:	2c00      	cmp	r4, #0
   b4702:	f000 80a8 	beq.w	b4856 <loop+0x25e>
    digitalWrite(D10,HIGH);
    delay(x);
   b4706:	4f82      	ldr	r7, [pc, #520]	; (b4910 <loop+0x318>)
    switchON(3);
    setHue(1,true,HueBlue,255,255);
   b4708:	4e82      	ldr	r6, [pc, #520]	; (b4914 <loop+0x31c>)
    digitalWrite(D10,HIGH);
   b470a:	2101      	movs	r1, #1
   b470c:	200a      	movs	r0, #10
   b470e:	f002 ffea 	bl	b76e6 <digitalWrite>
    delay(x);
   b4712:	6838      	ldr	r0, [r7, #0]
    setHue(1,true,HueBlue,255,255);
   b4714:	24ff      	movs	r4, #255	; 0xff
    delay(x);
   b4716:	f002 f943 	bl	b69a0 <delay>
    switchON(3);
   b471a:	2003      	movs	r0, #3
   b471c:	f7ff fe42 	bl	b43a4 <_Z8switchONi>
    setHue(1,true,HueBlue,255,255);
   b4720:	2101      	movs	r1, #1
   b4722:	9400      	str	r4, [sp, #0]
   b4724:	6832      	ldr	r2, [r6, #0]
   b4726:	4623      	mov	r3, r4
   b4728:	4608      	mov	r0, r1
   b472a:	f7ff fd15 	bl	b4158 <_Z6setHueibiii>
    delay(x);
   b472e:	6838      	ldr	r0, [r7, #0]
   b4730:	f002 f936 	bl	b69a0 <delay>
    setHue(2,true,HueBlue,255,255);
   b4734:	9400      	str	r4, [sp, #0]
   b4736:	6832      	ldr	r2, [r6, #0]
   b4738:	4623      	mov	r3, r4
   b473a:	2101      	movs	r1, #1
   b473c:	2002      	movs	r0, #2
   b473e:	f7ff fd0b 	bl	b4158 <_Z6setHueibiii>
    delay(x);
   b4742:	6838      	ldr	r0, [r7, #0]
   b4744:	f002 f92c 	bl	b69a0 <delay>
    setHue(3,true,HueBlue,255,255);
   b4748:	9400      	str	r4, [sp, #0]
   b474a:	6832      	ldr	r2, [r6, #0]
   b474c:	4623      	mov	r3, r4
   b474e:	2101      	movs	r1, #1
   b4750:	2003      	movs	r0, #3
   b4752:	f7ff fd01 	bl	b4158 <_Z6setHueibiii>
    delay(x);
   b4756:	6838      	ldr	r0, [r7, #0]
   b4758:	f002 f922 	bl	b69a0 <delay>
    setHue(4,true,HueBlue,255,255);
   b475c:	9400      	str	r4, [sp, #0]
   b475e:	6832      	ldr	r2, [r6, #0]
   b4760:	4623      	mov	r3, r4
   b4762:	2101      	movs	r1, #1
   b4764:	2004      	movs	r0, #4
   b4766:	f7ff fcf7 	bl	b4158 <_Z6setHueibiii>
    delay(x);
   b476a:	6838      	ldr	r0, [r7, #0]
   b476c:	f002 f918 	bl	b69a0 <delay>
    setHue(5,true,HueBlue,255,255);
   b4770:	9400      	str	r4, [sp, #0]
   b4772:	6832      	ldr	r2, [r6, #0]
   b4774:	4623      	mov	r3, r4
   b4776:	2101      	movs	r1, #1
   b4778:	2005      	movs	r0, #5
   b477a:	f7ff fced 	bl	b4158 <_Z6setHueibiii>
    delay(x);
   b477e:	6838      	ldr	r0, [r7, #0]
   b4780:	f002 f90e 	bl	b69a0 <delay>
    setHue(6,true,HueBlue,255,255);
   b4784:	9400      	str	r4, [sp, #0]
   b4786:	6832      	ldr	r2, [r6, #0]
   b4788:	4623      	mov	r3, r4
   b478a:	2101      	movs	r1, #1
   b478c:	2006      	movs	r0, #6
   b478e:	f7ff fce3 	bl	b4158 <_Z6setHueibiii>
      _buttonState = digitalRead(_buttonPin);
   b4792:	4b61      	ldr	r3, [pc, #388]	; (b4918 <loop+0x320>)
   b4794:	8818      	ldrh	r0, [r3, #0]
   b4796:	f002 ffbf 	bl	b7718 <digitalRead>
      if(_buttonState != _prevButtonState) {
   b479a:	7829      	ldrb	r1, [r5, #0]
   b479c:	4b5f      	ldr	r3, [pc, #380]	; (b491c <loop+0x324>)
      _buttonState = digitalRead(_buttonPin);
   b479e:	1e02      	subs	r2, r0, #0
   b47a0:	bf18      	it	ne
   b47a2:	2201      	movne	r2, #1
      if(_buttonState != _prevButtonState) {
   b47a4:	4291      	cmp	r1, r2
   b47a6:	f040 8088 	bne.w	b48ba <loop+0x2c2>
      _prevButtonState=_buttonState;
   b47aa:	7029      	strb	r1, [r5, #0]
    switchOFF(2);
  }
if(buttonR.isClicked()){
    r=!r;
  }
if(r){
   b47ac:	781c      	ldrb	r4, [r3, #0]
   b47ae:	2c00      	cmp	r4, #0
   b47b0:	f000 80b8 	beq.w	b4924 <loop+0x32c>
    digitalWrite(D9,HIGH);
    delay(x);
   b47b4:	4e56      	ldr	r6, [pc, #344]	; (b4910 <loop+0x318>)
    switchON(1);
    setHue(1,true,HueRed,255,255);
   b47b6:	4d5a      	ldr	r5, [pc, #360]	; (b4920 <loop+0x328>)
    digitalWrite(D9,HIGH);
   b47b8:	2101      	movs	r1, #1
   b47ba:	2009      	movs	r0, #9
   b47bc:	f002 ff93 	bl	b76e6 <digitalWrite>
    delay(x);
   b47c0:	6830      	ldr	r0, [r6, #0]
    setHue(1,true,HueRed,255,255);
   b47c2:	24ff      	movs	r4, #255	; 0xff
    delay(x);
   b47c4:	f002 f8ec 	bl	b69a0 <delay>
    switchON(1);
   b47c8:	2001      	movs	r0, #1
   b47ca:	f7ff fdeb 	bl	b43a4 <_Z8switchONi>
    setHue(1,true,HueRed,255,255);
   b47ce:	2101      	movs	r1, #1
   b47d0:	9400      	str	r4, [sp, #0]
   b47d2:	682a      	ldr	r2, [r5, #0]
   b47d4:	4623      	mov	r3, r4
   b47d6:	4608      	mov	r0, r1
   b47d8:	f7ff fcbe 	bl	b4158 <_Z6setHueibiii>
    delay(x);
   b47dc:	6830      	ldr	r0, [r6, #0]
   b47de:	f002 f8df 	bl	b69a0 <delay>
    setHue(2,true,HueRed,255,255);
   b47e2:	9400      	str	r4, [sp, #0]
   b47e4:	682a      	ldr	r2, [r5, #0]
   b47e6:	4623      	mov	r3, r4
   b47e8:	2101      	movs	r1, #1
   b47ea:	2002      	movs	r0, #2
   b47ec:	f7ff fcb4 	bl	b4158 <_Z6setHueibiii>
    delay(x);
   b47f0:	6830      	ldr	r0, [r6, #0]
   b47f2:	f002 f8d5 	bl	b69a0 <delay>
    setHue(3,true,HueRed,255,255);
   b47f6:	9400      	str	r4, [sp, #0]
   b47f8:	682a      	ldr	r2, [r5, #0]
   b47fa:	4623      	mov	r3, r4
   b47fc:	2101      	movs	r1, #1
   b47fe:	2003      	movs	r0, #3
   b4800:	f7ff fcaa 	bl	b4158 <_Z6setHueibiii>
    delay(x);
   b4804:	6830      	ldr	r0, [r6, #0]
   b4806:	f002 f8cb 	bl	b69a0 <delay>
    setHue(4,true,HueRed,255,255);
   b480a:	9400      	str	r4, [sp, #0]
   b480c:	682a      	ldr	r2, [r5, #0]
   b480e:	4623      	mov	r3, r4
   b4810:	2101      	movs	r1, #1
   b4812:	2004      	movs	r0, #4
   b4814:	f7ff fca0 	bl	b4158 <_Z6setHueibiii>
    delay(x);
   b4818:	6830      	ldr	r0, [r6, #0]
   b481a:	f002 f8c1 	bl	b69a0 <delay>
    setHue(5,true,HueRed,255,255);
   b481e:	9400      	str	r4, [sp, #0]
   b4820:	682a      	ldr	r2, [r5, #0]
   b4822:	4623      	mov	r3, r4
   b4824:	2101      	movs	r1, #1
   b4826:	2005      	movs	r0, #5
   b4828:	f7ff fc96 	bl	b4158 <_Z6setHueibiii>
    delay(x);
   b482c:	6830      	ldr	r0, [r6, #0]
   b482e:	f002 f8b7 	bl	b69a0 <delay>
    setHue(6,true,HueRed,255,255);
   b4832:	9400      	str	r4, [sp, #0]
   b4834:	682a      	ldr	r2, [r5, #0]
   b4836:	4623      	mov	r3, r4
   b4838:	2101      	movs	r1, #1
   b483a:	2006      	movs	r0, #6
   b483c:	f7ff fc8c 	bl	b4158 <_Z6setHueibiii>
    setHue(4,false,0,0,0);
    setHue(5,false,0,0,0);
    setHue(6,false,0,0,0);
    switchOFF(1);
  }
}
   b4840:	b003      	add	sp, #12
   b4842:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4844:	702a      	strb	r2, [r5, #0]
if(buttonB.isClicked()){
   b4846:	2800      	cmp	r0, #0
   b4848:	f43f af59 	beq.w	b46fe <loop+0x106>
    b=!b;
   b484c:	781a      	ldrb	r2, [r3, #0]
   b484e:	f082 0201 	eor.w	r2, r2, #1
   b4852:	701a      	strb	r2, [r3, #0]
   b4854:	e753      	b.n	b46fe <loop+0x106>
    digitalWrite(D10,LOW);
   b4856:	4621      	mov	r1, r4
   b4858:	200a      	movs	r0, #10
   b485a:	f002 ff44 	bl	b76e6 <digitalWrite>
    setHue(1,false,0,0,0);
   b485e:	4623      	mov	r3, r4
   b4860:	4622      	mov	r2, r4
   b4862:	4621      	mov	r1, r4
   b4864:	9400      	str	r4, [sp, #0]
   b4866:	2001      	movs	r0, #1
   b4868:	f7ff fc76 	bl	b4158 <_Z6setHueibiii>
    setHue(2,false,0,0,0);
   b486c:	4623      	mov	r3, r4
   b486e:	4622      	mov	r2, r4
   b4870:	4621      	mov	r1, r4
   b4872:	9400      	str	r4, [sp, #0]
   b4874:	2002      	movs	r0, #2
   b4876:	f7ff fc6f 	bl	b4158 <_Z6setHueibiii>
    setHue(3,false,0,0,0);
   b487a:	4623      	mov	r3, r4
   b487c:	4622      	mov	r2, r4
   b487e:	4621      	mov	r1, r4
   b4880:	9400      	str	r4, [sp, #0]
   b4882:	2003      	movs	r0, #3
   b4884:	f7ff fc68 	bl	b4158 <_Z6setHueibiii>
    setHue(4,false,0,0,0);
   b4888:	4623      	mov	r3, r4
   b488a:	4622      	mov	r2, r4
   b488c:	4621      	mov	r1, r4
   b488e:	9400      	str	r4, [sp, #0]
   b4890:	2004      	movs	r0, #4
   b4892:	f7ff fc61 	bl	b4158 <_Z6setHueibiii>
    setHue(5,false,0,0,0);
   b4896:	4623      	mov	r3, r4
   b4898:	4622      	mov	r2, r4
   b489a:	4621      	mov	r1, r4
   b489c:	9400      	str	r4, [sp, #0]
   b489e:	2005      	movs	r0, #5
   b48a0:	f7ff fc5a 	bl	b4158 <_Z6setHueibiii>
    setHue(6,false,0,0,0);
   b48a4:	9400      	str	r4, [sp, #0]
   b48a6:	4623      	mov	r3, r4
   b48a8:	4622      	mov	r2, r4
   b48aa:	4621      	mov	r1, r4
   b48ac:	2006      	movs	r0, #6
   b48ae:	f7ff fc53 	bl	b4158 <_Z6setHueibiii>
    switchOFF(2);
   b48b2:	2002      	movs	r0, #2
   b48b4:	f7ff fdd8 	bl	b4468 <_Z9switchOFFi>
   b48b8:	e76b      	b.n	b4792 <loop+0x19a>
   b48ba:	702a      	strb	r2, [r5, #0]
if(buttonR.isClicked()){
   b48bc:	2800      	cmp	r0, #0
   b48be:	f43f af75 	beq.w	b47ac <loop+0x1b4>
    r=!r;
   b48c2:	781a      	ldrb	r2, [r3, #0]
   b48c4:	f082 0201 	eor.w	r2, r2, #1
   b48c8:	701a      	strb	r2, [r3, #0]
   b48ca:	e76f      	b.n	b47ac <loop+0x1b4>
   b48cc:	f3af 8000 	nop.w
   b48d0:	cccccccd 	.word	0xcccccccd
   b48d4:	3ffccccc 	.word	0x3ffccccc
   b48d8:	2003e658 	.word	0x2003e658
   b48dc:	2003e6a4 	.word	0x2003e6a4
   b48e0:	2003e6a8 	.word	0x2003e6a8
   b48e4:	2003e61c 	.word	0x2003e61c
   b48e8:	40400000 	.word	0x40400000
   b48ec:	000b888f 	.word	0x000b888f
   b48f0:	000b8894 	.word	0x000b8894
   b48f4:	2003e6ac 	.word	0x2003e6ac
   b48f8:	000b8899 	.word	0x000b8899
   b48fc:	000b88a6 	.word	0x000b88a6
   b4900:	2003e68c 	.word	0x2003e68c
   b4904:	2003e650 	.word	0x2003e650
   b4908:	2003e59c 	.word	0x2003e59c
   b490c:	2003e618 	.word	0x2003e618
   b4910:	2003e6b0 	.word	0x2003e6b0
   b4914:	2003e0f0 	.word	0x2003e0f0
   b4918:	2003e654 	.word	0x2003e654
   b491c:	2003e6a0 	.word	0x2003e6a0
   b4920:	2003e5d8 	.word	0x2003e5d8
    digitalWrite(D9,LOW);
   b4924:	4621      	mov	r1, r4
   b4926:	2009      	movs	r0, #9
   b4928:	f002 fedd 	bl	b76e6 <digitalWrite>
    setHue(1,false,0,0,0);
   b492c:	4623      	mov	r3, r4
   b492e:	4622      	mov	r2, r4
   b4930:	4621      	mov	r1, r4
   b4932:	9400      	str	r4, [sp, #0]
   b4934:	2001      	movs	r0, #1
   b4936:	f7ff fc0f 	bl	b4158 <_Z6setHueibiii>
    setHue(2,false,0,0,0);
   b493a:	4623      	mov	r3, r4
   b493c:	4622      	mov	r2, r4
   b493e:	4621      	mov	r1, r4
   b4940:	9400      	str	r4, [sp, #0]
   b4942:	2002      	movs	r0, #2
   b4944:	f7ff fc08 	bl	b4158 <_Z6setHueibiii>
    setHue(3,false,0,0,0);
   b4948:	4623      	mov	r3, r4
   b494a:	4622      	mov	r2, r4
   b494c:	4621      	mov	r1, r4
   b494e:	9400      	str	r4, [sp, #0]
   b4950:	2003      	movs	r0, #3
   b4952:	f7ff fc01 	bl	b4158 <_Z6setHueibiii>
    setHue(4,false,0,0,0);
   b4956:	4623      	mov	r3, r4
   b4958:	4622      	mov	r2, r4
   b495a:	4621      	mov	r1, r4
   b495c:	9400      	str	r4, [sp, #0]
   b495e:	2004      	movs	r0, #4
   b4960:	f7ff fbfa 	bl	b4158 <_Z6setHueibiii>
    setHue(5,false,0,0,0);
   b4964:	4623      	mov	r3, r4
   b4966:	4622      	mov	r2, r4
   b4968:	4621      	mov	r1, r4
   b496a:	9400      	str	r4, [sp, #0]
   b496c:	2005      	movs	r0, #5
   b496e:	f7ff fbf3 	bl	b4158 <_Z6setHueibiii>
    setHue(6,false,0,0,0);
   b4972:	9400      	str	r4, [sp, #0]
   b4974:	4623      	mov	r3, r4
   b4976:	4622      	mov	r2, r4
   b4978:	4621      	mov	r1, r4
   b497a:	2006      	movs	r0, #6
   b497c:	f7ff fbec 	bl	b4158 <_Z6setHueibiii>
    switchOFF(1);
   b4980:	2001      	movs	r0, #1
}
   b4982:	b003      	add	sp, #12
   b4984:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    switchOFF(1);
   b4988:	f7ff bd6e 	b.w	b4468 <_Z9switchOFFi>

000b498c <_GLOBAL__sub_I_pix>:
Adafruit_NeoPixel pix(1,D2,WS2812B);
   b498c:	2302      	movs	r3, #2
}
   b498e:	b510      	push	{r4, lr}
Adafruit_NeoPixel pix(1,D2,WS2812B);
   b4990:	461a      	mov	r2, r3
   b4992:	2101      	movs	r1, #1
   b4994:	4820      	ldr	r0, [pc, #128]	; (b4a18 <_GLOBAL__sub_I_pix+0x8c>)
   b4996:	f000 f8a9 	bl	b4aec <_ZN17Adafruit_NeoPixelC1Ethh>
Adafruit_BMP280 bmp;
   b499a:	4820      	ldr	r0, [pc, #128]	; (b4a1c <_GLOBAL__sub_I_pix+0x90>)
   b499c:	f001 f835 	bl	b5a0a <_ZN15Adafruit_BMP280C1Ev>
String hueCmd;  // Hue command
   b49a0:	491f      	ldr	r1, [pc, #124]	; (b4a20 <_GLOBAL__sub_I_pix+0x94>)
   b49a2:	4820      	ldr	r0, [pc, #128]	; (b4a24 <_GLOBAL__sub_I_pix+0x98>)
   b49a4:	f001 fe6f 	bl	b6686 <_ZN6StringC1EPK19__FlashStringHelper>
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b49a8:	4a1f      	ldr	r2, [pc, #124]	; (b4a28 <_GLOBAL__sub_I_pix+0x9c>)
   b49aa:	4b20      	ldr	r3, [pc, #128]	; (b4a2c <_GLOBAL__sub_I_pix+0xa0>)
   b49ac:	6812      	ldr	r2, [r2, #0]
   b49ae:	601a      	str	r2, [r3, #0]
   b49b0:	4a1f      	ldr	r2, [pc, #124]	; (b4a30 <_GLOBAL__sub_I_pix+0xa4>)
TCPClient HueClient;
   b49b2:	4820      	ldr	r0, [pc, #128]	; (b4a34 <_GLOBAL__sub_I_pix+0xa8>)
int HueRainbow[] = {HueRed, HueOrange, HueYellow, HueGreen, HueBlue, HueIndigo, HueViolet};
   b49b4:	6812      	ldr	r2, [r2, #0]
   b49b6:	605a      	str	r2, [r3, #4]
   b49b8:	4a1f      	ldr	r2, [pc, #124]	; (b4a38 <_GLOBAL__sub_I_pix+0xac>)
   b49ba:	6812      	ldr	r2, [r2, #0]
   b49bc:	609a      	str	r2, [r3, #8]
   b49be:	4a1f      	ldr	r2, [pc, #124]	; (b4a3c <_GLOBAL__sub_I_pix+0xb0>)
   b49c0:	6812      	ldr	r2, [r2, #0]
   b49c2:	60da      	str	r2, [r3, #12]
   b49c4:	4a1e      	ldr	r2, [pc, #120]	; (b4a40 <_GLOBAL__sub_I_pix+0xb4>)
   b49c6:	6812      	ldr	r2, [r2, #0]
   b49c8:	611a      	str	r2, [r3, #16]
   b49ca:	4a1e      	ldr	r2, [pc, #120]	; (b4a44 <_GLOBAL__sub_I_pix+0xb8>)
   b49cc:	6812      	ldr	r2, [r2, #0]
   b49ce:	615a      	str	r2, [r3, #20]
   b49d0:	4a1d      	ldr	r2, [pc, #116]	; (b4a48 <_GLOBAL__sub_I_pix+0xbc>)
   b49d2:	6812      	ldr	r2, [r2, #0]
   b49d4:	619a      	str	r2, [r3, #24]
TCPClient HueClient;
   b49d6:	f002 fd33 	bl	b7440 <_ZN9TCPClientC1Ev>
TCPClient WemoClient;
   b49da:	481c      	ldr	r0, [pc, #112]	; (b4a4c <_GLOBAL__sub_I_pix+0xc0>)
   b49dc:	f002 fd30 	bl	b7440 <_ZN9TCPClientC1Ev>
              error_(SYSTEM_ERROR_NONE) {
   b49e0:	4b1b      	ldr	r3, [pc, #108]	; (b4a50 <_GLOBAL__sub_I_pix+0xc4>)
    SleepResult() {}
   b49e2:	4a1c      	ldr	r2, [pc, #112]	; (b4a54 <_GLOBAL__sub_I_pix+0xc8>)
   b49e4:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b49e6:	2400      	movs	r4, #0
   b49e8:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b49ec:	2003      	movs	r0, #3
   b49ee:	f001 fbd7 	bl	b61a0 <set_system_mode>
Adafruit_SSD1306 display(OLED_RESET);
   b49f2:	2104      	movs	r1, #4
   b49f4:	4818      	ldr	r0, [pc, #96]	; (b4a58 <_GLOBAL__sub_I_pix+0xcc>)
   b49f6:	f000 fc6b 	bl	b52d0 <_ZN16Adafruit_SSD1306C1Ea>
      _buttonPin = buttonPin;
   b49fa:	4b18      	ldr	r3, [pc, #96]	; (b4a5c <_GLOBAL__sub_I_pix+0xd0>)
   b49fc:	2013      	movs	r0, #19
   b49fe:	6018      	str	r0, [r3, #0]
      pinMode(_buttonPin,INPUT);
   b4a00:	4621      	mov	r1, r4
   b4a02:	f002 fe5f 	bl	b76c4 <pinMode>
      _buttonPin = buttonPin;
   b4a06:	4b16      	ldr	r3, [pc, #88]	; (b4a60 <_GLOBAL__sub_I_pix+0xd4>)
   b4a08:	2012      	movs	r0, #18
   b4a0a:	6018      	str	r0, [r3, #0]
      pinMode(_buttonPin,INPUT);
   b4a0c:	4621      	mov	r1, r4
}
   b4a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4a12:	f002 be57 	b.w	b76c4 <pinMode>
   b4a16:	bf00      	nop
   b4a18:	2003e68c 	.word	0x2003e68c
   b4a1c:	2003e61c 	.word	0x2003e61c
   b4a20:	000b88aa 	.word	0x000b88aa
   b4a24:	2003e67c 	.word	0x2003e67c
   b4a28:	2003e5d8 	.word	0x2003e5d8
   b4a2c:	2003e5bc 	.word	0x2003e5bc
   b4a30:	2003e0fc 	.word	0x2003e0fc
   b4a34:	2003e5a0 	.word	0x2003e5a0
   b4a38:	2003e104 	.word	0x2003e104
   b4a3c:	2003e0f4 	.word	0x2003e0f4
   b4a40:	2003e0f0 	.word	0x2003e0f0
   b4a44:	2003e0f8 	.word	0x2003e0f8
   b4a48:	2003e100 	.word	0x2003e100
   b4a4c:	2003e5e8 	.word	0x2003e5e8
   b4a50:	2003e5dc 	.word	0x2003e5dc
   b4a54:	ffff0000 	.word	0xffff0000
   b4a58:	2003e658 	.word	0x2003e658
   b4a5c:	2003e650 	.word	0x2003e650
   b4a60:	2003e654 	.word	0x2003e654

000b4a64 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

uint8_t Adafruit_NeoPixel::getType() const {
    return type;
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b4a64:	b538      	push	{r3, r4, r5, lr}
   b4a66:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   b4a68:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b4a6a:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   b4a6c:	b108      	cbz	r0, b4a72 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   b4a6e:	f001 fc33 	bl	b62d8 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   b4a72:	79a3      	ldrb	r3, [r4, #6]
   b4a74:	2b06      	cmp	r3, #6
   b4a76:	bf0c      	ite	eq
   b4a78:	2004      	moveq	r0, #4
   b4a7a:	2003      	movne	r0, #3
   b4a7c:	fb10 f005 	smulbb	r0, r0, r5
   b4a80:	b280      	uxth	r0, r0
   b4a82:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   b4a84:	f001 fc20 	bl	b62c8 <malloc>
   b4a88:	60e0      	str	r0, [r4, #12]
   b4a8a:	b128      	cbz	r0, b4a98 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   b4a8c:	88a2      	ldrh	r2, [r4, #4]
   b4a8e:	2100      	movs	r1, #0
   b4a90:	f003 fc2c 	bl	b82ec <memset>
    numLEDs = n;
   b4a94:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   b4a96:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   b4a98:	80a0      	strh	r0, [r4, #4]
   b4a9a:	8060      	strh	r0, [r4, #2]
}
   b4a9c:	e7fb      	b.n	b4a96 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000b4a9e <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
   b4a9e:	b510      	push	{r4, lr}
   b4aa0:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   b4aa2:	2101      	movs	r1, #1
   b4aa4:	79c0      	ldrb	r0, [r0, #7]
   b4aa6:	f002 fe0d 	bl	b76c4 <pinMode>
  digitalWrite(pin, LOW);
   b4aaa:	79e0      	ldrb	r0, [r4, #7]
   b4aac:	2100      	movs	r1, #0
   b4aae:	f002 fe1a 	bl	b76e6 <digitalWrite>
  begun = true;
   b4ab2:	2301      	movs	r3, #1
   b4ab4:	7023      	strb	r3, [r4, #0]
}
   b4ab6:	bd10      	pop	{r4, pc}

000b4ab8 <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b4ab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   b4aba:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b4abc:	4605      	mov	r5, r0
   b4abe:	460c      	mov	r4, r1
    if (begun) {
   b4ac0:	b11b      	cbz	r3, b4aca <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   b4ac2:	79c0      	ldrb	r0, [r0, #7]
   b4ac4:	2100      	movs	r1, #0
   b4ac6:	f002 fdfd 	bl	b76c4 <pinMode>
    }
    pin = p;
    if (begun) {
   b4aca:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   b4acc:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   b4ace:	b15b      	cbz	r3, b4ae8 <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   b4ad0:	b2a0      	uxth	r0, r4
   b4ad2:	2101      	movs	r1, #1
   b4ad4:	9001      	str	r0, [sp, #4]
   b4ad6:	f002 fdf5 	bl	b76c4 <pinMode>
        digitalWrite(p, LOW);
   b4ada:	9801      	ldr	r0, [sp, #4]
   b4adc:	2100      	movs	r1, #0
    }
}
   b4ade:	b003      	add	sp, #12
   b4ae0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   b4ae4:	f002 bdff 	b.w	b76e6 <digitalWrite>
}
   b4ae8:	b003      	add	sp, #12
   b4aea:	bd30      	pop	{r4, r5, pc}

000b4aec <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b4aec:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b4aee:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b4af0:	4604      	mov	r4, r0
   b4af2:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b4af4:	7183      	strb	r3, [r0, #6]
   b4af6:	e9c0 5503 	strd	r5, r5, [r0, #12]
   b4afa:	7005      	strb	r5, [r0, #0]
   b4afc:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   b4afe:	f7ff ffb1 	bl	b4a64 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   b4b02:	4620      	mov	r0, r4
   b4b04:	4631      	mov	r1, r6
   b4b06:	f7ff ffd7 	bl	b4ab8 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   b4b0a:	4620      	mov	r0, r4
   b4b0c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4b10 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   b4b10:	68c3      	ldr	r3, [r0, #12]
   b4b12:	2b00      	cmp	r3, #0
   b4b14:	f000 81a4 	beq.w	b4e60 <_ZN17Adafruit_NeoPixel4showEv+0x350>
void Adafruit_NeoPixel::show(void) {
   b4b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4b1c:	7983      	ldrb	r3, [r0, #6]
   b4b1e:	3b02      	subs	r3, #2
   b4b20:	b2db      	uxtb	r3, r3
   b4b22:	2b04      	cmp	r3, #4
   b4b24:	bf9c      	itt	ls
   b4b26:	4abf      	ldrls	r2, [pc, #764]	; (b4e24 <_ZN17Adafruit_NeoPixel4showEv+0x314>)
   b4b28:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   b4b2c:	b085      	sub	sp, #20
   b4b2e:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   b4b30:	bf88      	it	hi
   b4b32:	2432      	movhi	r4, #50	; 0x32
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b4b34:	f001 f994 	bl	b5e60 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   b4b38:	692b      	ldr	r3, [r5, #16]
   b4b3a:	1ac0      	subs	r0, r0, r3
   b4b3c:	42a0      	cmp	r0, r4
   b4b3e:	d3f9      	bcc.n	b4b34 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   b4b40:	4cb9      	ldr	r4, [pc, #740]	; (b4e28 <_ZN17Adafruit_NeoPixel4showEv+0x318>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b4b42:	88ae      	ldrh	r6, [r5, #4]
    if( (PWM[device]->ENABLE == 0)                            &&
   b4b44:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4b48:	b91b      	cbnz	r3, b4b52 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4b4a:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b4b4e:	2b00      	cmp	r3, #0
   b4b50:	db7e      	blt.n	b4c50 <_ZN17Adafruit_NeoPixel4showEv+0x140>
   b4b52:	4cb6      	ldr	r4, [pc, #728]	; (b4e2c <_ZN17Adafruit_NeoPixel4showEv+0x31c>)
   b4b54:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4b58:	b923      	cbnz	r3, b4b64 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4b5a:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b4b5e:	2b00      	cmp	r3, #0
   b4b60:	f2c0 816e 	blt.w	b4e40 <_ZN17Adafruit_NeoPixel4showEv+0x330>
   b4b64:	4cb2      	ldr	r4, [pc, #712]	; (b4e30 <_ZN17Adafruit_NeoPixel4showEv+0x320>)
   b4b66:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4b6a:	2b00      	cmp	r3, #0
   b4b6c:	f000 8144 	beq.w	b4df8 <_ZN17Adafruit_NeoPixel4showEv+0x2e8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4b70:	79eb      	ldrb	r3, [r5, #7]
   b4b72:	4ab0      	ldr	r2, [pc, #704]	; (b4e34 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b4b74:	4cb0      	ldr	r4, [pc, #704]	; (b4e38 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4b76:	6812      	ldr	r2, [r2, #0]
   b4b78:	0119      	lsls	r1, r3, #4
   b4b7a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b4b7e:	5c57      	ldrb	r7, [r2, r1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b4b80:	49ae      	ldr	r1, [pc, #696]	; (b4e3c <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4b82:	785b      	ldrb	r3, [r3, #1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b4b84:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   b4b88:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   b4b8c:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b4b90:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4b92:	f003 031f 	and.w	r3, r3, #31
   b4b96:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   b4b9a:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b4b9c:	433a      	orrs	r2, r7
   b4b9e:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   b4ba0:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b4ba2:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b4ba6:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4baa:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   b4bac:	2900      	cmp	r1, #0
   b4bae:	d044      	beq.n	b4c3a <_ZN17Adafruit_NeoPixel4showEv+0x12a>
   b4bb0:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   b4bb4:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   b4bb6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   b4bba:	f818 cb01 	ldrb.w	ip, [r8], #1
   b4bbe:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4bc0:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   b4bc2:	6863      	ldr	r3, [r4, #4]
   b4bc4:	1a9b      	subs	r3, r3, r2
   b4bc6:	2b46      	cmp	r3, #70	; 0x46
   b4bc8:	d9fb      	bls.n	b4bc2 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
          cyc  = DWT->CYCCNT;
   b4bca:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   b4bcc:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   b4bd0:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   b4bd4:	ea43 0307 	orr.w	r3, r3, r7
   b4bd8:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   b4bdc:	d02f      	beq.n	b4c3e <_ZN17Adafruit_NeoPixel4showEv+0x12e>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   b4bde:	6863      	ldr	r3, [r4, #4]
   b4be0:	1a9b      	subs	r3, r3, r2
   b4be2:	2b28      	cmp	r3, #40	; 0x28
   b4be4:	d9fb      	bls.n	b4bde <_ZN17Adafruit_NeoPixel4showEv+0xce>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   b4be6:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4bea:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   b4bec:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4bf0:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   b4bf4:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4bf8:	d1e3      	bne.n	b4bc2 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
      for(uint16_t n=0; n<numBytes; n++) {
   b4bfa:	88ab      	ldrh	r3, [r5, #4]
   b4bfc:	f10e 0e01 	add.w	lr, lr, #1
   b4c00:	fa1f fe8e 	uxth.w	lr, lr
   b4c04:	4573      	cmp	r3, lr
   b4c06:	d8d8      	bhi.n	b4bba <_ZN17Adafruit_NeoPixel4showEv+0xaa>
      while(DWT->CYCCNT - cyc < CYCLES_X00);


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b4c08:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   b4c0c:	fb03 f101 	mul.w	r1, r3, r1
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   b4c10:	6863      	ldr	r3, [r4, #4]
   b4c12:	1a9b      	subs	r3, r3, r2
   b4c14:	2b46      	cmp	r3, #70	; 0x46
   b4c16:	d9fb      	bls.n	b4c10 <_ZN17Adafruit_NeoPixel4showEv+0x100>
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b4c18:	6863      	ldr	r3, [r4, #4]
   b4c1a:	eba3 0909 	sub.w	r9, r3, r9
   b4c1e:	4589      	cmp	r9, r1
   b4c20:	f0c0 80e4 	bcc.w	b4dec <_ZN17Adafruit_NeoPixel4showEv+0x2dc>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4c24:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b4c28:	f001 f912 	bl	b5e50 <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   b4c2c:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b4c2e:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b4c32:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   b4c36:	2900      	cmp	r1, #0
   b4c38:	d1ba      	bne.n	b4bb0 <_ZN17Adafruit_NeoPixel4showEv+0xa0>
      uint32_t cyc = 0;
   b4c3a:	460a      	mov	r2, r1
   b4c3c:	e7e8      	b.n	b4c10 <_ZN17Adafruit_NeoPixel4showEv+0x100>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   b4c3e:	6863      	ldr	r3, [r4, #4]
   b4c40:	1a9b      	subs	r3, r3, r2
   b4c42:	2b11      	cmp	r3, #17
   b4c44:	d8cf      	bhi.n	b4be6 <_ZN17Adafruit_NeoPixel4showEv+0xd6>
   b4c46:	6863      	ldr	r3, [r4, #4]
   b4c48:	1a9b      	subs	r3, r3, r2
   b4c4a:	2b11      	cmp	r3, #17
   b4c4c:	d9f7      	bls.n	b4c3e <_ZN17Adafruit_NeoPixel4showEv+0x12e>
   b4c4e:	e7ca      	b.n	b4be6 <_ZN17Adafruit_NeoPixel4showEv+0xd6>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4c50:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4c54:	2b00      	cmp	r3, #0
   b4c56:	f6bf af7c 	bge.w	b4b52 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4c5a:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4c5e:	2b00      	cmp	r3, #0
   b4c60:	f6bf af77 	bge.w	b4b52 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b4c64:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4c68:	2b00      	cmp	r3, #0
   b4c6a:	f6bf af72 	bge.w	b4b52 <_ZN17Adafruit_NeoPixel4showEv+0x42>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b4c6e:	0136      	lsls	r6, r6, #4
   b4c70:	1d33      	adds	r3, r6, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b4c72:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b4c74:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b4c76:	f001 fb27 	bl	b62c8 <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   b4c7a:	2800      	cmp	r0, #0
   b4c7c:	f43f af78 	beq.w	b4b70 <_ZN17Adafruit_NeoPixel4showEv+0x60>
    for(uint16_t n=0; n<numBytes; n++) {
   b4c80:	88ab      	ldrh	r3, [r5, #4]
   b4c82:	2b00      	cmp	r3, #0
   b4c84:	f000 80ed 	beq.w	b4e62 <_ZN17Adafruit_NeoPixel4showEv+0x352>
      uint8_t pix = pixels[n];
   b4c88:	68ea      	ldr	r2, [r5, #12]
   b4c8a:	3b01      	subs	r3, #1
   b4c8c:	fa12 f783 	uxtah	r7, r2, r3
   b4c90:	f102 3eff 	add.w	lr, r2, #4294967295
    uint16_t pos = 0; // bit position
   b4c94:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4c96:	f248 0206 	movw	r2, #32774	; 0x8006
   b4c9a:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   b4c9e:	f81e cf01 	ldrb.w	ip, [lr, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4ca2:	f01c 0f80 	tst.w	ip, #128	; 0x80
   b4ca6:	bf0c      	ite	eq
   b4ca8:	4693      	moveq	fp, r2
   b4caa:	468b      	movne	fp, r1
   b4cac:	f01c 0f40 	tst.w	ip, #64	; 0x40
   b4cb0:	bf0c      	ite	eq
   b4cb2:	4616      	moveq	r6, r2
   b4cb4:	460e      	movne	r6, r1
   b4cb6:	f01c 0f20 	tst.w	ip, #32
   b4cba:	bf0c      	ite	eq
   b4cbc:	4690      	moveq	r8, r2
   b4cbe:	4688      	movne	r8, r1
        pos++;
   b4cc0:	f103 0901 	add.w	r9, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4cc4:	f8cd 8008 	str.w	r8, [sp, #8]
   b4cc8:	9601      	str	r6, [sp, #4]
        pos++;
   b4cca:	f103 0802 	add.w	r8, r3, #2
   b4cce:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4cd2:	9e01      	ldr	r6, [sp, #4]
   b4cd4:	f820 b013 	strh.w	fp, [r0, r3, lsl #1]
        pos++;
   b4cd8:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4cdc:	f820 6019 	strh.w	r6, [r0, r9, lsl #1]
   b4ce0:	9e02      	ldr	r6, [sp, #8]
   b4ce2:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
        pos++;
   b4ce6:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4cea:	f01c 0f10 	tst.w	ip, #16
        pos++;
   b4cee:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4cf2:	bf0c      	ite	eq
   b4cf4:	4693      	moveq	fp, r2
   b4cf6:	468b      	movne	fp, r1
   b4cf8:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4cfc:	f103 0804 	add.w	r8, r3, #4
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4d00:	f01c 0f08 	tst.w	ip, #8
        pos++;
   b4d04:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4d08:	bf0c      	ite	eq
   b4d0a:	4693      	moveq	fp, r2
   b4d0c:	468b      	movne	fp, r1
   b4d0e:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4d12:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4d16:	f01c 0f04 	tst.w	ip, #4
        pos++;
   b4d1a:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4d1e:	bf0c      	ite	eq
   b4d20:	4693      	moveq	fp, r2
   b4d22:	468b      	movne	fp, r1
   b4d24:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4d28:	f103 0a08 	add.w	sl, r3, #8
   b4d2c:	f103 0806 	add.w	r8, r3, #6
   b4d30:	3307      	adds	r3, #7
   b4d32:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4d34:	f01c 0f02 	tst.w	ip, #2
        pos++;
   b4d38:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4d3c:	bf0c      	ite	eq
   b4d3e:	4693      	moveq	fp, r2
   b4d40:	468b      	movne	fp, r1
        pos++;
   b4d42:	f8cd a00c 	str.w	sl, [sp, #12]
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4d46:	f01c 0f01 	tst.w	ip, #1
   b4d4a:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
   b4d4e:	bf15      	itete	ne
   b4d50:	f820 1013 	strhne.w	r1, [r0, r3, lsl #1]
   b4d54:	f820 2013 	strheq.w	r2, [r0, r3, lsl #1]
        pos++;
   b4d58:	fa1f f38a 	uxthne.w	r3, sl
   b4d5c:	f8bd 300c 	ldrheq.w	r3, [sp, #12]
    for(uint16_t n=0; n<numBytes; n++) {
   b4d60:	4577      	cmp	r7, lr
   b4d62:	d19c      	bne.n	b4c9e <_ZN17Adafruit_NeoPixel4showEv+0x18e>
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4d64:	1c59      	adds	r1, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4d66:	3302      	adds	r3, #2
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4d68:	b289      	uxth	r1, r1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4d6a:	b29b      	uxth	r3, r3
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4d6c:	0049      	lsls	r1, r1, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4d6e:	005b      	lsls	r3, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4d70:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   b4d74:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4d76:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4d78:	52c7      	strh	r7, [r0, r3]
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4d7a:	4b2e      	ldr	r3, [pc, #184]	; (b4e34 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4d7c:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4d7e:	681f      	ldr	r7, [r3, #0]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b4d80:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b4d82:	2314      	movs	r3, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b4d84:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   b4d88:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b4d8c:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   b4d90:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   b4d94:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   b4d98:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4d9c:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   b4da0:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   b4da4:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4da8:	79eb      	ldrb	r3, [r5, #7]
   b4daa:	eb07 1c03 	add.w	ip, r7, r3, lsl #4
   b4dae:	011b      	lsls	r3, r3, #4
    pwm->ENABLE = 1;
   b4db0:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4db2:	5cfe      	ldrb	r6, [r7, r3]
   b4db4:	f89c 3001 	ldrb.w	r3, [ip, #1]
   b4db8:	f003 031f 	and.w	r3, r3, #31
   b4dbc:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
   b4dc0:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   b4dc4:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   b4dc8:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   b4dcc:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   b4dce:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   b4dd2:	2b00      	cmp	r3, #0
   b4dd4:	d0fb      	beq.n	b4dce <_ZN17Adafruit_NeoPixel4showEv+0x2be>
    pwm->EVENTS_SEQEND[0] = 0;
   b4dd6:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b4dd8:	f04f 32ff 	mov.w	r2, #4294967295
    pwm->EVENTS_SEQEND[0] = 0;
   b4ddc:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   b4de0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b4de4:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   b4de8:	f001 fa76 	bl	b62d8 <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b4dec:	f001 f838 	bl	b5e60 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   b4df0:	6128      	str	r0, [r5, #16]
}
   b4df2:	b005      	add	sp, #20
   b4df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4df8:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b4dfc:	2b00      	cmp	r3, #0
   b4dfe:	f6bf aeb7 	bge.w	b4b70 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4e02:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4e06:	2b00      	cmp	r3, #0
   b4e08:	f6bf aeb2 	bge.w	b4b70 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4e0c:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4e10:	2b00      	cmp	r3, #0
   b4e12:	f6bf aead 	bge.w	b4b70 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b4e16:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4e1a:	2b00      	cmp	r3, #0
   b4e1c:	f6bf aea8 	bge.w	b4b70 <_ZN17Adafruit_NeoPixel4showEv+0x60>
   b4e20:	e725      	b.n	b4c6e <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b4e22:	bf00      	nop
   b4e24:	000b8924 	.word	0x000b8924
   b4e28:	4001c000 	.word	0x4001c000
   b4e2c:	40021000 	.word	0x40021000
   b4e30:	40022000 	.word	0x40022000
   b4e34:	2003e6b4 	.word	0x2003e6b4
   b4e38:	e0001000 	.word	0xe0001000
   b4e3c:	e000ed00 	.word	0xe000ed00
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4e40:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4e44:	2b00      	cmp	r3, #0
   b4e46:	f6bf ae8d 	bge.w	b4b64 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4e4a:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4e4e:	2b00      	cmp	r3, #0
   b4e50:	f6bf ae88 	bge.w	b4b64 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b4e54:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4e58:	2b00      	cmp	r3, #0
   b4e5a:	f6bf ae83 	bge.w	b4b64 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   b4e5e:	e706      	b.n	b4c6e <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b4e60:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   b4e62:	2304      	movs	r3, #4
   b4e64:	2102      	movs	r1, #2
   b4e66:	e783      	b.n	b4d70 <_ZN17Adafruit_NeoPixel4showEv+0x260>

000b4e68 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   b4e68:	8843      	ldrh	r3, [r0, #2]
   b4e6a:	428b      	cmp	r3, r1
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   b4e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   b4e6e:	d92d      	bls.n	b4ecc <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   b4e70:	7a06      	ldrb	r6, [r0, #8]
   b4e72:	f3c2 4307 	ubfx	r3, r2, #16, #8
   b4e76:	f3c2 2407 	ubfx	r4, r2, #8, #8
   b4e7a:	b2d5      	uxtb	r5, r2
   b4e7c:	b13e      	cbz	r6, b4e8e <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
   b4e7e:	4373      	muls	r3, r6
      g = (g * brightness) >> 8;
   b4e80:	4374      	muls	r4, r6
      b = (b * brightness) >> 8;
   b4e82:	4375      	muls	r5, r6
      r = (r * brightness) >> 8;
   b4e84:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   b4e88:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   b4e8c:	0a2d      	lsrs	r5, r5, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   b4e8e:	f890 c006 	ldrb.w	ip, [r0, #6]
   b4e92:	68c7      	ldr	r7, [r0, #12]
   b4e94:	f1bc 0f06 	cmp.w	ip, #6
   b4e98:	bf0c      	ite	eq
   b4e9a:	2604      	moveq	r6, #4
   b4e9c:	2603      	movne	r6, #3
   b4e9e:	434e      	muls	r6, r1
   b4ea0:	f1ac 0c02 	sub.w	ip, ip, #2
   b4ea4:	19b9      	adds	r1, r7, r6
    switch(type) {
   b4ea6:	f1bc 0f06 	cmp.w	ip, #6
   b4eaa:	d81d      	bhi.n	b4ee8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
   b4eac:	e8df f00c 	tbb	[pc, ip]
   b4eb0:	04081c04 	.word	0x04081c04
   b4eb4:	040f      	.short	0x040f
   b4eb6:	04          	.byte	0x04
   b4eb7:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   b4eb8:	55bc      	strb	r4, [r7, r6]
          *p++ = r;
   b4eba:	704b      	strb	r3, [r1, #1]
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
          *p++ = g;
          *p = b;
   b4ebc:	708d      	strb	r5, [r1, #2]
        } break;
    }
  }
}
   b4ebe:	e005      	b.n	b4ecc <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p++ = r;
   b4ec0:	2bfe      	cmp	r3, #254	; 0xfe
   b4ec2:	bf28      	it	cs
   b4ec4:	23fe      	movcs	r3, #254	; 0xfe
   b4ec6:	55bb      	strb	r3, [r7, r6]
          *p++ = b;
   b4ec8:	704d      	strb	r5, [r1, #1]
          *p = g;
   b4eca:	708c      	strb	r4, [r1, #2]
}
   b4ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
   b4ece:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b4ed0:	704c      	strb	r4, [r1, #1]
          *p++ = b;
   b4ed2:	708d      	strb	r5, [r1, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4ed4:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
   b4ed6:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4ed8:	b913      	cbnz	r3, b4ee0 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
   b4eda:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4edc:	70ca      	strb	r2, [r1, #3]
        } break;
   b4ede:	e7f5      	b.n	b4ecc <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4ee0:	435a      	muls	r2, r3
   b4ee2:	f3c2 2207 	ubfx	r2, r2, #8, #8
   b4ee6:	e7f9      	b.n	b4edc <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
   b4ee8:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b4eea:	704c      	strb	r4, [r1, #1]
   b4eec:	e7e6      	b.n	b4ebc <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x54>

000b4eee <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
   b4eee:	7a03      	ldrb	r3, [r0, #8]
  uint8_t newBrightness = b + 1;
   b4ef0:	1c4a      	adds	r2, r1, #1
   b4ef2:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
   b4ef4:	4293      	cmp	r3, r2
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
   b4ef6:	b570      	push	{r4, r5, r6, lr}
  if(newBrightness != brightness) { // Compare against prior value
   b4ef8:	d01f      	beq.n	b4f3a <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4c>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
   b4efa:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b4efc:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
            *ptr           = pixels,
   b4f00:	68c4      	ldr	r4, [r0, #12]
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b4f02:	d00c      	beq.n	b4f1e <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
   b4f04:	29ff      	cmp	r1, #255	; 0xff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
   b4f06:	bf1f      	itttt	ne
   b4f08:	0211      	lslne	r1, r2, #8
   b4f0a:	f101 31ff 	addne.w	r1, r1, #4294967295
   b4f0e:	fbb1 f3f3 	udivne	r3, r1, r3
   b4f12:	b29b      	uxthne	r3, r3
    else if(b == 255) scale = 65535 / oldBrightness;
   b4f14:	bf04      	itt	eq
   b4f16:	f64f 71ff 	movweq	r1, #65535	; 0xffff
   b4f1a:	fbb1 f3f3 	udiveq	r3, r1, r3
            *ptr           = pixels,
   b4f1e:	4625      	mov	r5, r4
    for(uint16_t i=0; i<numBytes; i++) {
   b4f20:	8886      	ldrh	r6, [r0, #4]
   b4f22:	1b29      	subs	r1, r5, r4
   b4f24:	b289      	uxth	r1, r1
   b4f26:	428e      	cmp	r6, r1
   b4f28:	d906      	bls.n	b4f38 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
   b4f2a:	7829      	ldrb	r1, [r5, #0]
   b4f2c:	4359      	muls	r1, r3
   b4f2e:	f3c1 2107 	ubfx	r1, r1, #8, #8
   b4f32:	f805 1b01 	strb.w	r1, [r5], #1
    for(uint16_t i=0; i<numBytes; i++) {
   b4f36:	e7f3      	b.n	b4f20 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
    }
    brightness = newBrightness;
   b4f38:	7202      	strb	r2, [r0, #8]
  }
}
   b4f3a:	bd70      	pop	{r4, r5, r6, pc}

000b4f3c <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   b4f3c:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b4f3e:	f000 ff3f 	bl	b5dc0 <HAL_Pin_Map>
   b4f42:	4b01      	ldr	r3, [pc, #4]	; (b4f48 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b4f44:	6018      	str	r0, [r3, #0]
}
   b4f46:	bd08      	pop	{r3, pc}
   b4f48:	2003e6b4 	.word	0x2003e6b4

000b4f4c <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b4f4e:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4f50:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b4f54:	2d02      	cmp	r5, #2
   b4f56:	d069      	beq.n	b502c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b4f58:	2d03      	cmp	r5, #3
   b4f5a:	f000 8099 	beq.w	b5090 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b4f5e:	2d01      	cmp	r5, #1
   b4f60:	d16c      	bne.n	b503c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b4f62:	8905      	ldrh	r5, [r0, #8]
   b4f64:	43d2      	mvns	r2, r2
   b4f66:	442a      	add	r2, r5
   b4f68:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b4f6a:	2a00      	cmp	r2, #0
   b4f6c:	db5d      	blt.n	b502a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4f6e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b4f72:	4295      	cmp	r5, r2
   b4f74:	dd59      	ble.n	b502a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b4f76:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b4f78:	bfbe      	ittt	lt
   b4f7a:	185b      	addlt	r3, r3, r1
   b4f7c:	b21b      	sxthlt	r3, r3
    __y = 0;
   b4f7e:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b4f80:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b4f84:	18cd      	adds	r5, r1, r3
   b4f86:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b4f88:	bfc4      	itt	gt
   b4f8a:	1a43      	subgt	r3, r0, r1
   b4f8c:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b4f8e:	2b00      	cmp	r3, #0
   b4f90:	dd4b      	ble.n	b502a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b4f92:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b4f96:	f8df c120 	ldr.w	ip, [pc, #288]	; b50b8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b4f9a:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b4f9e:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b4fa2:	b2db      	uxtb	r3, r3
  pBuf += x;
   b4fa4:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b4fa8:	d01a      	beq.n	b4fe0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b4faa:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b4fae:	4e40      	ldr	r6, [pc, #256]	; (b50b0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b4fb0:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b4fb2:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b4fb4:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b4fb6:	bf3f      	itttt	cc
   b4fb8:	eba5 0e03 	subcc.w	lr, r5, r3
   b4fbc:	26ff      	movcc	r6, #255	; 0xff
   b4fbe:	fa46 f60e 	asrcc.w	r6, r6, lr
   b4fc2:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b4fc4:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b4fc8:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4fca:	bf0c      	ite	eq
   b4fcc:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b4fce:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b4fd0:	42ab      	cmp	r3, r5
   b4fd2:	f80c 6002 	strb.w	r6, [ip, r2]
   b4fd6:	d328      	bcc.n	b502a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b4fd8:	3908      	subs	r1, #8
   b4fda:	440b      	add	r3, r1
   b4fdc:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b4fde:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b4fe0:	2b07      	cmp	r3, #7
   b4fe2:	d919      	bls.n	b5018 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b4fe4:	2c01      	cmp	r4, #1
   b4fe6:	f04f 35ff 	mov.w	r5, #4294967295
   b4fea:	bf18      	it	ne
   b4fec:	2500      	movne	r5, #0
   b4fee:	b2ed      	uxtb	r5, r5
   b4ff0:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b4ff4:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b4ff6:	3a08      	subs	r2, #8
   b4ff8:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b4ffa:	2a07      	cmp	r2, #7
      *pBuf = val;
   b4ffc:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b5000:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b5004:	d8f7      	bhi.n	b4ff6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b5006:	f1a3 0208 	sub.w	r2, r3, #8
   b500a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b500e:	3201      	adds	r2, #1
   b5010:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b5014:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b5018:	b13b      	cbz	r3, b502a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b501a:	4a26      	ldr	r2, [pc, #152]	; (b50b4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b501c:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b501e:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b5020:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b5022:	bf0c      	ite	eq
   b5024:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b5026:	4393      	bicne	r3, r2
   b5028:	7003      	strb	r3, [r0, #0]
}
   b502a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b502c:	8945      	ldrh	r5, [r0, #10]
   b502e:	43d2      	mvns	r2, r2
   b5030:	442a      	add	r2, r5
      x -= (w-1);
   b5032:	18cd      	adds	r5, r1, r3
   b5034:	8901      	ldrh	r1, [r0, #8]
   b5036:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b5038:	b212      	sxth	r2, r2
      x -= (w-1);
   b503a:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b503c:	2a00      	cmp	r2, #0
   b503e:	dbf4      	blt.n	b502a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b5040:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b5044:	4295      	cmp	r5, r2
   b5046:	ddf0      	ble.n	b502a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b5048:	2900      	cmp	r1, #0
    w += x;
   b504a:	bfbe      	ittt	lt
   b504c:	185b      	addlt	r3, r3, r1
   b504e:	b21b      	sxthlt	r3, r3
    x = 0;
   b5050:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b5052:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b5056:	18ce      	adds	r6, r1, r3
   b5058:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b505a:	bfc4      	itt	gt
   b505c:	1a6b      	subgt	r3, r5, r1
   b505e:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b5060:	2b00      	cmp	r3, #0
   b5062:	dde2      	ble.n	b502a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b5064:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b5066:	2580      	movs	r5, #128	; 0x80
   b5068:	fb10 1105 	smlabb	r1, r0, r5, r1
   b506c:	4812      	ldr	r0, [pc, #72]	; (b50b8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b506e:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b5070:	f002 0007 	and.w	r0, r2, #7
   b5074:	2201      	movs	r2, #1
   b5076:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b5078:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b507a:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b507c:	440b      	add	r3, r1
   b507e:	d10c      	bne.n	b509a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b5080:	428b      	cmp	r3, r1
   b5082:	d0d2      	beq.n	b502a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b5084:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5088:	4310      	orrs	r0, r2
   b508a:	f801 0c01 	strb.w	r0, [r1, #-1]
   b508e:	e7f7      	b.n	b5080 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b5090:	18cd      	adds	r5, r1, r3
   b5092:	8941      	ldrh	r1, [r0, #10]
   b5094:	1b49      	subs	r1, r1, r5
   b5096:	b209      	sxth	r1, r1
      break;
   b5098:	e767      	b.n	b4f6a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b509a:	43d2      	mvns	r2, r2
   b509c:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b509e:	428b      	cmp	r3, r1
   b50a0:	d0c3      	beq.n	b502a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b50a2:	f811 0b01 	ldrb.w	r0, [r1], #1
   b50a6:	4010      	ands	r0, r2
   b50a8:	f801 0c01 	strb.w	r0, [r1, #-1]
   b50ac:	e7f7      	b.n	b509e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b50ae:	bf00      	nop
   b50b0:	2003e128 	.word	0x2003e128
   b50b4:	2003e120 	.word	0x2003e120
   b50b8:	2003e130 	.word	0x2003e130

000b50bc <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b50bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b50be:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b50c0:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b50c4:	2d02      	cmp	r5, #2
   b50c6:	d034      	beq.n	b5132 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b50c8:	2d03      	cmp	r5, #3
   b50ca:	f000 809b 	beq.w	b5204 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b50ce:	2d01      	cmp	r5, #1
   b50d0:	d137      	bne.n	b5142 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b50d2:	18d5      	adds	r5, r2, r3
   b50d4:	8902      	ldrh	r2, [r0, #8]
   b50d6:	1b52      	subs	r2, r2, r5
   b50d8:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b50da:	2900      	cmp	r1, #0
   b50dc:	f2c0 8091 	blt.w	b5202 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b50e0:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b50e4:	428d      	cmp	r5, r1
   b50e6:	f340 808c 	ble.w	b5202 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b50ea:	2a00      	cmp	r2, #0
    w += x;
   b50ec:	bfbe      	ittt	lt
   b50ee:	189b      	addlt	r3, r3, r2
   b50f0:	b21b      	sxthlt	r3, r3
    x = 0;
   b50f2:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b50f4:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b50f8:	18d6      	adds	r6, r2, r3
   b50fa:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b50fc:	bfc4      	itt	gt
   b50fe:	1aab      	subgt	r3, r5, r2
   b5100:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b5102:	2b00      	cmp	r3, #0
   b5104:	dd7d      	ble.n	b5202 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b5106:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b5108:	2580      	movs	r5, #128	; 0x80
   b510a:	fb10 2205 	smlabb	r2, r0, r5, r2
   b510e:	4845      	ldr	r0, [pc, #276]	; (b5224 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b5110:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b5112:	f001 0007 	and.w	r0, r1, #7
   b5116:	2101      	movs	r1, #1
   b5118:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b511a:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b511c:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b511e:	4413      	add	r3, r2
   b5120:	d175      	bne.n	b520e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b5122:	429a      	cmp	r2, r3
   b5124:	d06d      	beq.n	b5202 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5126:	f812 0b01 	ldrb.w	r0, [r2], #1
   b512a:	4308      	orrs	r0, r1
   b512c:	f802 0c01 	strb.w	r0, [r2, #-1]
   b5130:	e7f7      	b.n	b5122 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b5132:	8905      	ldrh	r5, [r0, #8]
   b5134:	43c9      	mvns	r1, r1
   b5136:	4429      	add	r1, r5
      y -= (h-1);
   b5138:	18d5      	adds	r5, r2, r3
   b513a:	8942      	ldrh	r2, [r0, #10]
   b513c:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b513e:	b209      	sxth	r1, r1
      y -= (h-1);
   b5140:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b5142:	2900      	cmp	r1, #0
   b5144:	db5d      	blt.n	b5202 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5146:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b514a:	428d      	cmp	r5, r1
   b514c:	dd59      	ble.n	b5202 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b514e:	2a00      	cmp	r2, #0
    __h += __y;
   b5150:	bfbe      	ittt	lt
   b5152:	189b      	addlt	r3, r3, r2
   b5154:	b21b      	sxthlt	r3, r3
    __y = 0;
   b5156:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b5158:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b515c:	18d5      	adds	r5, r2, r3
   b515e:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b5160:	bfc4      	itt	gt
   b5162:	1a83      	subgt	r3, r0, r2
   b5164:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b5166:	2b00      	cmp	r3, #0
   b5168:	dd4b      	ble.n	b5202 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b516a:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b516e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b5224 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b5172:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b5176:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b517a:	b2db      	uxtb	r3, r3
  pBuf += x;
   b517c:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b5180:	d01a      	beq.n	b51b8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b5182:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b5186:	4e28      	ldr	r6, [pc, #160]	; (b5228 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b5188:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b518a:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b518c:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b518e:	bf3f      	itttt	cc
   b5190:	eba5 0e03 	subcc.w	lr, r5, r3
   b5194:	26ff      	movcc	r6, #255	; 0xff
   b5196:	fa46 f60e 	asrcc.w	r6, r6, lr
   b519a:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b519c:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b51a0:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b51a2:	bf0c      	ite	eq
   b51a4:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b51a6:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b51a8:	42ab      	cmp	r3, r5
   b51aa:	f80c 6001 	strb.w	r6, [ip, r1]
   b51ae:	d328      	bcc.n	b5202 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b51b0:	3a08      	subs	r2, #8
   b51b2:	4413      	add	r3, r2
   b51b4:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b51b6:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b51b8:	2b07      	cmp	r3, #7
   b51ba:	d919      	bls.n	b51f0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b51bc:	2c01      	cmp	r4, #1
   b51be:	f04f 35ff 	mov.w	r5, #4294967295
   b51c2:	bf18      	it	ne
   b51c4:	2500      	movne	r5, #0
   b51c6:	b2ed      	uxtb	r5, r5
   b51c8:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b51cc:	461a      	mov	r2, r3
      h -= 8;
   b51ce:	3a08      	subs	r2, #8
   b51d0:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b51d2:	2a07      	cmp	r2, #7
      *pBuf = val;
   b51d4:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b51d8:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b51dc:	d8f7      	bhi.n	b51ce <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b51de:	f1a3 0208 	sub.w	r2, r3, #8
   b51e2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b51e6:	3201      	adds	r2, #1
   b51e8:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b51ec:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b51f0:	b13b      	cbz	r3, b5202 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b51f2:	4a0e      	ldr	r2, [pc, #56]	; (b522c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b51f4:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b51f6:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b51f8:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b51fa:	bf0c      	ite	eq
   b51fc:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b51fe:	4393      	bicne	r3, r2
   b5200:	7003      	strb	r3, [r0, #0]
}
   b5202:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b5204:	8945      	ldrh	r5, [r0, #10]
   b5206:	43c9      	mvns	r1, r1
   b5208:	4429      	add	r1, r5
   b520a:	b209      	sxth	r1, r1
      break;
   b520c:	e765      	b.n	b50da <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b520e:	43c9      	mvns	r1, r1
   b5210:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b5212:	429a      	cmp	r2, r3
   b5214:	d0f5      	beq.n	b5202 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5216:	f812 0b01 	ldrb.w	r0, [r2], #1
   b521a:	4008      	ands	r0, r1
   b521c:	f802 0c01 	strb.w	r0, [r2, #-1]
   b5220:	e7f7      	b.n	b5212 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b5222:	bf00      	nop
   b5224:	2003e130 	.word	0x2003e130
   b5228:	2003e128 	.word	0x2003e128
   b522c:	2003e120 	.word	0x2003e120

000b5230 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b5230:	4770      	bx	lr
	...

000b5234 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b5236:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5238:	4606      	mov	r6, r0
   b523a:	4614      	mov	r4, r2
   b523c:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b523e:	db2d      	blt.n	b529c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b5240:	f000 fbdd 	bl	b59fe <_ZN12Adafruit_GFX5widthEv>
   b5244:	42a8      	cmp	r0, r5
   b5246:	dd29      	ble.n	b529c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b5248:	2c00      	cmp	r4, #0
   b524a:	db27      	blt.n	b529c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b524c:	4630      	mov	r0, r6
   b524e:	f000 fbd9 	bl	b5a04 <_ZN12Adafruit_GFX6heightEv>
   b5252:	42a0      	cmp	r0, r4
   b5254:	dd22      	ble.n	b529c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b5256:	4630      	mov	r0, r6
   b5258:	f000 fbc1 	bl	b59de <_ZN12Adafruit_GFX11getRotationEv>
   b525c:	2802      	cmp	r0, #2
   b525e:	d01e      	beq.n	b529e <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b5260:	2803      	cmp	r0, #3
   b5262:	d025      	beq.n	b52b0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b5264:	2801      	cmp	r0, #1
   b5266:	d104      	bne.n	b5272 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b5268:	8933      	ldrh	r3, [r6, #8]
   b526a:	43e2      	mvns	r2, r4
   b526c:	441a      	add	r2, r3
    break;
   b526e:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b5270:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b5272:	2c00      	cmp	r4, #0
   b5274:	4622      	mov	r2, r4
   b5276:	bfb8      	it	lt
   b5278:	1de2      	addlt	r2, r4, #7
   b527a:	10d2      	asrs	r2, r2, #3
   b527c:	2180      	movs	r1, #128	; 0x80
   b527e:	fb12 5501 	smlabb	r5, r2, r1, r5
   b5282:	490e      	ldr	r1, [pc, #56]	; (b52bc <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b5284:	2201      	movs	r2, #1
   b5286:	f004 0407 	and.w	r4, r4, #7
   b528a:	574b      	ldrsb	r3, [r1, r5]
   b528c:	fa02 f404 	lsl.w	r4, r2, r4
   b5290:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b5292:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b5294:	bf0c      	ite	eq
   b5296:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b5298:	43a3      	bicne	r3, r4
   b529a:	554b      	strb	r3, [r1, r5]
}
   b529c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b529e:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b52a0:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b52a2:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b52a4:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b52a6:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b52a8:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b52aa:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b52ac:	b224      	sxth	r4, r4
    break;
   b52ae:	e7e0      	b.n	b5272 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b52b0:	8973      	ldrh	r3, [r6, #10]
   b52b2:	3b01      	subs	r3, #1
   b52b4:	1b5b      	subs	r3, r3, r5
    break;
   b52b6:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b52b8:	b21c      	sxth	r4, r3
    break;
   b52ba:	e7da      	b.n	b5272 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b52bc:	2003e130 	.word	0x2003e130

000b52c0 <_ZN16Adafruit_SSD1306D0Ev>:
   b52c0:	b510      	push	{r4, lr}
   b52c2:	2124      	movs	r1, #36	; 0x24
   b52c4:	4604      	mov	r4, r0
   b52c6:	f7fe feea 	bl	b409e <_ZdlPvj>
   b52ca:	4620      	mov	r0, r4
   b52cc:	bd10      	pop	{r4, pc}
	...

000b52d0 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b52d0:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b52d2:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b52d4:	4604      	mov	r4, r0
   b52d6:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b52d8:	2180      	movs	r1, #128	; 0x80
   b52da:	f000 faa7 	bl	b582c <_ZN12Adafruit_GFXC1Ess>
   b52de:	4b06      	ldr	r3, [pc, #24]	; (b52f8 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b52e0:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b52e2:	23ff      	movs	r3, #255	; 0xff
   b52e4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b52e8:	7763      	strb	r3, [r4, #29]
   b52ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b52ee:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b52f0:	f884 5020 	strb.w	r5, [r4, #32]
}
   b52f4:	4620      	mov	r0, r4
   b52f6:	bd38      	pop	{r3, r4, r5, pc}
   b52f8:	000b8940 	.word	0x000b8940

000b52fc <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b52fc:	4802      	ldr	r0, [pc, #8]	; (b5308 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b52fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b5302:	2100      	movs	r1, #0
   b5304:	f002 bff2 	b.w	b82ec <memset>
   b5308:	2003e130 	.word	0x2003e130

000b530c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b530c:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b530e:	4c0b      	ldr	r4, [pc, #44]	; (b533c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b5310:	7821      	ldrb	r1, [r4, #0]
   b5312:	f3bf 8f5b 	dmb	ish
   b5316:	f011 0101 	ands.w	r1, r1, #1
   b531a:	d10b      	bne.n	b5334 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b531c:	4620      	mov	r0, r4
   b531e:	9101      	str	r1, [sp, #4]
   b5320:	f7fe fecc 	bl	b40bc <__cxa_guard_acquire>
   b5324:	9901      	ldr	r1, [sp, #4]
   b5326:	b128      	cbz	r0, b5334 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5328:	4805      	ldr	r0, [pc, #20]	; (b5340 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b532a:	f001 f849 	bl	b63c0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b532e:	4620      	mov	r0, r4
   b5330:	f7fe fec9 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   b5334:	4802      	ldr	r0, [pc, #8]	; (b5340 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5336:	b002      	add	sp, #8
   b5338:	bd10      	pop	{r4, pc}
   b533a:	bf00      	nop
   b533c:	2003e6b8 	.word	0x2003e6b8
   b5340:	2003e6bc 	.word	0x2003e6bc

000b5344 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b5344:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b5346:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b534a:	b143      	cbz	r3, b535e <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b534c:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b534e:	f7ff ffdd 	bl	b530c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5352:	9901      	ldr	r1, [sp, #4]
}
   b5354:	b003      	add	sp, #12
   b5356:	f85d eb04 	ldr.w	lr, [sp], #4
   b535a:	f001 b8e5 	b.w	b6528 <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b535e:	460b      	mov	r3, r1
   b5360:	7f81      	ldrb	r1, [r0, #30]
   b5362:	7f40      	ldrb	r0, [r0, #29]
   b5364:	2201      	movs	r2, #1
}
   b5366:	b003      	add	sp, #12
   b5368:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b536c:	f002 b9fe 	b.w	b776c <shiftOut>

000b5370 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b5370:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b5372:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b5376:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b5378:	4604      	mov	r4, r0
   b537a:	460d      	mov	r5, r1
  if (sid != -1)
   b537c:	d01d      	beq.n	b53ba <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b537e:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b5382:	2101      	movs	r1, #1
   b5384:	b280      	uxth	r0, r0
   b5386:	f002 f9ae 	bl	b76e6 <digitalWrite>
    digitalWrite(dc, LOW);
   b538a:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b538e:	2100      	movs	r1, #0
   b5390:	b280      	uxth	r0, r0
   b5392:	f002 f9a8 	bl	b76e6 <digitalWrite>
    digitalWrite(cs, LOW);
   b5396:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b539a:	2100      	movs	r1, #0
   b539c:	b280      	uxth	r0, r0
   b539e:	f002 f9a2 	bl	b76e6 <digitalWrite>
    fastSPIwrite(c);
   b53a2:	4629      	mov	r1, r5
   b53a4:	4620      	mov	r0, r4
   b53a6:	f7ff ffcd 	bl	b5344 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b53aa:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b53ae:	2101      	movs	r1, #1
}
   b53b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b53b4:	b280      	uxth	r0, r0
   b53b6:	f002 b996 	b.w	b76e6 <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b53ba:	f002 fa55 	bl	b7868 <_Z19__fetch_global_Wirev>
   b53be:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b53c2:	f001 fd7b 	bl	b6ebc <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b53c6:	f002 fa4f 	bl	b7868 <_Z19__fetch_global_Wirev>
   b53ca:	6803      	ldr	r3, [r0, #0]
   b53cc:	2100      	movs	r1, #0
   b53ce:	689b      	ldr	r3, [r3, #8]
   b53d0:	4798      	blx	r3
    Wire.write(c);
   b53d2:	f002 fa49 	bl	b7868 <_Z19__fetch_global_Wirev>
   b53d6:	6803      	ldr	r3, [r0, #0]
   b53d8:	4629      	mov	r1, r5
   b53da:	689b      	ldr	r3, [r3, #8]
   b53dc:	4798      	blx	r3
    Wire.endTransmission();
   b53de:	f002 fa43 	bl	b7868 <_Z19__fetch_global_Wirev>
}
   b53e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b53e6:	f001 bd70 	b.w	b6eca <_ZN7TwoWire15endTransmissionEv>
	...

000b53ec <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b53ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   b53ee:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   b53f0:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   b53f2:	f7ff ffbd 	bl	b5370 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   b53f6:	2100      	movs	r1, #0
   b53f8:	4620      	mov	r0, r4
   b53fa:	f7ff ffb9 	bl	b5370 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   b53fe:	217f      	movs	r1, #127	; 0x7f
   b5400:	4620      	mov	r0, r4
   b5402:	f7ff ffb5 	bl	b5370 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   b5406:	2122      	movs	r1, #34	; 0x22
   b5408:	4620      	mov	r0, r4
   b540a:	f7ff ffb1 	bl	b5370 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   b540e:	2100      	movs	r1, #0
   b5410:	4620      	mov	r0, r4
   b5412:	f7ff ffad 	bl	b5370 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   b5416:	2107      	movs	r1, #7
   b5418:	4620      	mov	r0, r4
   b541a:	f7ff ffa9 	bl	b5370 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   b541e:	f994 301d 	ldrsb.w	r3, [r4, #29]
   b5422:	4f29      	ldr	r7, [pc, #164]	; (b54c8 <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   b5424:	3301      	adds	r3, #1
   b5426:	d02a      	beq.n	b547e <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   b5428:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b542c:	2101      	movs	r1, #1
   b542e:	b280      	uxth	r0, r0
   b5430:	f002 f959 	bl	b76e6 <digitalWrite>
    digitalWrite(dc, HIGH);
   b5434:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b5438:	2101      	movs	r1, #1
   b543a:	b280      	uxth	r0, r0
   b543c:	f002 f953 	bl	b76e6 <digitalWrite>
    digitalWrite(cs, LOW);
   b5440:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5444:	2100      	movs	r1, #0
   b5446:	b280      	uxth	r0, r0
   b5448:	f002 f94d 	bl	b76e6 <digitalWrite>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b544c:	2001      	movs	r0, #1
   b544e:	f000 fcff 	bl	b5e50 <HAL_Delay_Microseconds>
   b5452:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5456:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
   b5458:	f817 1b01 	ldrb.w	r1, [r7], #1
   b545c:	4620      	mov	r0, r4
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b545e:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
   b5460:	f7ff ff70 	bl	b5344 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5464:	2d00      	cmp	r5, #0
   b5466:	d1f6      	bne.n	b5456 <_ZN16Adafruit_SSD13067displayEv+0x6a>
   b5468:	2001      	movs	r0, #1
   b546a:	f000 fcf1 	bl	b5e50 <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   b546e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5472:	2101      	movs	r1, #1
}
   b5474:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   b5478:	b280      	uxth	r0, r0
   b547a:	f002 b934 	b.w	b76e6 <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b547e:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
   b5480:	f002 f9f2 	bl	b7868 <_Z19__fetch_global_Wirev>
   b5484:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b5488:	f001 fd18 	bl	b6ebc <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   b548c:	f002 f9ec 	bl	b7868 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b5490:	6803      	ldr	r3, [r0, #0]
   b5492:	2140      	movs	r1, #64	; 0x40
   b5494:	689b      	ldr	r3, [r3, #8]
   b5496:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   b5498:	f105 0610 	add.w	r6, r5, #16
   b549c:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
   b549e:	f002 f9e3 	bl	b7868 <_Z19__fetch_global_Wirev>
   b54a2:	6803      	ldr	r3, [r0, #0]
   b54a4:	5d79      	ldrb	r1, [r7, r5]
   b54a6:	689b      	ldr	r3, [r3, #8]
   b54a8:	4798      	blx	r3
		i++;
   b54aa:	1c6b      	adds	r3, r5, #1
   b54ac:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
   b54ae:	42ae      	cmp	r6, r5
   b54b0:	d1f5      	bne.n	b549e <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   b54b2:	f002 f9d9 	bl	b7868 <_Z19__fetch_global_Wirev>
   b54b6:	f001 fd08 	bl	b6eca <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b54ba:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b54be:	d100      	bne.n	b54c2 <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
   b54c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b54c2:	4635      	mov	r5, r6
   b54c4:	e7dc      	b.n	b5480 <_ZN16Adafruit_SSD13067displayEv+0x94>
   b54c6:	bf00      	nop
   b54c8:	2003e130 	.word	0x2003e130

000b54cc <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b54cc:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b54ce:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b54d2:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b54d4:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b54d6:	4604      	mov	r4, r0
   b54d8:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b54da:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b54dc:	f000 80c9 	beq.w	b5672 <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b54e0:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b54e4:	2101      	movs	r1, #1
   b54e6:	b280      	uxth	r0, r0
   b54e8:	f002 f8ec 	bl	b76c4 <pinMode>
    pinMode(cs, OUTPUT);
   b54ec:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b54f0:	2101      	movs	r1, #1
   b54f2:	b280      	uxth	r0, r0
   b54f4:	f002 f8e6 	bl	b76c4 <pinMode>
    if (!hwSPI){
   b54f8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b54fc:	2b00      	cmp	r3, #0
   b54fe:	f000 80a6 	beq.w	b564e <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b5502:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5506:	2101      	movs	r1, #1
   b5508:	b280      	uxth	r0, r0
   b550a:	f002 f8ec 	bl	b76e6 <digitalWrite>
        instance().setBitOrder(order);
   b550e:	f7ff fefd 	bl	b530c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5512:	2101      	movs	r1, #1
   b5514:	f000 ff72 	bl	b63fc <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b5518:	f7ff fef8 	bl	b530c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b551c:	2110      	movs	r1, #16
   b551e:	f000 ffdd 	bl	b64dc <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b5522:	f7ff fef3 	bl	b530c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5526:	2100      	movs	r1, #0
   b5528:	f000 ff7c 	bl	b6424 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b552c:	f7ff feee 	bl	b530c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5530:	f000 ff50 	bl	b63d4 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b5534:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5538:	2101      	movs	r1, #1
   b553a:	b280      	uxth	r0, r0
   b553c:	f002 f8c2 	bl	b76c4 <pinMode>
  digitalWrite(rst, HIGH);
   b5540:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5544:	2101      	movs	r1, #1
   b5546:	b280      	uxth	r0, r0
   b5548:	f002 f8cd 	bl	b76e6 <digitalWrite>
  delay(1);
   b554c:	2001      	movs	r0, #1
   b554e:	f001 fa27 	bl	b69a0 <delay>
  digitalWrite(rst, LOW);
   b5552:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5556:	2100      	movs	r1, #0
   b5558:	b280      	uxth	r0, r0
   b555a:	f002 f8c4 	bl	b76e6 <digitalWrite>
  delay(10);
   b555e:	200a      	movs	r0, #10
   b5560:	f001 fa1e 	bl	b69a0 <delay>
  digitalWrite(rst, HIGH);
   b5564:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5568:	2101      	movs	r1, #1
   b556a:	b280      	uxth	r0, r0
   b556c:	f002 f8bb 	bl	b76e6 <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b5570:	4620      	mov	r0, r4
   b5572:	21ae      	movs	r1, #174	; 0xae
   b5574:	f7ff fefc 	bl	b5370 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b5578:	4620      	mov	r0, r4
   b557a:	21d5      	movs	r1, #213	; 0xd5
   b557c:	f7ff fef8 	bl	b5370 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b5580:	4620      	mov	r0, r4
   b5582:	2180      	movs	r1, #128	; 0x80
   b5584:	f7ff fef4 	bl	b5370 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b5588:	4620      	mov	r0, r4
   b558a:	21a8      	movs	r1, #168	; 0xa8
   b558c:	f7ff fef0 	bl	b5370 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b5590:	4620      	mov	r0, r4
   b5592:	213f      	movs	r1, #63	; 0x3f
   b5594:	f7ff feec 	bl	b5370 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b5598:	4620      	mov	r0, r4
   b559a:	21d3      	movs	r1, #211	; 0xd3
   b559c:	f7ff fee8 	bl	b5370 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b55a0:	4620      	mov	r0, r4
   b55a2:	2100      	movs	r1, #0
   b55a4:	f7ff fee4 	bl	b5370 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b55a8:	4620      	mov	r0, r4
   b55aa:	2140      	movs	r1, #64	; 0x40
   b55ac:	f7ff fee0 	bl	b5370 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b55b0:	218d      	movs	r1, #141	; 0x8d
   b55b2:	4620      	mov	r0, r4
   b55b4:	f7ff fedc 	bl	b5370 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b55b8:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b55ba:	bf0c      	ite	eq
   b55bc:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b55be:	2114      	movne	r1, #20
   b55c0:	4620      	mov	r0, r4
   b55c2:	f7ff fed5 	bl	b5370 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b55c6:	4620      	mov	r0, r4
   b55c8:	2120      	movs	r1, #32
   b55ca:	f7ff fed1 	bl	b5370 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b55ce:	4620      	mov	r0, r4
   b55d0:	2100      	movs	r1, #0
   b55d2:	f7ff fecd 	bl	b5370 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b55d6:	4620      	mov	r0, r4
   b55d8:	21a1      	movs	r1, #161	; 0xa1
   b55da:	f7ff fec9 	bl	b5370 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b55de:	4620      	mov	r0, r4
   b55e0:	21c8      	movs	r1, #200	; 0xc8
   b55e2:	f7ff fec5 	bl	b5370 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b55e6:	4620      	mov	r0, r4
   b55e8:	21da      	movs	r1, #218	; 0xda
   b55ea:	f7ff fec1 	bl	b5370 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b55ee:	4620      	mov	r0, r4
   b55f0:	2112      	movs	r1, #18
   b55f2:	f7ff febd 	bl	b5370 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b55f6:	2181      	movs	r1, #129	; 0x81
   b55f8:	4620      	mov	r0, r4
   b55fa:	f7ff feb9 	bl	b5370 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b55fe:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b5600:	bf0c      	ite	eq
   b5602:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b5604:	21cf      	movne	r1, #207	; 0xcf
   b5606:	4620      	mov	r0, r4
   b5608:	f7ff feb2 	bl	b5370 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b560c:	21d9      	movs	r1, #217	; 0xd9
   b560e:	4620      	mov	r0, r4
   b5610:	f7ff feae 	bl	b5370 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5614:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b5616:	bf0c      	ite	eq
   b5618:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b561a:	21f1      	movne	r1, #241	; 0xf1
   b561c:	4620      	mov	r0, r4
   b561e:	f7ff fea7 	bl	b5370 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b5622:	4620      	mov	r0, r4
   b5624:	21db      	movs	r1, #219	; 0xdb
   b5626:	f7ff fea3 	bl	b5370 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b562a:	4620      	mov	r0, r4
   b562c:	2140      	movs	r1, #64	; 0x40
   b562e:	f7ff fe9f 	bl	b5370 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b5632:	4620      	mov	r0, r4
   b5634:	21a4      	movs	r1, #164	; 0xa4
   b5636:	f7ff fe9b 	bl	b5370 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b563a:	4620      	mov	r0, r4
   b563c:	21a6      	movs	r1, #166	; 0xa6
   b563e:	f7ff fe97 	bl	b5370 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b5642:	4620      	mov	r0, r4
   b5644:	21af      	movs	r1, #175	; 0xaf
}
   b5646:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b564a:	f7ff be91 	b.w	b5370 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b564e:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5652:	2101      	movs	r1, #1
   b5654:	b280      	uxth	r0, r0
   b5656:	f002 f835 	bl	b76c4 <pinMode>
    	pinMode(sclk, OUTPUT);
   b565a:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b565e:	2101      	movs	r1, #1
   b5660:	b280      	uxth	r0, r0
   b5662:	f002 f82f 	bl	b76c4 <pinMode>
    if (hwSPI){
   b5666:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b566a:	2b00      	cmp	r3, #0
   b566c:	f43f af62 	beq.w	b5534 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b5670:	e747      	b.n	b5502 <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b5672:	f002 f8f9 	bl	b7868 <_Z19__fetch_global_Wirev>
   b5676:	f001 fbeb 	bl	b6e50 <_ZN7TwoWire5beginEv>
   b567a:	e75b      	b.n	b5534 <_ZN16Adafruit_SSD13065beginEhh+0x68>

000b567c <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b567c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5680:	b085      	sub	sp, #20
   b5682:	461f      	mov	r7, r3
   b5684:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b5688:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b568c:	eba8 0902 	sub.w	r9, r8, r2
   b5690:	eba7 0a01 	sub.w	sl, r7, r1
   b5694:	f1b9 0f00 	cmp.w	r9, #0
   b5698:	bfb8      	it	lt
   b569a:	f1c9 0900 	rsblt	r9, r9, #0
   b569e:	f1ba 0f00 	cmp.w	sl, #0
   b56a2:	bfb8      	it	lt
   b56a4:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b56a8:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b56aa:	4683      	mov	fp, r0
   b56ac:	460c      	mov	r4, r1
   b56ae:	4615      	mov	r5, r2
  if (steep) {
   b56b0:	dd04      	ble.n	b56bc <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b56b2:	463a      	mov	r2, r7
    swap(x0, y0);
   b56b4:	462c      	mov	r4, r5
    swap(x1, y1);
   b56b6:	4647      	mov	r7, r8
    swap(x0, y0);
   b56b8:	460d      	mov	r5, r1
    swap(x1, y1);
   b56ba:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b56bc:	42bc      	cmp	r4, r7
   b56be:	dd05      	ble.n	b56cc <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b56c0:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b56c2:	4645      	mov	r5, r8
   b56c4:	4690      	mov	r8, r2
  if (x0 > x1) {
   b56c6:	4622      	mov	r2, r4
   b56c8:	463c      	mov	r4, r7
   b56ca:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b56cc:	1b3e      	subs	r6, r7, r4
   b56ce:	b2b2      	uxth	r2, r6
   b56d0:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b56d2:	eba8 0205 	sub.w	r2, r8, r5
   b56d6:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b56da:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b56de:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b56e2:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b56e6:	4545      	cmp	r5, r8
   b56e8:	bfb4      	ite	lt
   b56ea:	2201      	movlt	r2, #1
   b56ec:	f04f 32ff 	movge.w	r2, #4294967295
  dy = abs(y1 - y0);
   b56f0:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b56f2:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b56f4:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b56f6:	42bc      	cmp	r4, r7
   b56f8:	dc1c      	bgt.n	b5734 <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b56fa:	f8db 2000 	ldr.w	r2, [fp]
   b56fe:	9303      	str	r3, [sp, #12]
    if (steep) {
   b5700:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b5702:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b5706:	bfc7      	ittee	gt
   b5708:	4629      	movgt	r1, r5
   b570a:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b570c:	462a      	movle	r2, r5
   b570e:	4621      	movle	r1, r4
   b5710:	4658      	mov	r0, fp
   b5712:	47c0      	blx	r8
    }
    err -= dy;
   b5714:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b5716:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b5718:	1ab6      	subs	r6, r6, r2
   b571a:	b2b1      	uxth	r1, r6
   b571c:	b236      	sxth	r6, r6
    if (err < 0) {
   b571e:	2e00      	cmp	r6, #0
   b5720:	da05      	bge.n	b572e <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b5722:	9a02      	ldr	r2, [sp, #8]
   b5724:	4415      	add	r5, r2
      err += dx;
   b5726:	9a00      	ldr	r2, [sp, #0]
   b5728:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b572a:	b22d      	sxth	r5, r5
      err += dx;
   b572c:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b572e:	3401      	adds	r4, #1
   b5730:	b224      	sxth	r4, r4
   b5732:	e7e0      	b.n	b56f6 <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b5734:	b005      	add	sp, #20
   b5736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b573a <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b573a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b573e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b5742:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b5744:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b5748:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b574c:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b574e:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b5750:	4616      	mov	r6, r2
   b5752:	468a      	mov	sl, r1
   b5754:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b5756:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b5758:	6823      	ldr	r3, [r4, #0]
   b575a:	f8cd 8000 	str.w	r8, [sp]
   b575e:	f109 32ff 	add.w	r2, r9, #4294967295
   b5762:	4432      	add	r2, r6
   b5764:	69df      	ldr	r7, [r3, #28]
   b5766:	4651      	mov	r1, sl
   b5768:	462b      	mov	r3, r5
   b576a:	4620      	mov	r0, r4
   b576c:	b212      	sxth	r2, r2
   b576e:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b5770:	6823      	ldr	r3, [r4, #0]
   b5772:	f8cd 8000 	str.w	r8, [sp]
   b5776:	699f      	ldr	r7, [r3, #24]
   b5778:	4632      	mov	r2, r6
   b577a:	464b      	mov	r3, r9
   b577c:	4651      	mov	r1, sl
   b577e:	4620      	mov	r0, r4
   b5780:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b5782:	1e6b      	subs	r3, r5, #1
   b5784:	eb03 010a 	add.w	r1, r3, sl
   b5788:	6823      	ldr	r3, [r4, #0]
   b578a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b578e:	699d      	ldr	r5, [r3, #24]
   b5790:	4632      	mov	r2, r6
   b5792:	464b      	mov	r3, r9
   b5794:	b209      	sxth	r1, r1
   b5796:	4620      	mov	r0, r4
   b5798:	46ac      	mov	ip, r5
}
   b579a:	b002      	add	sp, #8
   b579c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b57a0:	4760      	bx	ip

000b57a2 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b57a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b57a4:	3b01      	subs	r3, #1
   b57a6:	4413      	add	r3, r2
   b57a8:	6804      	ldr	r4, [r0, #0]
   b57aa:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b57ae:	9501      	str	r5, [sp, #4]
   b57b0:	b21b      	sxth	r3, r3
   b57b2:	9300      	str	r3, [sp, #0]
   b57b4:	6964      	ldr	r4, [r4, #20]
   b57b6:	460b      	mov	r3, r1
   b57b8:	47a0      	blx	r4
}
   b57ba:	b003      	add	sp, #12
   b57bc:	bd30      	pop	{r4, r5, pc}

000b57be <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b57be:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b57c0:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b57c4:	6804      	ldr	r4, [r0, #0]
   b57c6:	e9cd 2500 	strd	r2, r5, [sp]
   b57ca:	3b01      	subs	r3, #1
   b57cc:	440b      	add	r3, r1
   b57ce:	6964      	ldr	r4, [r4, #20]
   b57d0:	b21b      	sxth	r3, r3
   b57d2:	47a0      	blx	r4
}
   b57d4:	b003      	add	sp, #12
   b57d6:	bd30      	pop	{r4, r5, pc}

000b57d8 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b57d8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b57dc:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b57e0:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b57e4:	4605      	mov	r5, r0
   b57e6:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b57e8:	460c      	mov	r4, r1
   b57ea:	18ce      	adds	r6, r1, r3
   b57ec:	42b4      	cmp	r4, r6
   b57ee:	da0b      	bge.n	b5808 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b57f0:	682b      	ldr	r3, [r5, #0]
   b57f2:	f8cd 8000 	str.w	r8, [sp]
   b57f6:	699f      	ldr	r7, [r3, #24]
   b57f8:	4621      	mov	r1, r4
   b57fa:	464b      	mov	r3, r9
   b57fc:	4652      	mov	r2, sl
   b57fe:	4628      	mov	r0, r5
   b5800:	3401      	adds	r4, #1
   b5802:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b5804:	b224      	sxth	r4, r4
   b5806:	e7f1      	b.n	b57ec <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b5808:	b002      	add	sp, #8
   b580a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b580e <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b580e:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b5810:	6802      	ldr	r2, [r0, #0]
   b5812:	9101      	str	r1, [sp, #4]
   b5814:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b5818:	9100      	str	r1, [sp, #0]
   b581a:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b581c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5820:	2200      	movs	r2, #0
   b5822:	4611      	mov	r1, r2
   b5824:	47a0      	blx	r4
}
   b5826:	b002      	add	sp, #8
   b5828:	bd10      	pop	{r4, pc}

000b582a <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b582a:	4770      	bx	lr

000b582c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b582c:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b582e:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b5830:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b5832:	f04f 32ff 	mov.w	r2, #4294967295
    Print() : write_error(0) {}
   b5836:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b5838:	4d05      	ldr	r5, [pc, #20]	; (b5850 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b583a:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b583c:	2201      	movs	r2, #1
   b583e:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b5840:	6005      	str	r5, [r0, #0]
   b5842:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b5844:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b5846:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b5848:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b584a:	7682      	strb	r2, [r0, #26]
}
   b584c:	bd30      	pop	{r4, r5, pc}
   b584e:	bf00      	nop
   b5850:	000b8e74 	.word	0x000b8e74

000b5854 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b5854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5858:	ed2d 8b02 	vpush	{d8}
   b585c:	b08d      	sub	sp, #52	; 0x34
   b585e:	4607      	mov	r7, r0
   b5860:	9104      	str	r1, [sp, #16]
   b5862:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b5866:	9105      	str	r1, [sp, #20]
   b5868:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b586c:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b586e:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b5872:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b5874:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b5878:	4281      	cmp	r1, r0
   b587a:	dd52      	ble.n	b5922 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b587c:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b5880:	4291      	cmp	r1, r2
   b5882:	dd4e      	ble.n	b5922 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b5884:	2106      	movs	r1, #6
   b5886:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b588a:	2c00      	cmp	r4, #0
   b588c:	dd49      	ble.n	b5922 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b588e:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b5892:	2c00      	cmp	r4, #0
   b5894:	dd45      	ble.n	b5922 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b5896:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b589a:	930b      	str	r3, [sp, #44]	; 0x2c
   b589c:	b293      	uxth	r3, r2
   b589e:	9307      	str	r3, [sp, #28]
   b58a0:	3308      	adds	r3, #8
   b58a2:	b29b      	uxth	r3, r3
   b58a4:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b58a6:	2400      	movs	r4, #0
   b58a8:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b58aa:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b58ac:	bf1c      	itt	ne
   b58ae:	4b2c      	ldrne	r3, [pc, #176]	; (b5960 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b58b0:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b58b2:	9e07      	ldr	r6, [sp, #28]
   b58b4:	bf16      	itet	ne
   b58b6:	191b      	addne	r3, r3, r4
      line = 0x0;
   b58b8:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b58ba:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b58bc:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b58be:	9a04      	ldr	r2, [sp, #16]
   b58c0:	b2ab      	uxth	r3, r5
   b58c2:	930a      	str	r3, [sp, #40]	; 0x28
   b58c4:	fb04 f305 	mul.w	r3, r4, r5
   b58c8:	fa13 f382 	uxtah	r3, r3, r2
   b58cc:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b58ce:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b58d2:	ee08 3a10 	vmov	s16, r3
   b58d6:	46b0      	mov	r8, r6
   b58d8:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b58dc:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b58e0:	9b03      	ldr	r3, [sp, #12]
   b58e2:	07db      	lsls	r3, r3, #31
   b58e4:	d52f      	bpl.n	b5946 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b58e6:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b58e8:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b58ea:	d11f      	bne.n	b592c <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b58ec:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b58f0:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b58f2:	b232      	sxth	r2, r6
   b58f4:	4651      	mov	r1, sl
   b58f6:	4638      	mov	r0, r7
   b58f8:	47d8      	blx	fp
      line >>= 1;
   b58fa:	9b03      	ldr	r3, [sp, #12]
   b58fc:	085b      	lsrs	r3, r3, #1
   b58fe:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b5900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5902:	3601      	adds	r6, #1
   b5904:	4498      	add	r8, r3
   b5906:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5908:	b2b6      	uxth	r6, r6
   b590a:	42b3      	cmp	r3, r6
   b590c:	fa1f f888 	uxth.w	r8, r8
   b5910:	d1e6      	bne.n	b58e0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b5912:	9b08      	ldr	r3, [sp, #32]
   b5914:	3b01      	subs	r3, #1
   b5916:	3401      	adds	r4, #1
   b5918:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b591c:	b264      	sxtb	r4, r4
   b591e:	9308      	str	r3, [sp, #32]
   b5920:	d1c3      	bne.n	b58aa <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b5922:	b00d      	add	sp, #52	; 0x34
   b5924:	ecbd 8b02 	vpop	{d8}
   b5928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b592c:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b592e:	e9cd 9200 	strd	r9, r2, [sp]
   b5932:	ee18 1a10 	vmov	r1, s16
   b5936:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b593a:	fa0f f288 	sxth.w	r2, r8
   b593e:	464b      	mov	r3, r9
   b5940:	4638      	mov	r0, r7
   b5942:	47d8      	blx	fp
   b5944:	e7d9      	b.n	b58fa <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b5946:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b594a:	4293      	cmp	r3, r2
   b594c:	d0d5      	beq.n	b58fa <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b594e:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b5950:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b5952:	d103      	bne.n	b595c <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b5954:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b5958:	9b06      	ldr	r3, [sp, #24]
   b595a:	e7ca      	b.n	b58f2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b595c:	9a06      	ldr	r2, [sp, #24]
   b595e:	e7e6      	b.n	b592e <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b5960:	000b8970 	.word	0x000b8970

000b5964 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b5964:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b5966:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b5968:	b085      	sub	sp, #20
   b596a:	4604      	mov	r4, r0
  if (c == '\n') {
   b596c:	d107      	bne.n	b597e <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b596e:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b5970:	8a63      	ldrh	r3, [r4, #18]
   b5972:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b5976:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b5978:	2300      	movs	r3, #0
   b597a:	8223      	strh	r3, [r4, #16]
   b597c:	e021      	b.n	b59c2 <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b597e:	290d      	cmp	r1, #13
   b5980:	d01f      	beq.n	b59c2 <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b5982:	7e03      	ldrb	r3, [r0, #24]
   b5984:	9302      	str	r3, [sp, #8]
   b5986:	8ac3      	ldrh	r3, [r0, #22]
   b5988:	9301      	str	r3, [sp, #4]
   b598a:	8a83      	ldrh	r3, [r0, #20]
   b598c:	9300      	str	r3, [sp, #0]
   b598e:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b5992:	460b      	mov	r3, r1
   b5994:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b5998:	f7ff ff5c 	bl	b5854 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b599c:	7e20      	ldrb	r0, [r4, #24]
   b599e:	8a23      	ldrh	r3, [r4, #16]
   b59a0:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b59a4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b59a8:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b59aa:	b21b      	sxth	r3, r3
   b59ac:	4602      	mov	r2, r0
   b59ae:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b59b0:	b139      	cbz	r1, b59c2 <_ZN12Adafruit_GFX5writeEh+0x5e>
   b59b2:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b59b6:	f06f 0505 	mvn.w	r5, #5
   b59ba:	fb05 1100 	mla	r1, r5, r0, r1
   b59be:	428b      	cmp	r3, r1
   b59c0:	dcd6      	bgt.n	b5970 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b59c2:	2001      	movs	r0, #1
   b59c4:	b005      	add	sp, #20
   b59c6:	bd30      	pop	{r4, r5, pc}

000b59c8 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   b59c8:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   b59ca:	8242      	strh	r2, [r0, #18]
}
   b59cc:	4770      	bx	lr

000b59ce <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   b59ce:	2901      	cmp	r1, #1
   b59d0:	bf38      	it	cc
   b59d2:	2101      	movcc	r1, #1
   b59d4:	7601      	strb	r1, [r0, #24]
}
   b59d6:	4770      	bx	lr

000b59d8 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   b59d8:	82c1      	strh	r1, [r0, #22]
   b59da:	8281      	strh	r1, [r0, #20]
}
   b59dc:	4770      	bx	lr

000b59de <_ZN12Adafruit_GFX11getRotationEv>:
}
   b59de:	7e40      	ldrb	r0, [r0, #25]
   b59e0:	4770      	bx	lr

000b59e2 <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
   b59e2:	f001 0303 	and.w	r3, r1, #3
    _height = HEIGHT;
   b59e6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
  rotation = (x & 3);
   b59ea:	7643      	strb	r3, [r0, #25]
  switch(rotation) {
   b59ec:	07c9      	lsls	r1, r1, #31
    _width  = WIDTH;
   b59ee:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b59f2:	bf59      	ittee	pl
   b59f4:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
   b59f6:	81c2      	strhpl	r2, [r0, #14]
    _width  = HEIGHT;
   b59f8:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
   b59fa:	81c3      	strhmi	r3, [r0, #14]
}
   b59fc:	4770      	bx	lr

000b59fe <_ZN12Adafruit_GFX5widthEv>:
}
   b59fe:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b5a02:	4770      	bx	lr

000b5a04 <_ZN12Adafruit_GFX6heightEv>:
}
   b5a04:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b5a08:	4770      	bx	lr

000b5a0a <_ZN15Adafruit_BMP280C1Ev>:
 PRIVATE FUNCTIONS
 ***************************************************************************/


Adafruit_BMP280::Adafruit_BMP280()
  : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   b5a0a:	f04f 33ff 	mov.w	r3, #4294967295
   b5a0e:	60c3      	str	r3, [r0, #12]
{ }
   b5a10:	4770      	bx	lr
	...

000b5a14 <_ZN15Adafruit_BMP2807spixferEh>:
  readCoefficients();
  write8(BMP280_REGISTER_CONTROL, 0x3F);
  return true;
}

uint8_t Adafruit_BMP280::spixfer(uint8_t x) {
   b5a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (_sck == -1)
   b5a18:	f990 300f 	ldrsb.w	r3, [r0, #15]
   b5a1c:	3301      	adds	r3, #1
uint8_t Adafruit_BMP280::spixfer(uint8_t x) {
   b5a1e:	4605      	mov	r5, r0
   b5a20:	460f      	mov	r7, r1
  if (_sck == -1)
   b5a22:	d106      	bne.n	b5a32 <_ZN15Adafruit_BMP2807spixferEh+0x1e>
        return instance().transfer(data);
   b5a24:	f7ff fc72 	bl	b530c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5a28:	4639      	mov	r1, r7
    digitalWrite(_sck, HIGH);
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
}
   b5a2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b5a2e:	f000 bd7b 	b.w	b6528 <_ZN8SPIClass8transferEh>
  Serial.println("Software SPI");
   b5a32:	f001 f94b 	bl	b6ccc <_Z16_fetch_usbserialv>
   b5a36:	4915      	ldr	r1, [pc, #84]	; (b5a8c <_ZN15Adafruit_BMP2807spixferEh+0x78>)
   b5a38:	f000 ff11 	bl	b685e <_ZN5Print7printlnEPKc>
  uint8_t reply = 0;
   b5a3c:	2400      	movs	r4, #0
  for (int i=7; i>=0; i--) {
   b5a3e:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1<<i));
   b5a40:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
   b5a44:	f995 000f 	ldrsb.w	r0, [r5, #15]
   b5a48:	2100      	movs	r1, #0
   b5a4a:	b280      	uxth	r0, r0
   b5a4c:	f001 fe4b 	bl	b76e6 <digitalWrite>
    digitalWrite(_mosi, x & (1<<i));
   b5a50:	f995 000d 	ldrsb.w	r0, [r5, #13]
   b5a54:	fa08 f106 	lsl.w	r1, r8, r6
   b5a58:	4039      	ands	r1, r7
   b5a5a:	b280      	uxth	r0, r0
   b5a5c:	f001 fe43 	bl	b76e6 <digitalWrite>
    digitalWrite(_sck, HIGH);
   b5a60:	f995 000f 	ldrsb.w	r0, [r5, #15]
   b5a64:	2101      	movs	r1, #1
   b5a66:	b280      	uxth	r0, r0
   b5a68:	f001 fe3d 	bl	b76e6 <digitalWrite>
    if (digitalRead(_miso))
   b5a6c:	f995 000e 	ldrsb.w	r0, [r5, #14]
    reply <<= 1;
   b5a70:	0064      	lsls	r4, r4, #1
    if (digitalRead(_miso))
   b5a72:	b280      	uxth	r0, r0
    reply <<= 1;
   b5a74:	b2e4      	uxtb	r4, r4
    if (digitalRead(_miso))
   b5a76:	f001 fe4f 	bl	b7718 <digitalRead>
   b5a7a:	b108      	cbz	r0, b5a80 <_ZN15Adafruit_BMP2807spixferEh+0x6c>
      reply |= 1;
   b5a7c:	f044 0401 	orr.w	r4, r4, #1
  for (int i=7; i>=0; i--) {
   b5a80:	3e01      	subs	r6, #1
   b5a82:	d2df      	bcs.n	b5a44 <_ZN15Adafruit_BMP2807spixferEh+0x30>
}
   b5a84:	4620      	mov	r0, r4
   b5a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5a8a:	bf00      	nop
   b5a8c:	000b8ea4 	.word	0x000b8ea4

000b5a90 <_ZN15Adafruit_BMP2806write8Ehh>:
/*!
    @brief  Writes an 8 bit value over I2C/SPI
*/
/**************************************************************************/
void Adafruit_BMP280::write8(byte reg, byte value)
{
   b5a90:	b570      	push	{r4, r5, r6, lr}
   b5a92:	4604      	mov	r4, r0
  if (_cs == -1) {
   b5a94:	f990 000c 	ldrsb.w	r0, [r0, #12]
   b5a98:	1c43      	adds	r3, r0, #1
{
   b5a9a:	460e      	mov	r6, r1
   b5a9c:	4615      	mov	r5, r2
  if (_cs == -1) {
   b5a9e:	d116      	bne.n	b5ace <_ZN15Adafruit_BMP2806write8Ehh+0x3e>
    Wire.beginTransmission((uint8_t)_i2caddr);
   b5aa0:	f001 fee2 	bl	b7868 <_Z19__fetch_global_Wirev>
   b5aa4:	7821      	ldrb	r1, [r4, #0]
   b5aa6:	f001 fa05 	bl	b6eb4 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   b5aaa:	f001 fedd 	bl	b7868 <_Z19__fetch_global_Wirev>
   b5aae:	6803      	ldr	r3, [r0, #0]
   b5ab0:	4631      	mov	r1, r6
   b5ab2:	689b      	ldr	r3, [r3, #8]
   b5ab4:	4798      	blx	r3
    Wire.write((uint8_t)value);
   b5ab6:	f001 fed7 	bl	b7868 <_Z19__fetch_global_Wirev>
   b5aba:	6803      	ldr	r3, [r0, #0]
   b5abc:	4629      	mov	r1, r5
   b5abe:	689b      	ldr	r3, [r3, #8]
   b5ac0:	4798      	blx	r3
    Wire.endTransmission();
   b5ac2:	f001 fed1 	bl	b7868 <_Z19__fetch_global_Wirev>
    digitalWrite(_cs, LOW);
    spixfer(reg & ~0x80); // write, bit 7 low
    spixfer(value);
    digitalWrite(_cs, HIGH);
  }
}
   b5ac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Wire.endTransmission();
   b5aca:	f001 b9fe 	b.w	b6eca <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(_cs, LOW);
   b5ace:	2100      	movs	r1, #0
   b5ad0:	b280      	uxth	r0, r0
   b5ad2:	f001 fe08 	bl	b76e6 <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
   b5ad6:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   b5ada:	4620      	mov	r0, r4
   b5adc:	f7ff ff9a 	bl	b5a14 <_ZN15Adafruit_BMP2807spixferEh>
    spixfer(value);
   b5ae0:	4629      	mov	r1, r5
   b5ae2:	4620      	mov	r0, r4
   b5ae4:	f7ff ff96 	bl	b5a14 <_ZN15Adafruit_BMP2807spixferEh>
    digitalWrite(_cs, HIGH);
   b5ae8:	f994 000c 	ldrsb.w	r0, [r4, #12]
   b5aec:	2101      	movs	r1, #1
}
   b5aee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digitalWrite(_cs, HIGH);
   b5af2:	b280      	uxth	r0, r0
   b5af4:	f001 bdf7 	b.w	b76e6 <digitalWrite>

000b5af8 <_ZN15Adafruit_BMP2805read8Eh>:
/*!
    @brief  Reads an 8 bit value over I2C/SPI
*/
/**************************************************************************/
uint8_t Adafruit_BMP280::read8(byte reg)
{
   b5af8:	b538      	push	{r3, r4, r5, lr}
   b5afa:	4604      	mov	r4, r0
  uint8_t value;

  if (_cs == -1) {
   b5afc:	f990 000c 	ldrsb.w	r0, [r0, #12]
   b5b00:	1c43      	adds	r3, r0, #1
{
   b5b02:	460d      	mov	r5, r1
  if (_cs == -1) {
   b5b04:	d120      	bne.n	b5b48 <_ZN15Adafruit_BMP2805read8Eh+0x50>
    Wire.beginTransmission((uint8_t)_i2caddr);
   b5b06:	f001 feaf 	bl	b7868 <_Z19__fetch_global_Wirev>
   b5b0a:	7821      	ldrb	r1, [r4, #0]
   b5b0c:	f001 f9d2 	bl	b6eb4 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   b5b10:	f001 feaa 	bl	b7868 <_Z19__fetch_global_Wirev>
   b5b14:	6803      	ldr	r3, [r0, #0]
   b5b16:	4629      	mov	r1, r5
   b5b18:	689b      	ldr	r3, [r3, #8]
   b5b1a:	4798      	blx	r3
    Wire.endTransmission();
   b5b1c:	f001 fea4 	bl	b7868 <_Z19__fetch_global_Wirev>
   b5b20:	f001 f9d3 	bl	b6eca <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom((uint8_t)_i2caddr, (byte)1);
   b5b24:	f001 fea0 	bl	b7868 <_Z19__fetch_global_Wirev>
   b5b28:	7821      	ldrb	r1, [r4, #0]
   b5b2a:	2201      	movs	r2, #1
   b5b2c:	f001 f9bf 	bl	b6eae <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
   b5b30:	f001 fe9a 	bl	b7868 <_Z19__fetch_global_Wirev>
   b5b34:	6803      	ldr	r3, [r0, #0]
   b5b36:	695b      	ldr	r3, [r3, #20]
   b5b38:	4798      	blx	r3
   b5b3a:	b2c5      	uxtb	r5, r0
    Wire.endTransmission();
   b5b3c:	f001 fe94 	bl	b7868 <_Z19__fetch_global_Wirev>
   b5b40:	f001 f9c3 	bl	b6eca <_ZN7TwoWire15endTransmissionEv>
    value = spixfer(0);
    digitalWrite(_cs, HIGH);

  }
  return value;
}
   b5b44:	4628      	mov	r0, r5
   b5b46:	bd38      	pop	{r3, r4, r5, pc}
    digitalWrite(_cs, LOW);
   b5b48:	2100      	movs	r1, #0
   b5b4a:	b280      	uxth	r0, r0
   b5b4c:	f001 fdcb 	bl	b76e6 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   b5b50:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   b5b54:	4620      	mov	r0, r4
   b5b56:	f7ff ff5d 	bl	b5a14 <_ZN15Adafruit_BMP2807spixferEh>
    value = spixfer(0);
   b5b5a:	2100      	movs	r1, #0
   b5b5c:	4620      	mov	r0, r4
   b5b5e:	f7ff ff59 	bl	b5a14 <_ZN15Adafruit_BMP2807spixferEh>
   b5b62:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
   b5b64:	f994 000c 	ldrsb.w	r0, [r4, #12]
   b5b68:	2101      	movs	r1, #1
   b5b6a:	b280      	uxth	r0, r0
   b5b6c:	f001 fdbb 	bl	b76e6 <digitalWrite>
   b5b70:	e7e8      	b.n	b5b44 <_ZN15Adafruit_BMP2805read8Eh+0x4c>

000b5b72 <_ZN15Adafruit_BMP2806read16Eh>:
/*!
    @brief  Reads a 16 bit value over I2C/SPI
*/
/**************************************************************************/
uint16_t Adafruit_BMP280::read16(byte reg)
{
   b5b72:	b538      	push	{r3, r4, r5, lr}
   b5b74:	4605      	mov	r5, r0
  uint16_t value;

  if (_cs == -1) {
   b5b76:	f990 000c 	ldrsb.w	r0, [r0, #12]
   b5b7a:	1c43      	adds	r3, r0, #1
{
   b5b7c:	460c      	mov	r4, r1
  if (_cs == -1) {
   b5b7e:	d128      	bne.n	b5bd2 <_ZN15Adafruit_BMP2806read16Eh+0x60>
    Wire.beginTransmission((uint8_t)_i2caddr);
   b5b80:	f001 fe72 	bl	b7868 <_Z19__fetch_global_Wirev>
   b5b84:	7829      	ldrb	r1, [r5, #0]
   b5b86:	f001 f995 	bl	b6eb4 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   b5b8a:	f001 fe6d 	bl	b7868 <_Z19__fetch_global_Wirev>
   b5b8e:	6803      	ldr	r3, [r0, #0]
   b5b90:	4621      	mov	r1, r4
   b5b92:	689b      	ldr	r3, [r3, #8]
   b5b94:	4798      	blx	r3
    Wire.endTransmission();
   b5b96:	f001 fe67 	bl	b7868 <_Z19__fetch_global_Wirev>
   b5b9a:	f001 f996 	bl	b6eca <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom((uint8_t)_i2caddr, (byte)2);
   b5b9e:	f001 fe63 	bl	b7868 <_Z19__fetch_global_Wirev>
   b5ba2:	7829      	ldrb	r1, [r5, #0]
   b5ba4:	2202      	movs	r2, #2
   b5ba6:	f001 f982 	bl	b6eae <_ZN7TwoWire11requestFromEhj>
    value = (Wire.read() << 8) | Wire.read();
   b5baa:	f001 fe5d 	bl	b7868 <_Z19__fetch_global_Wirev>
   b5bae:	6803      	ldr	r3, [r0, #0]
   b5bb0:	695b      	ldr	r3, [r3, #20]
   b5bb2:	4798      	blx	r3
   b5bb4:	4604      	mov	r4, r0
   b5bb6:	f001 fe57 	bl	b7868 <_Z19__fetch_global_Wirev>
   b5bba:	6803      	ldr	r3, [r0, #0]
   b5bbc:	695b      	ldr	r3, [r3, #20]
   b5bbe:	4798      	blx	r3
   b5bc0:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   b5bc4:	b284      	uxth	r4, r0
    Wire.endTransmission();
   b5bc6:	f001 fe4f 	bl	b7868 <_Z19__fetch_global_Wirev>
   b5bca:	f001 f97e 	bl	b6eca <_ZN7TwoWire15endTransmissionEv>
    value = (spixfer(0) << 8) | spixfer(0);
    digitalWrite(_cs, HIGH);
  }

  return value;
}
   b5bce:	4620      	mov	r0, r4
   b5bd0:	bd38      	pop	{r3, r4, r5, pc}
    digitalWrite(_cs, LOW);
   b5bd2:	2100      	movs	r1, #0
   b5bd4:	b280      	uxth	r0, r0
   b5bd6:	f001 fd86 	bl	b76e6 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   b5bda:	f044 0180 	orr.w	r1, r4, #128	; 0x80
   b5bde:	4628      	mov	r0, r5
   b5be0:	f7ff ff18 	bl	b5a14 <_ZN15Adafruit_BMP2807spixferEh>
    value = (spixfer(0) << 8) | spixfer(0);
   b5be4:	2100      	movs	r1, #0
   b5be6:	4628      	mov	r0, r5
   b5be8:	f7ff ff14 	bl	b5a14 <_ZN15Adafruit_BMP2807spixferEh>
   b5bec:	2100      	movs	r1, #0
   b5bee:	4604      	mov	r4, r0
   b5bf0:	4628      	mov	r0, r5
   b5bf2:	f7ff ff0f 	bl	b5a14 <_ZN15Adafruit_BMP2807spixferEh>
   b5bf6:	ea40 2404 	orr.w	r4, r0, r4, lsl #8
    digitalWrite(_cs, HIGH);
   b5bfa:	f995 000c 	ldrsb.w	r0, [r5, #12]
   b5bfe:	2101      	movs	r1, #1
   b5c00:	b280      	uxth	r0, r0
    value = (spixfer(0) << 8) | spixfer(0);
   b5c02:	b2a4      	uxth	r4, r4
    digitalWrite(_cs, HIGH);
   b5c04:	f001 fd6f 	bl	b76e6 <digitalWrite>
   b5c08:	e7e1      	b.n	b5bce <_ZN15Adafruit_BMP2806read16Eh+0x5c>

000b5c0a <_ZN15Adafruit_BMP2809read16_LEEh>:

uint16_t Adafruit_BMP280::read16_LE(byte reg) {
   b5c0a:	b508      	push	{r3, lr}
  uint16_t temp = read16(reg);
   b5c0c:	f7ff ffb1 	bl	b5b72 <_ZN15Adafruit_BMP2806read16Eh>
  return (temp >> 8) | (temp << 8);
   b5c10:	ba40      	rev16	r0, r0
}
   b5c12:	b280      	uxth	r0, r0
   b5c14:	bd08      	pop	{r3, pc}

000b5c16 <_ZN15Adafruit_BMP28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BMP280::readCoefficients(void)
{
   b5c16:	b510      	push	{r4, lr}
    _bmp280_calib.dig_T1 = read16_LE(BMP280_REGISTER_DIG_T1);
   b5c18:	2188      	movs	r1, #136	; 0x88
{
   b5c1a:	4604      	mov	r4, r0
    _bmp280_calib.dig_T1 = read16_LE(BMP280_REGISTER_DIG_T1);
   b5c1c:	f7ff fff5 	bl	b5c0a <_ZN15Adafruit_BMP2809read16_LEEh>
  return (int16_t)read16_LE(reg);
   b5c20:	218a      	movs	r1, #138	; 0x8a
    _bmp280_calib.dig_T1 = read16_LE(BMP280_REGISTER_DIG_T1);
   b5c22:	8220      	strh	r0, [r4, #16]
  return (int16_t)read16_LE(reg);
   b5c24:	4620      	mov	r0, r4
   b5c26:	f7ff fff0 	bl	b5c0a <_ZN15Adafruit_BMP2809read16_LEEh>
   b5c2a:	218c      	movs	r1, #140	; 0x8c
    _bmp280_calib.dig_T2 = readS16_LE(BMP280_REGISTER_DIG_T2);
   b5c2c:	8260      	strh	r0, [r4, #18]
  return (int16_t)read16_LE(reg);
   b5c2e:	4620      	mov	r0, r4
   b5c30:	f7ff ffeb 	bl	b5c0a <_ZN15Adafruit_BMP2809read16_LEEh>
    _bmp280_calib.dig_T3 = readS16_LE(BMP280_REGISTER_DIG_T3);

    _bmp280_calib.dig_P1 = read16_LE(BMP280_REGISTER_DIG_P1);
   b5c34:	218e      	movs	r1, #142	; 0x8e
    _bmp280_calib.dig_T3 = readS16_LE(BMP280_REGISTER_DIG_T3);
   b5c36:	82a0      	strh	r0, [r4, #20]
    _bmp280_calib.dig_P1 = read16_LE(BMP280_REGISTER_DIG_P1);
   b5c38:	4620      	mov	r0, r4
   b5c3a:	f7ff ffe6 	bl	b5c0a <_ZN15Adafruit_BMP2809read16_LEEh>
  return (int16_t)read16_LE(reg);
   b5c3e:	2190      	movs	r1, #144	; 0x90
    _bmp280_calib.dig_P1 = read16_LE(BMP280_REGISTER_DIG_P1);
   b5c40:	82e0      	strh	r0, [r4, #22]
  return (int16_t)read16_LE(reg);
   b5c42:	4620      	mov	r0, r4
   b5c44:	f7ff ffe1 	bl	b5c0a <_ZN15Adafruit_BMP2809read16_LEEh>
   b5c48:	2192      	movs	r1, #146	; 0x92
    _bmp280_calib.dig_P2 = readS16_LE(BMP280_REGISTER_DIG_P2);
   b5c4a:	8320      	strh	r0, [r4, #24]
  return (int16_t)read16_LE(reg);
   b5c4c:	4620      	mov	r0, r4
   b5c4e:	f7ff ffdc 	bl	b5c0a <_ZN15Adafruit_BMP2809read16_LEEh>
   b5c52:	2194      	movs	r1, #148	; 0x94
    _bmp280_calib.dig_P3 = readS16_LE(BMP280_REGISTER_DIG_P3);
   b5c54:	8360      	strh	r0, [r4, #26]
  return (int16_t)read16_LE(reg);
   b5c56:	4620      	mov	r0, r4
   b5c58:	f7ff ffd7 	bl	b5c0a <_ZN15Adafruit_BMP2809read16_LEEh>
   b5c5c:	2196      	movs	r1, #150	; 0x96
    _bmp280_calib.dig_P4 = readS16_LE(BMP280_REGISTER_DIG_P4);
   b5c5e:	83a0      	strh	r0, [r4, #28]
  return (int16_t)read16_LE(reg);
   b5c60:	4620      	mov	r0, r4
   b5c62:	f7ff ffd2 	bl	b5c0a <_ZN15Adafruit_BMP2809read16_LEEh>
   b5c66:	2198      	movs	r1, #152	; 0x98
    _bmp280_calib.dig_P5 = readS16_LE(BMP280_REGISTER_DIG_P5);
   b5c68:	83e0      	strh	r0, [r4, #30]
  return (int16_t)read16_LE(reg);
   b5c6a:	4620      	mov	r0, r4
   b5c6c:	f7ff ffcd 	bl	b5c0a <_ZN15Adafruit_BMP2809read16_LEEh>
   b5c70:	219a      	movs	r1, #154	; 0x9a
    _bmp280_calib.dig_P6 = readS16_LE(BMP280_REGISTER_DIG_P6);
   b5c72:	8420      	strh	r0, [r4, #32]
  return (int16_t)read16_LE(reg);
   b5c74:	4620      	mov	r0, r4
   b5c76:	f7ff ffc8 	bl	b5c0a <_ZN15Adafruit_BMP2809read16_LEEh>
   b5c7a:	219c      	movs	r1, #156	; 0x9c
    _bmp280_calib.dig_P7 = readS16_LE(BMP280_REGISTER_DIG_P7);
   b5c7c:	8460      	strh	r0, [r4, #34]	; 0x22
  return (int16_t)read16_LE(reg);
   b5c7e:	4620      	mov	r0, r4
   b5c80:	f7ff ffc3 	bl	b5c0a <_ZN15Adafruit_BMP2809read16_LEEh>
   b5c84:	219e      	movs	r1, #158	; 0x9e
    _bmp280_calib.dig_P8 = readS16_LE(BMP280_REGISTER_DIG_P8);
   b5c86:	84a0      	strh	r0, [r4, #36]	; 0x24
  return (int16_t)read16_LE(reg);
   b5c88:	4620      	mov	r0, r4
   b5c8a:	f7ff ffbe 	bl	b5c0a <_ZN15Adafruit_BMP2809read16_LEEh>
    _bmp280_calib.dig_P9 = readS16_LE(BMP280_REGISTER_DIG_P9);
   b5c8e:	84e0      	strh	r0, [r4, #38]	; 0x26
}
   b5c90:	bd10      	pop	{r4, pc}
	...

000b5c94 <_ZN15Adafruit_BMP28015readTemperatureEv>:
/*!

*/
/**************************************************************************/
float Adafruit_BMP280::readTemperature(void)
{
   b5c94:	b538      	push	{r3, r4, r5, lr}
  int32_t var1, var2;

  int32_t adc_T = read16(BMP280_REGISTER_TEMPDATA);
   b5c96:	21fa      	movs	r1, #250	; 0xfa
{
   b5c98:	4604      	mov	r4, r0
  int32_t adc_T = read16(BMP280_REGISTER_TEMPDATA);
   b5c9a:	f7ff ff6a 	bl	b5b72 <_ZN15Adafruit_BMP2806read16Eh>
  adc_T <<= 8;
  adc_T |= read8(BMP280_REGISTER_TEMPDATA+2);
   b5c9e:	21fc      	movs	r1, #252	; 0xfc
  adc_T <<= 8;
   b5ca0:	0205      	lsls	r5, r0, #8
  adc_T |= read8(BMP280_REGISTER_TEMPDATA+2);
   b5ca2:	4620      	mov	r0, r4
   b5ca4:	f7ff ff28 	bl	b5af8 <_ZN15Adafruit_BMP2805read8Eh>
  adc_T >>= 4;

  var1  = ((((adc_T>>3) - ((int32_t)_bmp280_calib.dig_T1 <<1))) *
   b5ca8:	8a23      	ldrh	r3, [r4, #16]
	   ((int32_t)_bmp280_calib.dig_T2)) >> 11;
   b5caa:	f9b4 1012 	ldrsh.w	r1, [r4, #18]

  t_fine = var1 + var2;

  float T  = (t_fine * 5 + 128) >> 8;
  return T/100;
}
   b5cae:	ed9f 0a0f 	vldr	s0, [pc, #60]	; b5cec <_ZN15Adafruit_BMP28015readTemperatureEv+0x58>
  adc_T |= read8(BMP280_REGISTER_TEMPDATA+2);
   b5cb2:	4328      	orrs	r0, r5
  var2  = (((((adc_T>>4) - ((int32_t)_bmp280_calib.dig_T1)) *
   b5cb4:	ebc3 2220 	rsb	r2, r3, r0, asr #8
  var1  = ((((adc_T>>3) - ((int32_t)_bmp280_calib.dig_T1 <<1))) *
   b5cb8:	005b      	lsls	r3, r3, #1
   b5cba:	ebc3 13e0 	rsb	r3, r3, r0, asr #7
   b5cbe:	4359      	muls	r1, r3
  var2  = (((((adc_T>>4) - ((int32_t)_bmp280_calib.dig_T1)) *
   b5cc0:	fb02 f302 	mul.w	r3, r2, r2
	   ((int32_t)_bmp280_calib.dig_T3)) >> 14;
   b5cc4:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
	     ((adc_T>>4) - ((int32_t)_bmp280_calib.dig_T1))) >> 12) *
   b5cc8:	131b      	asrs	r3, r3, #12
   b5cca:	4353      	muls	r3, r2
  var2  = (((((adc_T>>4) - ((int32_t)_bmp280_calib.dig_T1)) *
   b5ccc:	139b      	asrs	r3, r3, #14
  t_fine = var1 + var2;
   b5cce:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   b5cd2:	60a3      	str	r3, [r4, #8]
  float T  = (t_fine * 5 + 128) >> 8;
   b5cd4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b5cd8:	3380      	adds	r3, #128	; 0x80
   b5cda:	121b      	asrs	r3, r3, #8
   b5cdc:	ee07 3a90 	vmov	s15, r3
   b5ce0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
   b5ce4:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b5ce8:	bd38      	pop	{r3, r4, r5, pc}
   b5cea:	bf00      	nop
   b5cec:	42c80000 	.word	0x42c80000

000b5cf0 <_ZN15Adafruit_BMP2805beginEh>:
bool Adafruit_BMP280::begin(uint8_t a) {
   b5cf0:	b510      	push	{r4, lr}
   b5cf2:	4604      	mov	r4, r0
  _i2caddr = a;
   b5cf4:	7001      	strb	r1, [r0, #0]
  if (_cs == -1) {
   b5cf6:	f990 000c 	ldrsb.w	r0, [r0, #12]
   b5cfa:	1c43      	adds	r3, r0, #1
   b5cfc:	d118      	bne.n	b5d30 <_ZN15Adafruit_BMP2805beginEh+0x40>
    Serial.println("Begin I2C");
   b5cfe:	f000 ffe5 	bl	b6ccc <_Z16_fetch_usbserialv>
   b5d02:	4924      	ldr	r1, [pc, #144]	; (b5d94 <_ZN15Adafruit_BMP2805beginEh+0xa4>)
   b5d04:	f000 fdab 	bl	b685e <_ZN5Print7printlnEPKc>
    Wire.begin();
   b5d08:	f001 fdae 	bl	b7868 <_Z19__fetch_global_Wirev>
   b5d0c:	f001 f8a0 	bl	b6e50 <_ZN7TwoWire5beginEv>
  if (read8(BMP280_REGISTER_CHIPID) != 0x58)
   b5d10:	21d0      	movs	r1, #208	; 0xd0
   b5d12:	4620      	mov	r0, r4
   b5d14:	f7ff fef0 	bl	b5af8 <_ZN15Adafruit_BMP2805read8Eh>
   b5d18:	2858      	cmp	r0, #88	; 0x58
   b5d1a:	d139      	bne.n	b5d90 <_ZN15Adafruit_BMP2805beginEh+0xa0>
  readCoefficients();
   b5d1c:	4620      	mov	r0, r4
   b5d1e:	f7ff ff7a 	bl	b5c16 <_ZN15Adafruit_BMP28016readCoefficientsEv>
  write8(BMP280_REGISTER_CONTROL, 0x3F);
   b5d22:	4620      	mov	r0, r4
   b5d24:	223f      	movs	r2, #63	; 0x3f
   b5d26:	21f4      	movs	r1, #244	; 0xf4
   b5d28:	f7ff feb2 	bl	b5a90 <_ZN15Adafruit_BMP2806write8Ehh>
  return true;
   b5d2c:	2001      	movs	r0, #1
}
   b5d2e:	bd10      	pop	{r4, pc}
    digitalWrite(_cs, HIGH);
   b5d30:	2101      	movs	r1, #1
   b5d32:	b280      	uxth	r0, r0
   b5d34:	f001 fcd7 	bl	b76e6 <digitalWrite>
    pinMode(_cs, OUTPUT);
   b5d38:	f994 000c 	ldrsb.w	r0, [r4, #12]
   b5d3c:	2101      	movs	r1, #1
   b5d3e:	b280      	uxth	r0, r0
   b5d40:	f001 fcc0 	bl	b76c4 <pinMode>
    if (_sck == -1) {
   b5d44:	f994 300f 	ldrsb.w	r3, [r4, #15]
   b5d48:	3301      	adds	r3, #1
   b5d4a:	d109      	bne.n	b5d60 <_ZN15Adafruit_BMP2805beginEh+0x70>
      Serial.println("Begin hardware SPI");
   b5d4c:	f000 ffbe 	bl	b6ccc <_Z16_fetch_usbserialv>
   b5d50:	4911      	ldr	r1, [pc, #68]	; (b5d98 <_ZN15Adafruit_BMP2805beginEh+0xa8>)
   b5d52:	f000 fd84 	bl	b685e <_ZN5Print7printlnEPKc>
        instance().begin();
   b5d56:	f7ff fad9 	bl	b530c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5d5a:	f000 fb3b 	bl	b63d4 <_ZN8SPIClass5beginEv>
    }
   b5d5e:	e7d7      	b.n	b5d10 <_ZN15Adafruit_BMP2805beginEh+0x20>
      Serial.println("Begin software SPI");
   b5d60:	f000 ffb4 	bl	b6ccc <_Z16_fetch_usbserialv>
   b5d64:	490d      	ldr	r1, [pc, #52]	; (b5d9c <_ZN15Adafruit_BMP2805beginEh+0xac>)
   b5d66:	f000 fd7a 	bl	b685e <_ZN5Print7printlnEPKc>
      pinMode(_sck, OUTPUT);
   b5d6a:	f994 000f 	ldrsb.w	r0, [r4, #15]
   b5d6e:	2101      	movs	r1, #1
   b5d70:	b280      	uxth	r0, r0
   b5d72:	f001 fca7 	bl	b76c4 <pinMode>
      pinMode(_mosi, OUTPUT);
   b5d76:	f994 000d 	ldrsb.w	r0, [r4, #13]
   b5d7a:	2101      	movs	r1, #1
   b5d7c:	b280      	uxth	r0, r0
   b5d7e:	f001 fca1 	bl	b76c4 <pinMode>
      pinMode(_miso, INPUT);
   b5d82:	f994 000e 	ldrsb.w	r0, [r4, #14]
   b5d86:	2100      	movs	r1, #0
   b5d88:	b280      	uxth	r0, r0
   b5d8a:	f001 fc9b 	bl	b76c4 <pinMode>
   b5d8e:	e7bf      	b.n	b5d10 <_ZN15Adafruit_BMP2805beginEh+0x20>
    return false;
   b5d90:	2000      	movs	r0, #0
   b5d92:	e7cc      	b.n	b5d2e <_ZN15Adafruit_BMP2805beginEh+0x3e>
   b5d94:	000b8eb1 	.word	0x000b8eb1
   b5d98:	000b8ebb 	.word	0x000b8ebb
   b5d9c:	000b8ece 	.word	0x000b8ece

000b5da0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5da0:	b508      	push	{r3, lr}
   b5da2:	4b02      	ldr	r3, [pc, #8]	; (b5dac <netdb_freeaddrinfo+0xc>)
   b5da4:	681b      	ldr	r3, [r3, #0]
   b5da6:	689b      	ldr	r3, [r3, #8]
   b5da8:	9301      	str	r3, [sp, #4]
   b5daa:	bd08      	pop	{r3, pc}
   b5dac:	00030268 	.word	0x00030268

000b5db0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5db0:	b508      	push	{r3, lr}
   b5db2:	4b02      	ldr	r3, [pc, #8]	; (b5dbc <netdb_getaddrinfo+0xc>)
   b5db4:	681b      	ldr	r3, [r3, #0]
   b5db6:	68db      	ldr	r3, [r3, #12]
   b5db8:	9301      	str	r3, [sp, #4]
   b5dba:	bd08      	pop	{r3, pc}
   b5dbc:	00030268 	.word	0x00030268

000b5dc0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b5dc0:	b508      	push	{r3, lr}
   b5dc2:	4b02      	ldr	r3, [pc, #8]	; (b5dcc <HAL_Pin_Map+0xc>)
   b5dc4:	681b      	ldr	r3, [r3, #0]
   b5dc6:	681b      	ldr	r3, [r3, #0]
   b5dc8:	9301      	str	r3, [sp, #4]
   b5dca:	bd08      	pop	{r3, pc}
   b5dcc:	0003022c 	.word	0x0003022c

000b5dd0 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b5dd0:	b508      	push	{r3, lr}
   b5dd2:	4b02      	ldr	r3, [pc, #8]	; (b5ddc <HAL_Validate_Pin_Function+0xc>)
   b5dd4:	681b      	ldr	r3, [r3, #0]
   b5dd6:	685b      	ldr	r3, [r3, #4]
   b5dd8:	9301      	str	r3, [sp, #4]
   b5dda:	bd08      	pop	{r3, pc}
   b5ddc:	0003022c 	.word	0x0003022c

000b5de0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5de0:	b508      	push	{r3, lr}
   b5de2:	4b02      	ldr	r3, [pc, #8]	; (b5dec <HAL_Pin_Mode+0xc>)
   b5de4:	681b      	ldr	r3, [r3, #0]
   b5de6:	689b      	ldr	r3, [r3, #8]
   b5de8:	9301      	str	r3, [sp, #4]
   b5dea:	bd08      	pop	{r3, pc}
   b5dec:	0003022c 	.word	0x0003022c

000b5df0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5df0:	b508      	push	{r3, lr}
   b5df2:	4b02      	ldr	r3, [pc, #8]	; (b5dfc <HAL_Get_Pin_Mode+0xc>)
   b5df4:	681b      	ldr	r3, [r3, #0]
   b5df6:	68db      	ldr	r3, [r3, #12]
   b5df8:	9301      	str	r3, [sp, #4]
   b5dfa:	bd08      	pop	{r3, pc}
   b5dfc:	0003022c 	.word	0x0003022c

000b5e00 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5e00:	b508      	push	{r3, lr}
   b5e02:	4b02      	ldr	r3, [pc, #8]	; (b5e0c <HAL_GPIO_Write+0xc>)
   b5e04:	681b      	ldr	r3, [r3, #0]
   b5e06:	691b      	ldr	r3, [r3, #16]
   b5e08:	9301      	str	r3, [sp, #4]
   b5e0a:	bd08      	pop	{r3, pc}
   b5e0c:	0003022c 	.word	0x0003022c

000b5e10 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b5e10:	b508      	push	{r3, lr}
   b5e12:	4b02      	ldr	r3, [pc, #8]	; (b5e1c <HAL_GPIO_Read+0xc>)
   b5e14:	681b      	ldr	r3, [r3, #0]
   b5e16:	695b      	ldr	r3, [r3, #20]
   b5e18:	9301      	str	r3, [sp, #4]
   b5e1a:	bd08      	pop	{r3, pc}
   b5e1c:	0003022c 	.word	0x0003022c

000b5e20 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b5e20:	b508      	push	{r3, lr}
   b5e22:	4b02      	ldr	r3, [pc, #8]	; (b5e2c <hal_adc_read+0xc>)
   b5e24:	681b      	ldr	r3, [r3, #0]
   b5e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5e28:	9301      	str	r3, [sp, #4]
   b5e2a:	bd08      	pop	{r3, pc}
   b5e2c:	0003022c 	.word	0x0003022c

000b5e30 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5e30:	b508      	push	{r3, lr}
   b5e32:	4b02      	ldr	r3, [pc, #8]	; (b5e3c <if_index_to_name+0xc>)
   b5e34:	681b      	ldr	r3, [r3, #0]
   b5e36:	695b      	ldr	r3, [r3, #20]
   b5e38:	9301      	str	r3, [sp, #4]
   b5e3a:	bd08      	pop	{r3, pc}
   b5e3c:	0003026c 	.word	0x0003026c

000b5e40 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5e40:	b508      	push	{r3, lr}
   b5e42:	4b02      	ldr	r3, [pc, #8]	; (b5e4c <HAL_RNG_GetRandomNumber+0xc>)
   b5e44:	681b      	ldr	r3, [r3, #0]
   b5e46:	685b      	ldr	r3, [r3, #4]
   b5e48:	9301      	str	r3, [sp, #4]
   b5e4a:	bd08      	pop	{r3, pc}
   b5e4c:	00030218 	.word	0x00030218

000b5e50 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5e50:	b508      	push	{r3, lr}
   b5e52:	4b02      	ldr	r3, [pc, #8]	; (b5e5c <HAL_Delay_Microseconds+0xc>)
   b5e54:	681b      	ldr	r3, [r3, #0]
   b5e56:	68db      	ldr	r3, [r3, #12]
   b5e58:	9301      	str	r3, [sp, #4]
   b5e5a:	bd08      	pop	{r3, pc}
   b5e5c:	00030218 	.word	0x00030218

000b5e60 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b5e60:	b508      	push	{r3, lr}
   b5e62:	4b02      	ldr	r3, [pc, #8]	; (b5e6c <HAL_Timer_Get_Micro_Seconds+0xc>)
   b5e64:	681b      	ldr	r3, [r3, #0]
   b5e66:	691b      	ldr	r3, [r3, #16]
   b5e68:	9301      	str	r3, [sp, #4]
   b5e6a:	bd08      	pop	{r3, pc}
   b5e6c:	00030218 	.word	0x00030218

000b5e70 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5e70:	b508      	push	{r3, lr}
   b5e72:	4b02      	ldr	r3, [pc, #8]	; (b5e7c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5e74:	681b      	ldr	r3, [r3, #0]
   b5e76:	695b      	ldr	r3, [r3, #20]
   b5e78:	9301      	str	r3, [sp, #4]
   b5e7a:	bd08      	pop	{r3, pc}
   b5e7c:	00030218 	.word	0x00030218

000b5e80 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b5e80:	b508      	push	{r3, lr}
   b5e82:	4b02      	ldr	r3, [pc, #8]	; (b5e8c <hal_timer_millis+0xc>)
   b5e84:	681b      	ldr	r3, [r3, #0]
   b5e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b5e88:	9301      	str	r3, [sp, #4]
   b5e8a:	bd08      	pop	{r3, pc}
   b5e8c:	00030218 	.word	0x00030218

000b5e90 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5e90:	b508      	push	{r3, lr}
   b5e92:	4b02      	ldr	r3, [pc, #8]	; (b5e9c <os_mutex_recursive_create+0xc>)
   b5e94:	681b      	ldr	r3, [r3, #0]
   b5e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5e98:	9301      	str	r3, [sp, #4]
   b5e9a:	bd08      	pop	{r3, pc}
   b5e9c:	00030248 	.word	0x00030248

000b5ea0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5ea0:	b508      	push	{r3, lr}
   b5ea2:	4b02      	ldr	r3, [pc, #8]	; (b5eac <inet_inet_ntop+0xc>)
   b5ea4:	681b      	ldr	r3, [r3, #0]
   b5ea6:	695b      	ldr	r3, [r3, #20]
   b5ea8:	9301      	str	r3, [sp, #4]
   b5eaa:	bd08      	pop	{r3, pc}
   b5eac:	00030264 	.word	0x00030264

000b5eb0 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b5eb0:	b508      	push	{r3, lr}
   b5eb2:	4b02      	ldr	r3, [pc, #8]	; (b5ebc <inet_htonl+0xc>)
   b5eb4:	681b      	ldr	r3, [r3, #0]
   b5eb6:	6a1b      	ldr	r3, [r3, #32]
   b5eb8:	9301      	str	r3, [sp, #4]
   b5eba:	bd08      	pop	{r3, pc}
   b5ebc:	00030264 	.word	0x00030264

000b5ec0 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b5ec0:	b508      	push	{r3, lr}
   b5ec2:	4b02      	ldr	r3, [pc, #8]	; (b5ecc <inet_htons+0xc>)
   b5ec4:	681b      	ldr	r3, [r3, #0]
   b5ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5ec8:	9301      	str	r3, [sp, #4]
   b5eca:	bd08      	pop	{r3, pc}
   b5ecc:	00030264 	.word	0x00030264

000b5ed0 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5ed0:	b508      	push	{r3, lr}
   b5ed2:	4b02      	ldr	r3, [pc, #8]	; (b5edc <hal_usart_write+0xc>)
   b5ed4:	681b      	ldr	r3, [r3, #0]
   b5ed6:	68db      	ldr	r3, [r3, #12]
   b5ed8:	9301      	str	r3, [sp, #4]
   b5eda:	bd08      	pop	{r3, pc}
   b5edc:	0003023c 	.word	0x0003023c

000b5ee0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5ee0:	b508      	push	{r3, lr}
   b5ee2:	4b02      	ldr	r3, [pc, #8]	; (b5eec <hal_usart_available+0xc>)
   b5ee4:	681b      	ldr	r3, [r3, #0]
   b5ee6:	691b      	ldr	r3, [r3, #16]
   b5ee8:	9301      	str	r3, [sp, #4]
   b5eea:	bd08      	pop	{r3, pc}
   b5eec:	0003023c 	.word	0x0003023c

000b5ef0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5ef0:	b508      	push	{r3, lr}
   b5ef2:	4b02      	ldr	r3, [pc, #8]	; (b5efc <hal_usart_read+0xc>)
   b5ef4:	681b      	ldr	r3, [r3, #0]
   b5ef6:	695b      	ldr	r3, [r3, #20]
   b5ef8:	9301      	str	r3, [sp, #4]
   b5efa:	bd08      	pop	{r3, pc}
   b5efc:	0003023c 	.word	0x0003023c

000b5f00 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5f00:	b508      	push	{r3, lr}
   b5f02:	4b02      	ldr	r3, [pc, #8]	; (b5f0c <hal_usart_peek+0xc>)
   b5f04:	681b      	ldr	r3, [r3, #0]
   b5f06:	699b      	ldr	r3, [r3, #24]
   b5f08:	9301      	str	r3, [sp, #4]
   b5f0a:	bd08      	pop	{r3, pc}
   b5f0c:	0003023c 	.word	0x0003023c

000b5f10 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5f10:	b508      	push	{r3, lr}
   b5f12:	4b02      	ldr	r3, [pc, #8]	; (b5f1c <hal_usart_flush+0xc>)
   b5f14:	681b      	ldr	r3, [r3, #0]
   b5f16:	69db      	ldr	r3, [r3, #28]
   b5f18:	9301      	str	r3, [sp, #4]
   b5f1a:	bd08      	pop	{r3, pc}
   b5f1c:	0003023c 	.word	0x0003023c

000b5f20 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5f20:	b508      	push	{r3, lr}
   b5f22:	4b02      	ldr	r3, [pc, #8]	; (b5f2c <hal_usart_is_enabled+0xc>)
   b5f24:	681b      	ldr	r3, [r3, #0]
   b5f26:	6a1b      	ldr	r3, [r3, #32]
   b5f28:	9301      	str	r3, [sp, #4]
   b5f2a:	bd08      	pop	{r3, pc}
   b5f2c:	0003023c 	.word	0x0003023c

000b5f30 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5f30:	b508      	push	{r3, lr}
   b5f32:	4b02      	ldr	r3, [pc, #8]	; (b5f3c <hal_usart_available_data_for_write+0xc>)
   b5f34:	681b      	ldr	r3, [r3, #0]
   b5f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5f38:	9301      	str	r3, [sp, #4]
   b5f3a:	bd08      	pop	{r3, pc}
   b5f3c:	0003023c 	.word	0x0003023c

000b5f40 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5f40:	b508      	push	{r3, lr}
   b5f42:	4b02      	ldr	r3, [pc, #8]	; (b5f4c <hal_usart_init_ex+0xc>)
   b5f44:	681b      	ldr	r3, [r3, #0]
   b5f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5f48:	9301      	str	r3, [sp, #4]
   b5f4a:	bd08      	pop	{r3, pc}
   b5f4c:	0003023c 	.word	0x0003023c

000b5f50 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5f50:	b508      	push	{r3, lr}
   b5f52:	4b02      	ldr	r3, [pc, #8]	; (b5f5c <hal_i2c_begin+0xc>)
   b5f54:	681b      	ldr	r3, [r3, #0]
   b5f56:	68db      	ldr	r3, [r3, #12]
   b5f58:	9301      	str	r3, [sp, #4]
   b5f5a:	bd08      	pop	{r3, pc}
   b5f5c:	00030228 	.word	0x00030228

000b5f60 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5f60:	b508      	push	{r3, lr}
   b5f62:	4b02      	ldr	r3, [pc, #8]	; (b5f6c <hal_i2c_begin_transmission+0xc>)
   b5f64:	681b      	ldr	r3, [r3, #0]
   b5f66:	699b      	ldr	r3, [r3, #24]
   b5f68:	9301      	str	r3, [sp, #4]
   b5f6a:	bd08      	pop	{r3, pc}
   b5f6c:	00030228 	.word	0x00030228

000b5f70 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5f70:	b508      	push	{r3, lr}
   b5f72:	4b02      	ldr	r3, [pc, #8]	; (b5f7c <hal_i2c_end_transmission+0xc>)
   b5f74:	681b      	ldr	r3, [r3, #0]
   b5f76:	69db      	ldr	r3, [r3, #28]
   b5f78:	9301      	str	r3, [sp, #4]
   b5f7a:	bd08      	pop	{r3, pc}
   b5f7c:	00030228 	.word	0x00030228

000b5f80 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5f80:	b508      	push	{r3, lr}
   b5f82:	4b02      	ldr	r3, [pc, #8]	; (b5f8c <hal_i2c_write+0xc>)
   b5f84:	681b      	ldr	r3, [r3, #0]
   b5f86:	6a1b      	ldr	r3, [r3, #32]
   b5f88:	9301      	str	r3, [sp, #4]
   b5f8a:	bd08      	pop	{r3, pc}
   b5f8c:	00030228 	.word	0x00030228

000b5f90 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5f90:	b508      	push	{r3, lr}
   b5f92:	4b02      	ldr	r3, [pc, #8]	; (b5f9c <hal_i2c_available+0xc>)
   b5f94:	681b      	ldr	r3, [r3, #0]
   b5f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5f98:	9301      	str	r3, [sp, #4]
   b5f9a:	bd08      	pop	{r3, pc}
   b5f9c:	00030228 	.word	0x00030228

000b5fa0 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5fa0:	b508      	push	{r3, lr}
   b5fa2:	4b02      	ldr	r3, [pc, #8]	; (b5fac <hal_i2c_read+0xc>)
   b5fa4:	681b      	ldr	r3, [r3, #0]
   b5fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5fa8:	9301      	str	r3, [sp, #4]
   b5faa:	bd08      	pop	{r3, pc}
   b5fac:	00030228 	.word	0x00030228

000b5fb0 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5fb0:	b508      	push	{r3, lr}
   b5fb2:	4b02      	ldr	r3, [pc, #8]	; (b5fbc <hal_i2c_peek+0xc>)
   b5fb4:	681b      	ldr	r3, [r3, #0]
   b5fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5fb8:	9301      	str	r3, [sp, #4]
   b5fba:	bd08      	pop	{r3, pc}
   b5fbc:	00030228 	.word	0x00030228

000b5fc0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5fc0:	b508      	push	{r3, lr}
   b5fc2:	4b02      	ldr	r3, [pc, #8]	; (b5fcc <hal_i2c_flush+0xc>)
   b5fc4:	681b      	ldr	r3, [r3, #0]
   b5fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5fc8:	9301      	str	r3, [sp, #4]
   b5fca:	bd08      	pop	{r3, pc}
   b5fcc:	00030228 	.word	0x00030228

000b5fd0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5fd0:	b508      	push	{r3, lr}
   b5fd2:	4b02      	ldr	r3, [pc, #8]	; (b5fdc <hal_i2c_is_enabled+0xc>)
   b5fd4:	681b      	ldr	r3, [r3, #0]
   b5fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5fd8:	9301      	str	r3, [sp, #4]
   b5fda:	bd08      	pop	{r3, pc}
   b5fdc:	00030228 	.word	0x00030228

000b5fe0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5fe0:	b508      	push	{r3, lr}
   b5fe2:	4b02      	ldr	r3, [pc, #8]	; (b5fec <hal_i2c_init+0xc>)
   b5fe4:	681b      	ldr	r3, [r3, #0]
   b5fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5fe8:	9301      	str	r3, [sp, #4]
   b5fea:	bd08      	pop	{r3, pc}
   b5fec:	00030228 	.word	0x00030228

000b5ff0 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b5ff0:	b508      	push	{r3, lr}
   b5ff2:	4b02      	ldr	r3, [pc, #8]	; (b5ffc <hal_i2c_request_ex+0xc>)
   b5ff4:	681b      	ldr	r3, [r3, #0]
   b5ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5ff8:	9301      	str	r3, [sp, #4]
   b5ffa:	bd08      	pop	{r3, pc}
   b5ffc:	00030228 	.word	0x00030228

000b6000 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6000:	b508      	push	{r3, lr}
   b6002:	4b02      	ldr	r3, [pc, #8]	; (b600c <sock_setsockopt+0xc>)
   b6004:	681b      	ldr	r3, [r3, #0]
   b6006:	699b      	ldr	r3, [r3, #24]
   b6008:	9301      	str	r3, [sp, #4]
   b600a:	bd08      	pop	{r3, pc}
   b600c:	00030238 	.word	0x00030238

000b6010 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6010:	b508      	push	{r3, lr}
   b6012:	4b02      	ldr	r3, [pc, #8]	; (b601c <sock_close+0xc>)
   b6014:	681b      	ldr	r3, [r3, #0]
   b6016:	69db      	ldr	r3, [r3, #28]
   b6018:	9301      	str	r3, [sp, #4]
   b601a:	bd08      	pop	{r3, pc}
   b601c:	00030238 	.word	0x00030238

000b6020 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b6020:	b508      	push	{r3, lr}
   b6022:	4b02      	ldr	r3, [pc, #8]	; (b602c <sock_connect+0xc>)
   b6024:	681b      	ldr	r3, [r3, #0]
   b6026:	6a1b      	ldr	r3, [r3, #32]
   b6028:	9301      	str	r3, [sp, #4]
   b602a:	bd08      	pop	{r3, pc}
   b602c:	00030238 	.word	0x00030238

000b6030 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6030:	b508      	push	{r3, lr}
   b6032:	4b02      	ldr	r3, [pc, #8]	; (b603c <sock_recv+0xc>)
   b6034:	681b      	ldr	r3, [r3, #0]
   b6036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6038:	9301      	str	r3, [sp, #4]
   b603a:	bd08      	pop	{r3, pc}
   b603c:	00030238 	.word	0x00030238

000b6040 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6040:	b508      	push	{r3, lr}
   b6042:	4b02      	ldr	r3, [pc, #8]	; (b604c <sock_send+0xc>)
   b6044:	681b      	ldr	r3, [r3, #0]
   b6046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6048:	9301      	str	r3, [sp, #4]
   b604a:	bd08      	pop	{r3, pc}
   b604c:	00030238 	.word	0x00030238

000b6050 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6050:	b508      	push	{r3, lr}
   b6052:	4b02      	ldr	r3, [pc, #8]	; (b605c <sock_socket+0xc>)
   b6054:	681b      	ldr	r3, [r3, #0]
   b6056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6058:	9301      	str	r3, [sp, #4]
   b605a:	bd08      	pop	{r3, pc}
   b605c:	00030238 	.word	0x00030238

000b6060 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6060:	b508      	push	{r3, lr}
   b6062:	4b02      	ldr	r3, [pc, #8]	; (b606c <hal_spi_begin+0xc>)
   b6064:	681b      	ldr	r3, [r3, #0]
   b6066:	681b      	ldr	r3, [r3, #0]
   b6068:	9301      	str	r3, [sp, #4]
   b606a:	bd08      	pop	{r3, pc}
   b606c:	00030230 	.word	0x00030230

000b6070 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b6070:	b508      	push	{r3, lr}
   b6072:	4b02      	ldr	r3, [pc, #8]	; (b607c <hal_spi_set_bit_order+0xc>)
   b6074:	681b      	ldr	r3, [r3, #0]
   b6076:	689b      	ldr	r3, [r3, #8]
   b6078:	9301      	str	r3, [sp, #4]
   b607a:	bd08      	pop	{r3, pc}
   b607c:	00030230 	.word	0x00030230

000b6080 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b6080:	b508      	push	{r3, lr}
   b6082:	4b02      	ldr	r3, [pc, #8]	; (b608c <hal_spi_set_data_mode+0xc>)
   b6084:	681b      	ldr	r3, [r3, #0]
   b6086:	68db      	ldr	r3, [r3, #12]
   b6088:	9301      	str	r3, [sp, #4]
   b608a:	bd08      	pop	{r3, pc}
   b608c:	00030230 	.word	0x00030230

000b6090 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b6090:	b508      	push	{r3, lr}
   b6092:	4b02      	ldr	r3, [pc, #8]	; (b609c <hal_spi_set_clock_divider+0xc>)
   b6094:	681b      	ldr	r3, [r3, #0]
   b6096:	691b      	ldr	r3, [r3, #16]
   b6098:	9301      	str	r3, [sp, #4]
   b609a:	bd08      	pop	{r3, pc}
   b609c:	00030230 	.word	0x00030230

000b60a0 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b60a0:	b508      	push	{r3, lr}
   b60a2:	4b02      	ldr	r3, [pc, #8]	; (b60ac <hal_spi_transfer+0xc>)
   b60a4:	681b      	ldr	r3, [r3, #0]
   b60a6:	695b      	ldr	r3, [r3, #20]
   b60a8:	9301      	str	r3, [sp, #4]
   b60aa:	bd08      	pop	{r3, pc}
   b60ac:	00030230 	.word	0x00030230

000b60b0 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b60b0:	b508      	push	{r3, lr}
   b60b2:	4b02      	ldr	r3, [pc, #8]	; (b60bc <hal_spi_init+0xc>)
   b60b4:	681b      	ldr	r3, [r3, #0]
   b60b6:	69db      	ldr	r3, [r3, #28]
   b60b8:	9301      	str	r3, [sp, #4]
   b60ba:	bd08      	pop	{r3, pc}
   b60bc:	00030230 	.word	0x00030230

000b60c0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b60c0:	b508      	push	{r3, lr}
   b60c2:	4b02      	ldr	r3, [pc, #8]	; (b60cc <hal_spi_is_enabled+0xc>)
   b60c4:	681b      	ldr	r3, [r3, #0]
   b60c6:	6a1b      	ldr	r3, [r3, #32]
   b60c8:	9301      	str	r3, [sp, #4]
   b60ca:	bd08      	pop	{r3, pc}
   b60cc:	00030230 	.word	0x00030230

000b60d0 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b60d0:	b508      	push	{r3, lr}
   b60d2:	4b02      	ldr	r3, [pc, #8]	; (b60dc <hal_spi_info+0xc>)
   b60d4:	681b      	ldr	r3, [r3, #0]
   b60d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b60d8:	9301      	str	r3, [sp, #4]
   b60da:	bd08      	pop	{r3, pc}
   b60dc:	00030230 	.word	0x00030230

000b60e0 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b60e0:	b508      	push	{r3, lr}
   b60e2:	4b02      	ldr	r3, [pc, #8]	; (b60ec <hal_spi_acquire+0xc>)
   b60e4:	681b      	ldr	r3, [r3, #0]
   b60e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b60e8:	9301      	str	r3, [sp, #4]
   b60ea:	bd08      	pop	{r3, pc}
   b60ec:	00030230 	.word	0x00030230

000b60f0 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b60f0:	b508      	push	{r3, lr}
   b60f2:	4b02      	ldr	r3, [pc, #8]	; (b60fc <hal_spi_release+0xc>)
   b60f4:	681b      	ldr	r3, [r3, #0]
   b60f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b60f8:	9301      	str	r3, [sp, #4]
   b60fa:	bd08      	pop	{r3, pc}
   b60fc:	00030230 	.word	0x00030230

000b6100 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6100:	b508      	push	{r3, lr}
   b6102:	4b02      	ldr	r3, [pc, #8]	; (b610c <HAL_USB_USART_Init+0xc>)
   b6104:	681b      	ldr	r3, [r3, #0]
   b6106:	681b      	ldr	r3, [r3, #0]
   b6108:	9301      	str	r3, [sp, #4]
   b610a:	bd08      	pop	{r3, pc}
   b610c:	0003024c 	.word	0x0003024c

000b6110 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6110:	b508      	push	{r3, lr}
   b6112:	4b02      	ldr	r3, [pc, #8]	; (b611c <HAL_USB_USART_Begin+0xc>)
   b6114:	681b      	ldr	r3, [r3, #0]
   b6116:	685b      	ldr	r3, [r3, #4]
   b6118:	9301      	str	r3, [sp, #4]
   b611a:	bd08      	pop	{r3, pc}
   b611c:	0003024c 	.word	0x0003024c

000b6120 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6120:	b508      	push	{r3, lr}
   b6122:	4b02      	ldr	r3, [pc, #8]	; (b612c <HAL_USB_USART_Available_Data+0xc>)
   b6124:	681b      	ldr	r3, [r3, #0]
   b6126:	691b      	ldr	r3, [r3, #16]
   b6128:	9301      	str	r3, [sp, #4]
   b612a:	bd08      	pop	{r3, pc}
   b612c:	0003024c 	.word	0x0003024c

000b6130 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6130:	b508      	push	{r3, lr}
   b6132:	4b02      	ldr	r3, [pc, #8]	; (b613c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6134:	681b      	ldr	r3, [r3, #0]
   b6136:	695b      	ldr	r3, [r3, #20]
   b6138:	9301      	str	r3, [sp, #4]
   b613a:	bd08      	pop	{r3, pc}
   b613c:	0003024c 	.word	0x0003024c

000b6140 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6140:	b508      	push	{r3, lr}
   b6142:	4b02      	ldr	r3, [pc, #8]	; (b614c <HAL_USB_USART_Receive_Data+0xc>)
   b6144:	681b      	ldr	r3, [r3, #0]
   b6146:	699b      	ldr	r3, [r3, #24]
   b6148:	9301      	str	r3, [sp, #4]
   b614a:	bd08      	pop	{r3, pc}
   b614c:	0003024c 	.word	0x0003024c

000b6150 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6150:	b508      	push	{r3, lr}
   b6152:	4b02      	ldr	r3, [pc, #8]	; (b615c <HAL_USB_USART_Send_Data+0xc>)
   b6154:	681b      	ldr	r3, [r3, #0]
   b6156:	69db      	ldr	r3, [r3, #28]
   b6158:	9301      	str	r3, [sp, #4]
   b615a:	bd08      	pop	{r3, pc}
   b615c:	0003024c 	.word	0x0003024c

000b6160 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6160:	b508      	push	{r3, lr}
   b6162:	4b02      	ldr	r3, [pc, #8]	; (b616c <HAL_USB_USART_Flush_Data+0xc>)
   b6164:	681b      	ldr	r3, [r3, #0]
   b6166:	6a1b      	ldr	r3, [r3, #32]
   b6168:	9301      	str	r3, [sp, #4]
   b616a:	bd08      	pop	{r3, pc}
   b616c:	0003024c 	.word	0x0003024c

000b6170 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b6170:	b508      	push	{r3, lr}
   b6172:	4b02      	ldr	r3, [pc, #8]	; (b617c <HAL_USB_USART_Is_Connected+0xc>)
   b6174:	681b      	ldr	r3, [r3, #0]
   b6176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6178:	9301      	str	r3, [sp, #4]
   b617a:	bd08      	pop	{r3, pc}
   b617c:	0003024c 	.word	0x0003024c

000b6180 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6180:	b508      	push	{r3, lr}
   b6182:	4b02      	ldr	r3, [pc, #8]	; (b618c <panic_+0xc>)
   b6184:	681b      	ldr	r3, [r3, #0]
   b6186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6188:	9301      	str	r3, [sp, #4]
   b618a:	bd08      	pop	{r3, pc}
   b618c:	00030260 	.word	0x00030260

000b6190 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6190:	b508      	push	{r3, lr}
   b6192:	4b02      	ldr	r3, [pc, #8]	; (b619c <log_message+0xc>)
   b6194:	681b      	ldr	r3, [r3, #0]
   b6196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6198:	9301      	str	r3, [sp, #4]
   b619a:	bd08      	pop	{r3, pc}
   b619c:	00030260 	.word	0x00030260

000b61a0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b61a0:	b508      	push	{r3, lr}
   b61a2:	4b02      	ldr	r3, [pc, #8]	; (b61ac <set_system_mode+0xc>)
   b61a4:	681b      	ldr	r3, [r3, #0]
   b61a6:	685b      	ldr	r3, [r3, #4]
   b61a8:	9301      	str	r3, [sp, #4]
   b61aa:	bd08      	pop	{r3, pc}
   b61ac:	00030220 	.word	0x00030220

000b61b0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b61b0:	b508      	push	{r3, lr}
   b61b2:	4b02      	ldr	r3, [pc, #8]	; (b61bc <system_delay_ms+0xc>)
   b61b4:	681b      	ldr	r3, [r3, #0]
   b61b6:	695b      	ldr	r3, [r3, #20]
   b61b8:	9301      	str	r3, [sp, #4]
   b61ba:	bd08      	pop	{r3, pc}
   b61bc:	00030220 	.word	0x00030220

000b61c0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b61c0:	b508      	push	{r3, lr}
   b61c2:	4b03      	ldr	r3, [pc, #12]	; (b61d0 <system_ctrl_set_app_request_handler+0x10>)
   b61c4:	681b      	ldr	r3, [r3, #0]
   b61c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b61ca:	9301      	str	r3, [sp, #4]
   b61cc:	bd08      	pop	{r3, pc}
   b61ce:	0000      	.short	0x0000
   b61d0:	00030220 	.word	0x00030220

000b61d4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b61d4:	b508      	push	{r3, lr}
   b61d6:	4b03      	ldr	r3, [pc, #12]	; (b61e4 <system_ctrl_set_result+0x10>)
   b61d8:	681b      	ldr	r3, [r3, #0]
   b61da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b61de:	9301      	str	r3, [sp, #4]
   b61e0:	bd08      	pop	{r3, pc}
   b61e2:	0000      	.short	0x0000
   b61e4:	00030220 	.word	0x00030220

000b61e8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b61e8:	b508      	push	{r3, lr}
   b61ea:	4b02      	ldr	r3, [pc, #8]	; (b61f4 <network_connect+0xc>)
   b61ec:	681b      	ldr	r3, [r3, #0]
   b61ee:	685b      	ldr	r3, [r3, #4]
   b61f0:	9301      	str	r3, [sp, #4]
   b61f2:	bd08      	pop	{r3, pc}
   b61f4:	00030240 	.word	0x00030240

000b61f8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b61f8:	b508      	push	{r3, lr}
   b61fa:	4b02      	ldr	r3, [pc, #8]	; (b6204 <network_connecting+0xc>)
   b61fc:	681b      	ldr	r3, [r3, #0]
   b61fe:	689b      	ldr	r3, [r3, #8]
   b6200:	9301      	str	r3, [sp, #4]
   b6202:	bd08      	pop	{r3, pc}
   b6204:	00030240 	.word	0x00030240

000b6208 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6208:	b508      	push	{r3, lr}
   b620a:	4b02      	ldr	r3, [pc, #8]	; (b6214 <network_disconnect+0xc>)
   b620c:	681b      	ldr	r3, [r3, #0]
   b620e:	68db      	ldr	r3, [r3, #12]
   b6210:	9301      	str	r3, [sp, #4]
   b6212:	bd08      	pop	{r3, pc}
   b6214:	00030240 	.word	0x00030240

000b6218 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6218:	b508      	push	{r3, lr}
   b621a:	4b02      	ldr	r3, [pc, #8]	; (b6224 <network_ready+0xc>)
   b621c:	681b      	ldr	r3, [r3, #0]
   b621e:	691b      	ldr	r3, [r3, #16]
   b6220:	9301      	str	r3, [sp, #4]
   b6222:	bd08      	pop	{r3, pc}
   b6224:	00030240 	.word	0x00030240

000b6228 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6228:	b508      	push	{r3, lr}
   b622a:	4b02      	ldr	r3, [pc, #8]	; (b6234 <network_on+0xc>)
   b622c:	681b      	ldr	r3, [r3, #0]
   b622e:	695b      	ldr	r3, [r3, #20]
   b6230:	9301      	str	r3, [sp, #4]
   b6232:	bd08      	pop	{r3, pc}
   b6234:	00030240 	.word	0x00030240

000b6238 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6238:	b508      	push	{r3, lr}
   b623a:	4b02      	ldr	r3, [pc, #8]	; (b6244 <network_off+0xc>)
   b623c:	681b      	ldr	r3, [r3, #0]
   b623e:	699b      	ldr	r3, [r3, #24]
   b6240:	9301      	str	r3, [sp, #4]
   b6242:	bd08      	pop	{r3, pc}
   b6244:	00030240 	.word	0x00030240

000b6248 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6248:	b508      	push	{r3, lr}
   b624a:	4b02      	ldr	r3, [pc, #8]	; (b6254 <network_listen+0xc>)
   b624c:	681b      	ldr	r3, [r3, #0]
   b624e:	69db      	ldr	r3, [r3, #28]
   b6250:	9301      	str	r3, [sp, #4]
   b6252:	bd08      	pop	{r3, pc}
   b6254:	00030240 	.word	0x00030240

000b6258 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6258:	b508      	push	{r3, lr}
   b625a:	4b02      	ldr	r3, [pc, #8]	; (b6264 <network_listening+0xc>)
   b625c:	681b      	ldr	r3, [r3, #0]
   b625e:	6a1b      	ldr	r3, [r3, #32]
   b6260:	9301      	str	r3, [sp, #4]
   b6262:	bd08      	pop	{r3, pc}
   b6264:	00030240 	.word	0x00030240

000b6268 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6268:	b508      	push	{r3, lr}
   b626a:	4b02      	ldr	r3, [pc, #8]	; (b6274 <network_set_listen_timeout+0xc>)
   b626c:	681b      	ldr	r3, [r3, #0]
   b626e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6270:	9301      	str	r3, [sp, #4]
   b6272:	bd08      	pop	{r3, pc}
   b6274:	00030240 	.word	0x00030240

000b6278 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6278:	b508      	push	{r3, lr}
   b627a:	4b02      	ldr	r3, [pc, #8]	; (b6284 <network_get_listen_timeout+0xc>)
   b627c:	681b      	ldr	r3, [r3, #0]
   b627e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6280:	9301      	str	r3, [sp, #4]
   b6282:	bd08      	pop	{r3, pc}
   b6284:	00030240 	.word	0x00030240

000b6288 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6288:	b508      	push	{r3, lr}
   b628a:	4b02      	ldr	r3, [pc, #8]	; (b6294 <network_is_on+0xc>)
   b628c:	681b      	ldr	r3, [r3, #0]
   b628e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6290:	9301      	str	r3, [sp, #4]
   b6292:	bd08      	pop	{r3, pc}
   b6294:	00030240 	.word	0x00030240

000b6298 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6298:	b508      	push	{r3, lr}
   b629a:	4b02      	ldr	r3, [pc, #8]	; (b62a4 <network_is_off+0xc>)
   b629c:	681b      	ldr	r3, [r3, #0]
   b629e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b62a0:	9301      	str	r3, [sp, #4]
   b62a2:	bd08      	pop	{r3, pc}
   b62a4:	00030240 	.word	0x00030240

000b62a8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b62a8:	b508      	push	{r3, lr}
   b62aa:	4b02      	ldr	r3, [pc, #8]	; (b62b4 <spark_process+0xc>)
   b62ac:	681b      	ldr	r3, [r3, #0]
   b62ae:	689b      	ldr	r3, [r3, #8]
   b62b0:	9301      	str	r3, [sp, #4]
   b62b2:	bd08      	pop	{r3, pc}
   b62b4:	00030244 	.word	0x00030244

000b62b8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b62b8:	b508      	push	{r3, lr}
   b62ba:	4b02      	ldr	r3, [pc, #8]	; (b62c4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b62bc:	681b      	ldr	r3, [r3, #0]
   b62be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b62c0:	9301      	str	r3, [sp, #4]
   b62c2:	bd08      	pop	{r3, pc}
   b62c4:	00030244 	.word	0x00030244

000b62c8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b62c8:	b508      	push	{r3, lr}
   b62ca:	4b02      	ldr	r3, [pc, #8]	; (b62d4 <malloc+0xc>)
   b62cc:	681b      	ldr	r3, [r3, #0]
   b62ce:	681b      	ldr	r3, [r3, #0]
   b62d0:	9301      	str	r3, [sp, #4]
   b62d2:	bd08      	pop	{r3, pc}
   b62d4:	0003021c 	.word	0x0003021c

000b62d8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b62d8:	b508      	push	{r3, lr}
   b62da:	4b02      	ldr	r3, [pc, #8]	; (b62e4 <free+0xc>)
   b62dc:	681b      	ldr	r3, [r3, #0]
   b62de:	685b      	ldr	r3, [r3, #4]
   b62e0:	9301      	str	r3, [sp, #4]
   b62e2:	bd08      	pop	{r3, pc}
   b62e4:	0003021c 	.word	0x0003021c

000b62e8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b62e8:	b508      	push	{r3, lr}
   b62ea:	4b02      	ldr	r3, [pc, #8]	; (b62f4 <realloc+0xc>)
   b62ec:	681b      	ldr	r3, [r3, #0]
   b62ee:	689b      	ldr	r3, [r3, #8]
   b62f0:	9301      	str	r3, [sp, #4]
   b62f2:	bd08      	pop	{r3, pc}
   b62f4:	0003021c 	.word	0x0003021c

000b62f8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b62f8:	b508      	push	{r3, lr}
   b62fa:	4b02      	ldr	r3, [pc, #8]	; (b6304 <vsnprintf+0xc>)
   b62fc:	681b      	ldr	r3, [r3, #0]
   b62fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6300:	9301      	str	r3, [sp, #4]
   b6302:	bd08      	pop	{r3, pc}
   b6304:	0003021c 	.word	0x0003021c

000b6308 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6308:	b508      	push	{r3, lr}
   b630a:	4b02      	ldr	r3, [pc, #8]	; (b6314 <__errno+0xc>)
   b630c:	681b      	ldr	r3, [r3, #0]
   b630e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6310:	9301      	str	r3, [sp, #4]
   b6312:	bd08      	pop	{r3, pc}
   b6314:	0003021c 	.word	0x0003021c

000b6318 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6318:	b508      	push	{r3, lr}
   b631a:	4b02      	ldr	r3, [pc, #8]	; (b6324 <__assert_func+0xc>)
   b631c:	681b      	ldr	r3, [r3, #0]
   b631e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6320:	9301      	str	r3, [sp, #4]
   b6322:	bd08      	pop	{r3, pc}
   b6324:	0003021c 	.word	0x0003021c

000b6328 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6328:	b508      	push	{r3, lr}
   b632a:	4b02      	ldr	r3, [pc, #8]	; (b6334 <newlib_impure_ptr_callback+0xc>)
   b632c:	681b      	ldr	r3, [r3, #0]
   b632e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6330:	9301      	str	r3, [sp, #4]
   b6332:	bd08      	pop	{r3, pc}
   b6334:	0003021c 	.word	0x0003021c

000b6338 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6338:	2200      	movs	r2, #0
   b633a:	6840      	ldr	r0, [r0, #4]
   b633c:	4611      	mov	r1, r2
   b633e:	f7ff bf8b 	b.w	b6258 <network_listening>

000b6342 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6342:	2200      	movs	r2, #0
   b6344:	6840      	ldr	r0, [r0, #4]
   b6346:	4611      	mov	r1, r2
   b6348:	f7ff bf96 	b.w	b6278 <network_get_listen_timeout>

000b634c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b634c:	6840      	ldr	r0, [r0, #4]
   b634e:	2200      	movs	r2, #0
   b6350:	f7ff bf8a 	b.w	b6268 <network_set_listen_timeout>

000b6354 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6354:	6840      	ldr	r0, [r0, #4]
   b6356:	2200      	movs	r2, #0
   b6358:	f081 0101 	eor.w	r1, r1, #1
   b635c:	f7ff bf74 	b.w	b6248 <network_listen>

000b6360 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6360:	2300      	movs	r3, #0
   b6362:	6840      	ldr	r0, [r0, #4]
   b6364:	461a      	mov	r2, r3
   b6366:	4619      	mov	r1, r3
   b6368:	f7ff bf66 	b.w	b6238 <network_off>

000b636c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b636c:	2300      	movs	r3, #0
   b636e:	6840      	ldr	r0, [r0, #4]
   b6370:	461a      	mov	r2, r3
   b6372:	4619      	mov	r1, r3
   b6374:	f7ff bf58 	b.w	b6228 <network_on>

000b6378 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6378:	2200      	movs	r2, #0
   b637a:	6840      	ldr	r0, [r0, #4]
   b637c:	4611      	mov	r1, r2
   b637e:	f7ff bf4b 	b.w	b6218 <network_ready>

000b6382 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6382:	2200      	movs	r2, #0
   b6384:	6840      	ldr	r0, [r0, #4]
   b6386:	4611      	mov	r1, r2
   b6388:	f7ff bf36 	b.w	b61f8 <network_connecting>

000b638c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b638c:	6840      	ldr	r0, [r0, #4]
   b638e:	2200      	movs	r2, #0
   b6390:	2102      	movs	r1, #2
   b6392:	f7ff bf39 	b.w	b6208 <network_disconnect>

000b6396 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6396:	2300      	movs	r3, #0
   b6398:	6840      	ldr	r0, [r0, #4]
   b639a:	461a      	mov	r2, r3
   b639c:	f7ff bf24 	b.w	b61e8 <network_connect>

000b63a0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b63a0:	4b02      	ldr	r3, [pc, #8]	; (b63ac <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b63a2:	2203      	movs	r2, #3
   b63a4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b63a6:	4a02      	ldr	r2, [pc, #8]	; (b63b0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b63a8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b63aa:	4770      	bx	lr
   b63ac:	2003e6c4 	.word	0x2003e6c4
   b63b0:	000b8eec 	.word	0x000b8eec

000b63b4 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b63b4:	2100      	movs	r1, #0
   b63b6:	f7ff be9b 	b.w	b60f0 <hal_spi_release>

000b63ba <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b63ba:	2100      	movs	r1, #0
   b63bc:	f7ff be90 	b.w	b60e0 <hal_spi_acquire>

000b63c0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b63c0:	b510      	push	{r4, lr}
   b63c2:	4604      	mov	r4, r0
   b63c4:	4608      	mov	r0, r1
{
    _spi = spi;
   b63c6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b63c8:	f7ff fe72 	bl	b60b0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b63cc:	2300      	movs	r3, #0
   b63ce:	6063      	str	r3, [r4, #4]
}
   b63d0:	4620      	mov	r0, r4
   b63d2:	bd10      	pop	{r4, pc}

000b63d4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b63d4:	b513      	push	{r0, r1, r4, lr}
   b63d6:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b63d8:	7800      	ldrb	r0, [r0, #0]
   b63da:	f7ff ffee 	bl	b63ba <_ZN8SPIClass4lockEv.isra.0>
   b63de:	b958      	cbnz	r0, b63f8 <_ZN8SPIClass5beginEv+0x24>
   b63e0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b63e2:	9001      	str	r0, [sp, #4]
   b63e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b63e8:	f7ff fe3a 	bl	b6060 <hal_spi_begin>
        unlock();
   b63ec:	9801      	ldr	r0, [sp, #4]
    }
}
   b63ee:	b002      	add	sp, #8
   b63f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b63f4:	f7ff bfde 	b.w	b63b4 <_ZN8SPIClass6unlockEv.isra.0>
   b63f8:	b002      	add	sp, #8
   b63fa:	bd10      	pop	{r4, pc}

000b63fc <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b63fc:	b513      	push	{r0, r1, r4, lr}
   b63fe:	4604      	mov	r4, r0
    if (!lock())
   b6400:	7800      	ldrb	r0, [r0, #0]
{
   b6402:	9101      	str	r1, [sp, #4]
    if (!lock())
   b6404:	f7ff ffd9 	bl	b63ba <_ZN8SPIClass4lockEv.isra.0>
   b6408:	9901      	ldr	r1, [sp, #4]
   b640a:	b948      	cbnz	r0, b6420 <_ZN8SPIClass11setBitOrderEh+0x24>
   b640c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b640e:	9001      	str	r0, [sp, #4]
   b6410:	f7ff fe2e 	bl	b6070 <hal_spi_set_bit_order>
        unlock();
   b6414:	9801      	ldr	r0, [sp, #4]
    }
}
   b6416:	b002      	add	sp, #8
   b6418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b641c:	f7ff bfca 	b.w	b63b4 <_ZN8SPIClass6unlockEv.isra.0>
   b6420:	b002      	add	sp, #8
   b6422:	bd10      	pop	{r4, pc}

000b6424 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b6424:	b513      	push	{r0, r1, r4, lr}
   b6426:	4604      	mov	r4, r0
    if (!lock())
   b6428:	7800      	ldrb	r0, [r0, #0]
{
   b642a:	9101      	str	r1, [sp, #4]
    if (!lock())
   b642c:	f7ff ffc5 	bl	b63ba <_ZN8SPIClass4lockEv.isra.0>
   b6430:	9901      	ldr	r1, [sp, #4]
   b6432:	b948      	cbnz	r0, b6448 <_ZN8SPIClass11setDataModeEh+0x24>
   b6434:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b6436:	9001      	str	r0, [sp, #4]
   b6438:	f7ff fe22 	bl	b6080 <hal_spi_set_data_mode>
        unlock();
   b643c:	9801      	ldr	r0, [sp, #4]
    }
}
   b643e:	b002      	add	sp, #8
   b6440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6444:	f7ff bfb6 	b.w	b63b4 <_ZN8SPIClass6unlockEv.isra.0>
   b6448:	b002      	add	sp, #8
   b644a:	bd10      	pop	{r4, pc}

000b644c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b644c:	0840      	lsrs	r0, r0, #1
{
   b644e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b6450:	6018      	str	r0, [r3, #0]
   b6452:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b6454:	6818      	ldr	r0, [r3, #0]
   b6456:	4288      	cmp	r0, r1
   b6458:	b2e5      	uxtb	r5, r4
   b645a:	d906      	bls.n	b646a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b645c:	3401      	adds	r4, #1
   b645e:	2c08      	cmp	r4, #8
   b6460:	d002      	beq.n	b6468 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b6462:	0840      	lsrs	r0, r0, #1
   b6464:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b6466:	e7f5      	b.n	b6454 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6468:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b646a:	4b02      	ldr	r3, [pc, #8]	; (b6474 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b646c:	5d5b      	ldrb	r3, [r3, r5]
   b646e:	7013      	strb	r3, [r2, #0]
}
   b6470:	bd30      	pop	{r4, r5, pc}
   b6472:	bf00      	nop
   b6474:	000b8f20 	.word	0x000b8f20

000b6478 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b6478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b647c:	b088      	sub	sp, #32
    unsigned clock = 0;
   b647e:	2300      	movs	r3, #0
{
   b6480:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b6482:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b6484:	9302      	str	r3, [sp, #8]
{
   b6486:	460e      	mov	r6, r1
   b6488:	4617      	mov	r7, r2
    if (!lock())
   b648a:	f7ff ff96 	bl	b63ba <_ZN8SPIClass4lockEv.isra.0>
   b648e:	4605      	mov	r5, r0
   b6490:	bb00      	cbnz	r0, b64d4 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b6492:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b6496:	4601      	mov	r1, r0
   b6498:	2214      	movs	r2, #20
   b649a:	a803      	add	r0, sp, #12
   b649c:	f001 ff26 	bl	b82ec <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b64a0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b64a2:	462a      	mov	r2, r5
   b64a4:	a903      	add	r1, sp, #12
   b64a6:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b64a8:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b64ac:	f7ff fe10 	bl	b60d0 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b64b0:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b64b2:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b64b6:	ab02      	add	r3, sp, #8
   b64b8:	f10d 0207 	add.w	r2, sp, #7
   b64bc:	fb07 f106 	mul.w	r1, r7, r6
   b64c0:	f7ff ffc4 	bl	b644c <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b64c4:	7820      	ldrb	r0, [r4, #0]
   b64c6:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b64ca:	f7ff fde1 	bl	b6090 <hal_spi_set_clock_divider>
        unlock();
   b64ce:	7820      	ldrb	r0, [r4, #0]
   b64d0:	f7ff ff70 	bl	b63b4 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b64d4:	9802      	ldr	r0, [sp, #8]
   b64d6:	b008      	add	sp, #32
   b64d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b64dc <_ZN8SPIClass15setClockDividerEh>:
{
   b64dc:	b538      	push	{r3, r4, r5, lr}
   b64de:	4604      	mov	r4, r0
    if (!lock())
   b64e0:	7800      	ldrb	r0, [r0, #0]
{
   b64e2:	460d      	mov	r5, r1
    if (!lock())
   b64e4:	f7ff ff69 	bl	b63ba <_ZN8SPIClass4lockEv.isra.0>
   b64e8:	4603      	mov	r3, r0
   b64ea:	b9d0      	cbnz	r0, b6522 <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b64ec:	6861      	ldr	r1, [r4, #4]
   b64ee:	b199      	cbz	r1, b6518 <_ZN8SPIClass15setClockDividerEh+0x3c>
   b64f0:	4a0c      	ldr	r2, [pc, #48]	; (b6524 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b64f2:	f812 0b01 	ldrb.w	r0, [r2], #1
   b64f6:	4285      	cmp	r5, r0
   b64f8:	d002      	beq.n	b6500 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b64fa:	3301      	adds	r3, #1
   b64fc:	2b08      	cmp	r3, #8
   b64fe:	d1f8      	bne.n	b64f2 <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b6500:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b6502:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b6504:	2201      	movs	r2, #1
   b6506:	40d9      	lsrs	r1, r3
   b6508:	4620      	mov	r0, r4
   b650a:	f7ff ffb5 	bl	b6478 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b650e:	7820      	ldrb	r0, [r4, #0]
}
   b6510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b6514:	f7ff bf4e 	b.w	b63b4 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b6518:	7820      	ldrb	r0, [r4, #0]
   b651a:	4629      	mov	r1, r5
   b651c:	f7ff fdb8 	bl	b6090 <hal_spi_set_clock_divider>
   b6520:	e7f5      	b.n	b650e <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b6522:	bd38      	pop	{r3, r4, r5, pc}
   b6524:	000b8f20 	.word	0x000b8f20

000b6528 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b6528:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b652a:	7800      	ldrb	r0, [r0, #0]
   b652c:	f7ff fdb8 	bl	b60a0 <hal_spi_transfer>
}
   b6530:	b2c0      	uxtb	r0, r0
   b6532:	bd08      	pop	{r3, pc}

000b6534 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6534:	4b05      	ldr	r3, [pc, #20]	; (b654c <_GLOBAL__sub_I_System+0x18>)
   b6536:	2202      	movs	r2, #2
   b6538:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b653a:	4b05      	ldr	r3, [pc, #20]	; (b6550 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b653c:	4a05      	ldr	r2, [pc, #20]	; (b6554 <_GLOBAL__sub_I_System+0x20>)
   b653e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6540:	2000      	movs	r0, #0
   b6542:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6546:	f7ff be2b 	b.w	b61a0 <set_system_mode>
   b654a:	bf00      	nop
   b654c:	2003e6d8 	.word	0x2003e6d8
   b6550:	2003e6cc 	.word	0x2003e6cc
   b6554:	ffff0000 	.word	0xffff0000

000b6558 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b6558:	b510      	push	{r4, lr}
   b655a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b655c:	f001 ff0e 	bl	b837c <strlen>
   b6560:	3801      	subs	r0, #1
   b6562:	1823      	adds	r3, r4, r0
   b6564:	4620      	mov	r0, r4
	while(i<j){
   b6566:	4283      	cmp	r3, r0
   b6568:	d906      	bls.n	b6578 <_Z11str_reversePc+0x20>
		c = *i;
   b656a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b656c:	7819      	ldrb	r1, [r3, #0]
   b656e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b6572:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b6576:	e7f6      	b.n	b6566 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b6578:	bd10      	pop	{r4, pc}

000b657a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b657a:	b570      	push	{r4, r5, r6, lr}
   b657c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b657e:	1e91      	subs	r1, r2, #2
   b6580:	2922      	cmp	r1, #34	; 0x22
   b6582:	d81d      	bhi.n	b65c0 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b6584:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b6586:	b930      	cbnz	r0, b6596 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b6588:	4423      	add	r3, r4
            *ptr++ = '0';
   b658a:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b658c:	429d      	cmp	r5, r3
   b658e:	d210      	bcs.n	b65b2 <ultoa+0x38>
            *ptr++ = '0';
   b6590:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b6594:	e7fa      	b.n	b658c <ultoa+0x12>
            result.quot = a/radix;
   b6596:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b659a:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b659e:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b65a0:	2809      	cmp	r0, #9
                *ptr += '0';
   b65a2:	bf94      	ite	ls
   b65a4:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b65a6:	3157      	addhi	r1, #87	; 0x57
   b65a8:	b2c9      	uxtb	r1, r1
   b65aa:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b65ae:	4630      	mov	r0, r6
	while(a){
   b65b0:	e7e9      	b.n	b6586 <ultoa+0xc>

	*ptr = '\0';
   b65b2:	2300      	movs	r3, #0
	str_reverse(buffer);
   b65b4:	4620      	mov	r0, r4
	*ptr = '\0';
   b65b6:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b65b8:	f7ff ffce 	bl	b6558 <_Z11str_reversePc>
	return buffer;
   b65bc:	4620      	mov	r0, r4
}
   b65be:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b65c0:	2000      	movs	r0, #0
   b65c2:	e7fc      	b.n	b65be <ultoa+0x44>

000b65c4 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b65c4:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b65c6:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b65c8:	460c      	mov	r4, r1
   b65ca:	4615      	mov	r5, r2
	if(a<0){
   b65cc:	da0e      	bge.n	b65ec <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b65ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b65d2:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b65d6:	bf14      	ite	ne
   b65d8:	4258      	negne	r0, r3
   b65da:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b65dc:	2301      	movs	r3, #1
		*buffer = '-';
   b65de:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b65e0:	462a      	mov	r2, r5
   b65e2:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b65e4:	f7ff ffc9 	bl	b657a <ultoa>
	}
	return buffer;
}
   b65e8:	4620      	mov	r0, r4
   b65ea:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b65ec:	2301      	movs	r3, #1
   b65ee:	e7f9      	b.n	b65e4 <itoa+0x20>

000b65f0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b65f0:	b510      	push	{r4, lr}
   b65f2:	4604      	mov	r4, r0
{
	free(buffer);
   b65f4:	6800      	ldr	r0, [r0, #0]
   b65f6:	f7ff fe6f 	bl	b62d8 <free>
}
   b65fa:	4620      	mov	r0, r4
   b65fc:	bd10      	pop	{r4, pc}

000b65fe <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b65fe:	b510      	push	{r4, lr}
   b6600:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6602:	6800      	ldr	r0, [r0, #0]
   b6604:	b108      	cbz	r0, b660a <_ZN6String10invalidateEv+0xc>
   b6606:	f7ff fe67 	bl	b62d8 <free>
	buffer = NULL;
   b660a:	2300      	movs	r3, #0
	capacity = len = 0;
   b660c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6610:	6023      	str	r3, [r4, #0]
}
   b6612:	bd10      	pop	{r4, pc}

000b6614 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6614:	b538      	push	{r3, r4, r5, lr}
   b6616:	4604      	mov	r4, r0
   b6618:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b661a:	6800      	ldr	r0, [r0, #0]
   b661c:	3101      	adds	r1, #1
   b661e:	f7ff fe63 	bl	b62e8 <realloc>
	if (newbuffer) {
   b6622:	b110      	cbz	r0, b662a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6624:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6628:	2001      	movs	r0, #1
	}
	return 0;
}
   b662a:	bd38      	pop	{r3, r4, r5, pc}

000b662c <_ZN6String7reserveEj>:
{
   b662c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b662e:	6803      	ldr	r3, [r0, #0]
{
   b6630:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b6632:	b123      	cbz	r3, b663e <_ZN6String7reserveEj+0x12>
   b6634:	6843      	ldr	r3, [r0, #4]
   b6636:	428b      	cmp	r3, r1
   b6638:	d301      	bcc.n	b663e <_ZN6String7reserveEj+0x12>
   b663a:	2001      	movs	r0, #1
}
   b663c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b663e:	4620      	mov	r0, r4
   b6640:	f7ff ffe8 	bl	b6614 <_ZN6String12changeBufferEj>
   b6644:	2800      	cmp	r0, #0
   b6646:	d0f9      	beq.n	b663c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b6648:	68a3      	ldr	r3, [r4, #8]
   b664a:	2b00      	cmp	r3, #0
   b664c:	d1f5      	bne.n	b663a <_ZN6String7reserveEj+0xe>
   b664e:	6822      	ldr	r2, [r4, #0]
   b6650:	7013      	strb	r3, [r2, #0]
   b6652:	e7f2      	b.n	b663a <_ZN6String7reserveEj+0xe>

000b6654 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6654:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6656:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b6658:	4611      	mov	r1, r2
   b665a:	9201      	str	r2, [sp, #4]
{
   b665c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b665e:	f7ff ffe5 	bl	b662c <_ZN6String7reserveEj>
   b6662:	9a01      	ldr	r2, [sp, #4]
   b6664:	b928      	cbnz	r0, b6672 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b6666:	4620      	mov	r0, r4
   b6668:	f7ff ffc9 	bl	b65fe <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b666c:	4620      	mov	r0, r4
   b666e:	b003      	add	sp, #12
   b6670:	bd30      	pop	{r4, r5, pc}
	len = length;
   b6672:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6674:	4629      	mov	r1, r5
   b6676:	6820      	ldr	r0, [r4, #0]
   b6678:	f001 fe2a 	bl	b82d0 <memcpy>
	buffer[len] = 0;
   b667c:	6822      	ldr	r2, [r4, #0]
   b667e:	68a3      	ldr	r3, [r4, #8]
   b6680:	2100      	movs	r1, #0
   b6682:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6684:	e7f2      	b.n	b666c <_ZN6String4copyEPKcj+0x18>

000b6686 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b6686:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6688:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b668a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b668e:	4604      	mov	r4, r0
	len = 0;
   b6690:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6692:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6694:	b141      	cbz	r1, b66a8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b6696:	4608      	mov	r0, r1
   b6698:	9101      	str	r1, [sp, #4]
   b669a:	f001 fe6f 	bl	b837c <strlen>
   b669e:	9901      	ldr	r1, [sp, #4]
   b66a0:	4602      	mov	r2, r0
   b66a2:	4620      	mov	r0, r4
   b66a4:	f7ff ffd6 	bl	b6654 <_ZN6String4copyEPKcj>
}
   b66a8:	4620      	mov	r0, r4
   b66aa:	b002      	add	sp, #8
   b66ac:	bd10      	pop	{r4, pc}

000b66ae <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b66ae:	4288      	cmp	r0, r1
{
   b66b0:	b510      	push	{r4, lr}
   b66b2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b66b4:	d005      	beq.n	b66c2 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b66b6:	680b      	ldr	r3, [r1, #0]
   b66b8:	b12b      	cbz	r3, b66c6 <_ZN6StringaSERKS_+0x18>
   b66ba:	688a      	ldr	r2, [r1, #8]
   b66bc:	4619      	mov	r1, r3
   b66be:	f7ff ffc9 	bl	b6654 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b66c2:	4620      	mov	r0, r4
   b66c4:	bd10      	pop	{r4, pc}
	else invalidate();
   b66c6:	f7ff ff9a 	bl	b65fe <_ZN6String10invalidateEv>
   b66ca:	e7fa      	b.n	b66c2 <_ZN6StringaSERKS_+0x14>

000b66cc <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b66cc:	b510      	push	{r4, lr}
	buffer = NULL;
   b66ce:	2300      	movs	r3, #0
String::String(const String &value)
   b66d0:	4604      	mov	r4, r0
	capacity = 0;
   b66d2:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b66d6:	6083      	str	r3, [r0, #8]
	flags = 0;
   b66d8:	7303      	strb	r3, [r0, #12]
	*this = value;
   b66da:	f7ff ffe8 	bl	b66ae <_ZN6StringaSERKS_>
}
   b66de:	4620      	mov	r0, r4
   b66e0:	bd10      	pop	{r4, pc}

000b66e2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b66e2:	b513      	push	{r0, r1, r4, lr}
   b66e4:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b66e6:	b159      	cbz	r1, b6700 <_ZN6StringaSEPKc+0x1e>
   b66e8:	4608      	mov	r0, r1
   b66ea:	9101      	str	r1, [sp, #4]
   b66ec:	f001 fe46 	bl	b837c <strlen>
   b66f0:	9901      	ldr	r1, [sp, #4]
   b66f2:	4602      	mov	r2, r0
   b66f4:	4620      	mov	r0, r4
   b66f6:	f7ff ffad 	bl	b6654 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b66fa:	4620      	mov	r0, r4
   b66fc:	b002      	add	sp, #8
   b66fe:	bd10      	pop	{r4, pc}
	else invalidate();
   b6700:	f7ff ff7d 	bl	b65fe <_ZN6String10invalidateEv>
   b6704:	e7f9      	b.n	b66fa <_ZN6StringaSEPKc+0x18>

000b6706 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b6706:	b510      	push	{r4, lr}
   b6708:	4604      	mov	r4, r0
   b670a:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b670c:	2300      	movs	r3, #0
	capacity = 0;
   b670e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b6712:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b6714:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b6716:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b6718:	a901      	add	r1, sp, #4
   b671a:	f7ff ff53 	bl	b65c4 <itoa>
	*this = buf;
   b671e:	a901      	add	r1, sp, #4
   b6720:	4620      	mov	r0, r4
   b6722:	f7ff ffde 	bl	b66e2 <_ZN6StringaSEPKc>
}
   b6726:	4620      	mov	r0, r4
   b6728:	b00a      	add	sp, #40	; 0x28
   b672a:	bd10      	pop	{r4, pc}

000b672c <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b672c:	b570      	push	{r4, r5, r6, lr}
   b672e:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b6730:	460e      	mov	r6, r1
   b6732:	b909      	cbnz	r1, b6738 <_ZN6String6concatEPKcj+0xc>
   b6734:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b6736:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b6738:	b16a      	cbz	r2, b6756 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b673a:	6884      	ldr	r4, [r0, #8]
   b673c:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b673e:	4621      	mov	r1, r4
   b6740:	f7ff ff74 	bl	b662c <_ZN6String7reserveEj>
   b6744:	2800      	cmp	r0, #0
   b6746:	d0f5      	beq.n	b6734 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b6748:	6828      	ldr	r0, [r5, #0]
   b674a:	68ab      	ldr	r3, [r5, #8]
   b674c:	4631      	mov	r1, r6
   b674e:	4418      	add	r0, r3
   b6750:	f001 fe0c 	bl	b836c <strcpy>
	len = newlen;
   b6754:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b6756:	2001      	movs	r0, #1
   b6758:	e7ed      	b.n	b6736 <_ZN6String6concatEPKcj+0xa>

000b675a <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   b675a:	b513      	push	{r0, r1, r4, lr}
   b675c:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   b675e:	4608      	mov	r0, r1
	if (!cstr) return 0;
   b6760:	b151      	cbz	r1, b6778 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   b6762:	9101      	str	r1, [sp, #4]
   b6764:	f001 fe0a 	bl	b837c <strlen>
   b6768:	9901      	ldr	r1, [sp, #4]
   b676a:	4602      	mov	r2, r0
   b676c:	4620      	mov	r0, r4
}
   b676e:	b002      	add	sp, #8
   b6770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   b6774:	f7ff bfda 	b.w	b672c <_ZN6String6concatEPKcj>
}
   b6778:	b002      	add	sp, #8
   b677a:	bd10      	pop	{r4, pc}

000b677c <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b677c:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b677e:	2300      	movs	r3, #0
	buf[0] = c;
   b6780:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b6784:	2201      	movs	r2, #1
   b6786:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b6788:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b678c:	f7ff ffce 	bl	b672c <_ZN6String6concatEPKcj>
}
   b6790:	b003      	add	sp, #12
   b6792:	f85d fb04 	ldr.w	pc, [sp], #4

000b6796 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b6796:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b6798:	688a      	ldr	r2, [r1, #8]
   b679a:	6809      	ldr	r1, [r1, #0]
{
   b679c:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b679e:	f7ff ffc5 	bl	b672c <_ZN6String6concatEPKcj>
   b67a2:	b910      	cbnz	r0, b67aa <_ZplRK15StringSumHelperRK6String+0x14>
   b67a4:	4620      	mov	r0, r4
   b67a6:	f7ff ff2a 	bl	b65fe <_ZN6String10invalidateEv>
	return a;
}
   b67aa:	4620      	mov	r0, r4
   b67ac:	bd10      	pop	{r4, pc}

000b67ae <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b67ae:	b513      	push	{r0, r1, r4, lr}
   b67b0:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b67b2:	b929      	cbnz	r1, b67c0 <_ZplRK15StringSumHelperPKc+0x12>
   b67b4:	4620      	mov	r0, r4
   b67b6:	f7ff ff22 	bl	b65fe <_ZN6String10invalidateEv>
	return a;
}
   b67ba:	4620      	mov	r0, r4
   b67bc:	b002      	add	sp, #8
   b67be:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b67c0:	4608      	mov	r0, r1
   b67c2:	9101      	str	r1, [sp, #4]
   b67c4:	f001 fdda 	bl	b837c <strlen>
   b67c8:	9901      	ldr	r1, [sp, #4]
   b67ca:	4602      	mov	r2, r0
   b67cc:	4620      	mov	r0, r4
   b67ce:	f7ff ffad 	bl	b672c <_ZN6String6concatEPKcj>
   b67d2:	2800      	cmp	r0, #0
   b67d4:	d0ee      	beq.n	b67b4 <_ZplRK15StringSumHelperPKc+0x6>
   b67d6:	e7f0      	b.n	b67ba <_ZplRK15StringSumHelperPKc+0xc>

000b67d8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b67d8:	4802      	ldr	r0, [pc, #8]	; (b67e4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b67da:	2300      	movs	r3, #0
   b67dc:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b67de:	f7ff bb57 	b.w	b5e90 <os_mutex_recursive_create>
   b67e2:	bf00      	nop
   b67e4:	2003e6dc 	.word	0x2003e6dc

000b67e8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b67e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b67ea:	4606      	mov	r6, r0
   b67ec:	460d      	mov	r5, r1
  size_t n = 0;
   b67ee:	188f      	adds	r7, r1, r2
   b67f0:	2400      	movs	r4, #0
  while (size--) {
   b67f2:	42bd      	cmp	r5, r7
   b67f4:	d00c      	beq.n	b6810 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b67f6:	6833      	ldr	r3, [r6, #0]
   b67f8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b67fc:	689b      	ldr	r3, [r3, #8]
   b67fe:	4630      	mov	r0, r6
   b6800:	4798      	blx	r3
     if (chunk>=0)
   b6802:	1e03      	subs	r3, r0, #0
   b6804:	db01      	blt.n	b680a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6806:	441c      	add	r4, r3
  while (size--) {
   b6808:	e7f3      	b.n	b67f2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b680a:	2c00      	cmp	r4, #0
   b680c:	bf08      	it	eq
   b680e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6810:	4620      	mov	r0, r4
   b6812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6814 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b6814:	b513      	push	{r0, r1, r4, lr}
   b6816:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b6818:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b681a:	b159      	cbz	r1, b6834 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b681c:	9101      	str	r1, [sp, #4]
   b681e:	f001 fdad 	bl	b837c <strlen>
   b6822:	6823      	ldr	r3, [r4, #0]
   b6824:	9901      	ldr	r1, [sp, #4]
   b6826:	68db      	ldr	r3, [r3, #12]
   b6828:	4602      	mov	r2, r0
   b682a:	4620      	mov	r0, r4
    }
   b682c:	b002      	add	sp, #8
   b682e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6832:	4718      	bx	r3
    }
   b6834:	b002      	add	sp, #8
   b6836:	bd10      	pop	{r4, pc}

000b6838 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b6838:	b508      	push	{r3, lr}
  return write(str);
   b683a:	f7ff ffeb 	bl	b6814 <_ZN5Print5writeEPKc>
}
   b683e:	bd08      	pop	{r3, pc}

000b6840 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b6840:	6803      	ldr	r3, [r0, #0]
   b6842:	689b      	ldr	r3, [r3, #8]
   b6844:	4718      	bx	r3

000b6846 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6846:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6848:	210d      	movs	r1, #13
{
   b684a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b684c:	f7ff fff8 	bl	b6840 <_ZN5Print5printEc>
  n += print('\n');
   b6850:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6852:	4604      	mov	r4, r0
  n += print('\n');
   b6854:	4628      	mov	r0, r5
   b6856:	f7ff fff3 	bl	b6840 <_ZN5Print5printEc>
  return n;
}
   b685a:	4420      	add	r0, r4
   b685c:	bd38      	pop	{r3, r4, r5, pc}

000b685e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b685e:	b538      	push	{r3, r4, r5, lr}
   b6860:	4605      	mov	r5, r0
  return write(str);
   b6862:	f7ff ffd7 	bl	b6814 <_ZN5Print5writeEPKc>
   b6866:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b6868:	4628      	mov	r0, r5
   b686a:	f7ff ffec 	bl	b6846 <_ZN5Print7printlnEv>
  return n;
}
   b686e:	4420      	add	r0, r4
   b6870:	bd38      	pop	{r3, r4, r5, pc}

000b6872 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6872:	b530      	push	{r4, r5, lr}
   b6874:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6876:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6878:	2a01      	cmp	r2, #1
  *str = '\0';
   b687a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b687e:	bf98      	it	ls
   b6880:	220a      	movls	r2, #10
   b6882:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6884:	460d      	mov	r5, r1
   b6886:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b688a:	fb01 5312 	mls	r3, r1, r2, r5
   b688e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6892:	2b09      	cmp	r3, #9
   b6894:	bf94      	ite	ls
   b6896:	3330      	addls	r3, #48	; 0x30
   b6898:	3337      	addhi	r3, #55	; 0x37
   b689a:	b2db      	uxtb	r3, r3
  } while(n);
   b689c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b689e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b68a2:	d9ef      	bls.n	b6884 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b68a4:	4621      	mov	r1, r4
   b68a6:	f7ff ffb5 	bl	b6814 <_ZN5Print5writeEPKc>
}
   b68aa:	b00b      	add	sp, #44	; 0x2c
   b68ac:	bd30      	pop	{r4, r5, pc}

000b68ae <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b68ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b68b2:	b086      	sub	sp, #24
   b68b4:	af00      	add	r7, sp, #0
   b68b6:	4605      	mov	r5, r0
   b68b8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b68ba:	1d38      	adds	r0, r7, #4
   b68bc:	2114      	movs	r1, #20
{
   b68be:	4614      	mov	r4, r2
    va_copy(args2, args);
   b68c0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b68c2:	f7ff fd19 	bl	b62f8 <vsnprintf>

    if (n<bufsize)
   b68c6:	2813      	cmp	r0, #19
   b68c8:	d80e      	bhi.n	b68e8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b68ca:	1d39      	adds	r1, r7, #4
   b68cc:	4628      	mov	r0, r5
   b68ce:	f7ff ffa1 	bl	b6814 <_ZN5Print5writeEPKc>
   b68d2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b68d4:	b11e      	cbz	r6, b68de <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b68d6:	4628      	mov	r0, r5
   b68d8:	f7ff ffb5 	bl	b6846 <_ZN5Print7printlnEv>
   b68dc:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b68de:	4620      	mov	r0, r4
   b68e0:	3718      	adds	r7, #24
   b68e2:	46bd      	mov	sp, r7
   b68e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b68e8:	f100 0308 	add.w	r3, r0, #8
   b68ec:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b68f0:	46e8      	mov	r8, sp
        char bigger[n+1];
   b68f2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b68f6:	4622      	mov	r2, r4
   b68f8:	1c41      	adds	r1, r0, #1
   b68fa:	683b      	ldr	r3, [r7, #0]
   b68fc:	4668      	mov	r0, sp
   b68fe:	f7ff fcfb 	bl	b62f8 <vsnprintf>
  return write(str);
   b6902:	4669      	mov	r1, sp
   b6904:	4628      	mov	r0, r5
   b6906:	f7ff ff85 	bl	b6814 <_ZN5Print5writeEPKc>
   b690a:	4604      	mov	r4, r0
   b690c:	46c5      	mov	sp, r8
   b690e:	e7e1      	b.n	b68d4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6910 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b6910:	b510      	push	{r4, lr}
   b6912:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6914:	f7ff faac 	bl	b5e70 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b6918:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b691a:	6823      	ldr	r3, [r4, #0]
   b691c:	4620      	mov	r0, r4
   b691e:	695b      	ldr	r3, [r3, #20]
   b6920:	4798      	blx	r3
    if (c >= 0) return c;
   b6922:	2800      	cmp	r0, #0
   b6924:	da08      	bge.n	b6938 <_ZN6Stream9timedReadEv+0x28>
   b6926:	f7ff faa3 	bl	b5e70 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b692a:	68e3      	ldr	r3, [r4, #12]
   b692c:	1ac0      	subs	r0, r0, r3
   b692e:	68a3      	ldr	r3, [r4, #8]
   b6930:	4298      	cmp	r0, r3
   b6932:	d3f2      	bcc.n	b691a <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b6934:	f04f 30ff 	mov.w	r0, #4294967295
}
   b6938:	bd10      	pop	{r4, pc}
	...

000b693c <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
   b693c:	b538      	push	{r3, r4, r5, lr}
   b693e:	460d      	mov	r5, r1
  String ret;
   b6940:	4907      	ldr	r1, [pc, #28]	; (b6960 <_ZN6Stream10readStringEv+0x24>)
{
   b6942:	4604      	mov	r4, r0
  String ret;
   b6944:	f7ff fe9f 	bl	b6686 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b6948:	4628      	mov	r0, r5
   b694a:	f7ff ffe1 	bl	b6910 <_ZN6Stream9timedReadEv>
  while (c >= 0)
   b694e:	2800      	cmp	r0, #0
   b6950:	db04      	blt.n	b695c <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b6952:	b2c1      	uxtb	r1, r0
   b6954:	4620      	mov	r0, r4
   b6956:	f7ff ff11 	bl	b677c <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b695a:	e7f5      	b.n	b6948 <_ZN6Stream10readStringEv+0xc>
  }
  return ret;
}
   b695c:	4620      	mov	r0, r4
   b695e:	bd38      	pop	{r3, r4, r5, pc}
   b6960:	000b88aa 	.word	0x000b88aa

000b6964 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6964:	4b01      	ldr	r3, [pc, #4]	; (b696c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6966:	4a02      	ldr	r2, [pc, #8]	; (b6970 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6968:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b696a:	4770      	bx	lr
   b696c:	2003e6e0 	.word	0x2003e6e0
   b6970:	000b8f30 	.word	0x000b8f30

000b6974 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6974:	4b02      	ldr	r3, [pc, #8]	; (b6980 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6976:	681a      	ldr	r2, [r3, #0]
   b6978:	4b02      	ldr	r3, [pc, #8]	; (b6984 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b697a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b697c:	4770      	bx	lr
   b697e:	bf00      	nop
   b6980:	2003e530 	.word	0x2003e530
   b6984:	2003e6e4 	.word	0x2003e6e4

000b6988 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b6988:	428a      	cmp	r2, r1
{
   b698a:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b698c:	d007      	beq.n	b699e <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b698e:	1a44      	subs	r4, r0, r1
   b6990:	9802      	ldr	r0, [sp, #8]
   b6992:	1ac0      	subs	r0, r0, r3
   b6994:	4344      	muls	r4, r0
   b6996:	1a50      	subs	r0, r2, r1
   b6998:	fb94 f0f0 	sdiv	r0, r4, r0
   b699c:	4418      	add	r0, r3
}
   b699e:	bd10      	pop	{r4, pc}

000b69a0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b69a0:	2100      	movs	r1, #0
   b69a2:	f7ff bc05 	b.w	b61b0 <system_delay_ms>
	...

000b69a8 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b69a8:	4b01      	ldr	r3, [pc, #4]	; (b69b0 <_GLOBAL__sub_I_RGB+0x8>)
   b69aa:	2200      	movs	r2, #0
   b69ac:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b69ae:	4770      	bx	lr
   b69b0:	2003e6e8 	.word	0x2003e6e8

000b69b4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b69b4:	4b01      	ldr	r3, [pc, #4]	; (b69bc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b69b6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b69b8:	4770      	bx	lr
   b69ba:	bf00      	nop
   b69bc:	2003e534 	.word	0x2003e534

000b69c0 <serialEventRun>:
{
   b69c0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b69c2:	4b0b      	ldr	r3, [pc, #44]	; (b69f0 <serialEventRun+0x30>)
   b69c4:	b143      	cbz	r3, b69d8 <serialEventRun+0x18>
   b69c6:	f000 f981 	bl	b6ccc <_Z16_fetch_usbserialv>
   b69ca:	6803      	ldr	r3, [r0, #0]
   b69cc:	691b      	ldr	r3, [r3, #16]
   b69ce:	4798      	blx	r3
   b69d0:	2800      	cmp	r0, #0
   b69d2:	dd01      	ble.n	b69d8 <serialEventRun+0x18>
        serialEvent();
   b69d4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b69d8:	4b06      	ldr	r3, [pc, #24]	; (b69f4 <serialEventRun+0x34>)
   b69da:	b143      	cbz	r3, b69ee <serialEventRun+0x2e>
   b69dc:	f000 ff04 	bl	b77e8 <_Z22__fetch_global_Serial1v>
   b69e0:	6803      	ldr	r3, [r0, #0]
   b69e2:	691b      	ldr	r3, [r3, #16]
   b69e4:	4798      	blx	r3
   b69e6:	2800      	cmp	r0, #0
   b69e8:	dd01      	ble.n	b69ee <serialEventRun+0x2e>
        serialEvent1();
   b69ea:	f3af 8000 	nop.w
}
   b69ee:	bd08      	pop	{r3, pc}
	...

000b69f8 <_post_loop>:
{
   b69f8:	b508      	push	{r3, lr}
	serialEventRun();
   b69fa:	f7ff ffe1 	bl	b69c0 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b69fe:	f7ff fa37 	bl	b5e70 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6a02:	4b01      	ldr	r3, [pc, #4]	; (b6a08 <_post_loop+0x10>)
   b6a04:	6018      	str	r0, [r3, #0]
}
   b6a06:	bd08      	pop	{r3, pc}
   b6a08:	2003e740 	.word	0x2003e740

000b6a0c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6a0c:	4805      	ldr	r0, [pc, #20]	; (b6a24 <_Z33system_initialize_user_backup_ramv+0x18>)
   b6a0e:	4a06      	ldr	r2, [pc, #24]	; (b6a28 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6a10:	4906      	ldr	r1, [pc, #24]	; (b6a2c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6a12:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6a14:	1a12      	subs	r2, r2, r0
   b6a16:	f001 fc5b 	bl	b82d0 <memcpy>
    __backup_sram_signature = signature;
   b6a1a:	4b05      	ldr	r3, [pc, #20]	; (b6a30 <_Z33system_initialize_user_backup_ramv+0x24>)
   b6a1c:	4a05      	ldr	r2, [pc, #20]	; (b6a34 <_Z33system_initialize_user_backup_ramv+0x28>)
   b6a1e:	601a      	str	r2, [r3, #0]
}
   b6a20:	bd08      	pop	{r3, pc}
   b6a22:	bf00      	nop
   b6a24:	2003f400 	.word	0x2003f400
   b6a28:	2003f404 	.word	0x2003f404
   b6a2c:	000b92c4 	.word	0x000b92c4
   b6a30:	2003f400 	.word	0x2003f400
   b6a34:	9a271c1e 	.word	0x9a271c1e

000b6a38 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6a38:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6a3a:	2300      	movs	r3, #0
   b6a3c:	9300      	str	r3, [sp, #0]
   b6a3e:	461a      	mov	r2, r3
   b6a40:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6a44:	f7ff fbc6 	bl	b61d4 <system_ctrl_set_result>
}
   b6a48:	b003      	add	sp, #12
   b6a4a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6a50 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6a50:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b6a52:	8843      	ldrh	r3, [r0, #2]
   b6a54:	2b0a      	cmp	r3, #10
   b6a56:	d008      	beq.n	b6a6a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6a58:	2b50      	cmp	r3, #80	; 0x50
   b6a5a:	d10b      	bne.n	b6a74 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6a5c:	4b09      	ldr	r3, [pc, #36]	; (b6a84 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b6a5e:	681b      	ldr	r3, [r3, #0]
   b6a60:	b14b      	cbz	r3, b6a76 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6a62:	b003      	add	sp, #12
   b6a64:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6a68:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6a6a:	f7ff ffe5 	bl	b6a38 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b6a6e:	b003      	add	sp, #12
   b6a70:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6a74:	2300      	movs	r3, #0
   b6a76:	9300      	str	r3, [sp, #0]
   b6a78:	461a      	mov	r2, r3
   b6a7a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6a7e:	f7ff fba9 	bl	b61d4 <system_ctrl_set_result>
}
   b6a82:	e7f4      	b.n	b6a6e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6a84:	2003e6fc 	.word	0x2003e6fc

000b6a88 <module_user_init_hook>:
{
   b6a88:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6a8a:	4812      	ldr	r0, [pc, #72]	; (b6ad4 <module_user_init_hook+0x4c>)
   b6a8c:	2100      	movs	r1, #0
   b6a8e:	f7ff fc4b 	bl	b6328 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6a92:	4b11      	ldr	r3, [pc, #68]	; (b6ad8 <module_user_init_hook+0x50>)
   b6a94:	681a      	ldr	r2, [r3, #0]
   b6a96:	4b11      	ldr	r3, [pc, #68]	; (b6adc <module_user_init_hook+0x54>)
   b6a98:	429a      	cmp	r2, r3
   b6a9a:	4b11      	ldr	r3, [pc, #68]	; (b6ae0 <module_user_init_hook+0x58>)
   b6a9c:	bf0c      	ite	eq
   b6a9e:	2201      	moveq	r2, #1
   b6aa0:	2200      	movne	r2, #0
   b6aa2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6aa4:	d001      	beq.n	b6aaa <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6aa6:	f7ff ffb1 	bl	b6a0c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6aaa:	f7ff f9c9 	bl	b5e40 <HAL_RNG_GetRandomNumber>
   b6aae:	4604      	mov	r4, r0
    srand(seed);
   b6ab0:	f001 fc24 	bl	b82fc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6ab4:	4b0b      	ldr	r3, [pc, #44]	; (b6ae4 <module_user_init_hook+0x5c>)
   b6ab6:	b113      	cbz	r3, b6abe <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6ab8:	4620      	mov	r0, r4
   b6aba:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b6abe:	2100      	movs	r1, #0
   b6ac0:	4808      	ldr	r0, [pc, #32]	; (b6ae4 <module_user_init_hook+0x5c>)
   b6ac2:	f7ff fbf9 	bl	b62b8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6ac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6aca:	4807      	ldr	r0, [pc, #28]	; (b6ae8 <module_user_init_hook+0x60>)
   b6acc:	2100      	movs	r1, #0
   b6ace:	f7ff bb77 	b.w	b61c0 <system_ctrl_set_app_request_handler>
   b6ad2:	bf00      	nop
   b6ad4:	000b69b5 	.word	0x000b69b5
   b6ad8:	2003f400 	.word	0x2003f400
   b6adc:	9a271c1e 	.word	0x9a271c1e
   b6ae0:	2003e6f8 	.word	0x2003e6f8
   b6ae4:	00000000 	.word	0x00000000
   b6ae8:	000b6a51 	.word	0x000b6a51

000b6aec <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6aec:	4770      	bx	lr

000b6aee <_ZN9IPAddressD0Ev>:
   b6aee:	b510      	push	{r4, lr}
   b6af0:	2118      	movs	r1, #24
   b6af2:	4604      	mov	r4, r0
   b6af4:	f7fd fad3 	bl	b409e <_ZdlPvj>
   b6af8:	4620      	mov	r0, r4
   b6afa:	bd10      	pop	{r4, pc}

000b6afc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6afc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6afe:	7d03      	ldrb	r3, [r0, #20]
   b6b00:	2b06      	cmp	r3, #6
{
   b6b02:	b08d      	sub	sp, #52	; 0x34
   b6b04:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6b06:	f100 0704 	add.w	r7, r0, #4
   b6b0a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6b0e:	d012      	beq.n	b6b36 <_ZNK9IPAddress7printToER5Print+0x3a>
   b6b10:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6b14:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6b18:	220a      	movs	r2, #10
   b6b1a:	4630      	mov	r0, r6
   b6b1c:	f7ff fea9 	bl	b6872 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6b20:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6b22:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6b24:	d019      	beq.n	b6b5a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6b26:	2c00      	cmp	r4, #0
   b6b28:	d0f4      	beq.n	b6b14 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6b2a:	212e      	movs	r1, #46	; 0x2e
   b6b2c:	4630      	mov	r0, r6
   b6b2e:	f7ff fe87 	bl	b6840 <_ZN5Print5printEc>
   b6b32:	4404      	add	r4, r0
   b6b34:	e7ee      	b.n	b6b14 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6b36:	232f      	movs	r3, #47	; 0x2f
   b6b38:	466a      	mov	r2, sp
   b6b3a:	4639      	mov	r1, r7
   b6b3c:	200a      	movs	r0, #10
		buf[0] = 0;
   b6b3e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6b42:	f7ff f9ad 	bl	b5ea0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6b46:	4668      	mov	r0, sp
   b6b48:	f001 fc18 	bl	b837c <strlen>
   b6b4c:	6833      	ldr	r3, [r6, #0]
   b6b4e:	4602      	mov	r2, r0
   b6b50:	68db      	ldr	r3, [r3, #12]
   b6b52:	4669      	mov	r1, sp
   b6b54:	4630      	mov	r0, r6
   b6b56:	4798      	blx	r3
   b6b58:	4604      	mov	r4, r0
    }
    return n;
}
   b6b5a:	4620      	mov	r0, r4
   b6b5c:	b00d      	add	sp, #52	; 0x34
   b6b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6b60 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6b60:	b510      	push	{r4, lr}
   b6b62:	4b05      	ldr	r3, [pc, #20]	; (b6b78 <_ZN9IPAddressC1Ev+0x18>)
   b6b64:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6b66:	2211      	movs	r2, #17
   b6b68:	f840 3b04 	str.w	r3, [r0], #4
   b6b6c:	2100      	movs	r1, #0
   b6b6e:	f001 fbbd 	bl	b82ec <memset>
}
   b6b72:	4620      	mov	r0, r4
   b6b74:	bd10      	pop	{r4, pc}
   b6b76:	bf00      	nop
   b6b78:	000b8f58 	.word	0x000b8f58

000b6b7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6b7c:	4603      	mov	r3, r0
   b6b7e:	4a07      	ldr	r2, [pc, #28]	; (b6b9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6b80:	b510      	push	{r4, lr}
   b6b82:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6b86:	f101 0210 	add.w	r2, r1, #16
   b6b8a:	f851 4b04 	ldr.w	r4, [r1], #4
   b6b8e:	f843 4b04 	str.w	r4, [r3], #4
   b6b92:	4291      	cmp	r1, r2
   b6b94:	d1f9      	bne.n	b6b8a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6b96:	780a      	ldrb	r2, [r1, #0]
   b6b98:	701a      	strb	r2, [r3, #0]
}
   b6b9a:	bd10      	pop	{r4, pc}
   b6b9c:	000b8f58 	.word	0x000b8f58

000b6ba0 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b6ba0:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b6ba2:	2b04      	cmp	r3, #4
   b6ba4:	d104      	bne.n	b6bb0 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b6ba6:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6ba8:	3800      	subs	r0, #0
   b6baa:	bf18      	it	ne
   b6bac:	2001      	movne	r0, #1
   b6bae:	4770      	bx	lr
    } else if (version() == 6) {
   b6bb0:	2b06      	cmp	r3, #6
   b6bb2:	d107      	bne.n	b6bc4 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6bb4:	6843      	ldr	r3, [r0, #4]
   b6bb6:	b93b      	cbnz	r3, b6bc8 <_ZNK9IPAddresscvbEv+0x28>
   b6bb8:	6883      	ldr	r3, [r0, #8]
   b6bba:	b92b      	cbnz	r3, b6bc8 <_ZNK9IPAddresscvbEv+0x28>
   b6bbc:	68c3      	ldr	r3, [r0, #12]
   b6bbe:	b91b      	cbnz	r3, b6bc8 <_ZNK9IPAddresscvbEv+0x28>
   b6bc0:	6900      	ldr	r0, [r0, #16]
   b6bc2:	e7f1      	b.n	b6ba8 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b6bc4:	2000      	movs	r0, #0
   b6bc6:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6bc8:	2001      	movs	r0, #1
}
   b6bca:	4770      	bx	lr

000b6bcc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6bcc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6bce:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6bd2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6bd6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6bda:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6bde:	2304      	movs	r3, #4
   b6be0:	6041      	str	r1, [r0, #4]
   b6be2:	7503      	strb	r3, [r0, #20]
}
   b6be4:	bd10      	pop	{r4, pc}
	...

000b6be8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6be8:	b507      	push	{r0, r1, r2, lr}
   b6bea:	4b06      	ldr	r3, [pc, #24]	; (b6c04 <_ZN9IPAddressC1EPKh+0x1c>)
   b6bec:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6bee:	78cb      	ldrb	r3, [r1, #3]
   b6bf0:	9300      	str	r3, [sp, #0]
   b6bf2:	788b      	ldrb	r3, [r1, #2]
   b6bf4:	784a      	ldrb	r2, [r1, #1]
   b6bf6:	7809      	ldrb	r1, [r1, #0]
   b6bf8:	f7ff ffe8 	bl	b6bcc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6bfc:	b003      	add	sp, #12
   b6bfe:	f85d fb04 	ldr.w	pc, [sp], #4
   b6c02:	bf00      	nop
   b6c04:	000b8f58 	.word	0x000b8f58

000b6c08 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6c08:	7441      	strb	r1, [r0, #17]
}
   b6c0a:	4770      	bx	lr

000b6c0c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6c0c:	4770      	bx	lr

000b6c0e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6c0e:	4770      	bx	lr

000b6c10 <_ZN9USBSerial4readEv>:
{
   b6c10:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6c12:	2100      	movs	r1, #0
   b6c14:	7c00      	ldrb	r0, [r0, #16]
   b6c16:	f7ff fa93 	bl	b6140 <HAL_USB_USART_Receive_Data>
}
   b6c1a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6c1e:	bd08      	pop	{r3, pc}

000b6c20 <_ZN9USBSerial4peekEv>:
{
   b6c20:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6c22:	2101      	movs	r1, #1
   b6c24:	7c00      	ldrb	r0, [r0, #16]
   b6c26:	f7ff fa8b 	bl	b6140 <HAL_USB_USART_Receive_Data>
}
   b6c2a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6c2e:	bd08      	pop	{r3, pc}

000b6c30 <_ZN9USBSerial17availableForWriteEv>:
{
   b6c30:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6c32:	7c00      	ldrb	r0, [r0, #16]
   b6c34:	f7ff fa7c 	bl	b6130 <HAL_USB_USART_Available_Data_For_Write>
}
   b6c38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6c3c:	bd08      	pop	{r3, pc}

000b6c3e <_ZN9USBSerial9availableEv>:
{
   b6c3e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6c40:	7c00      	ldrb	r0, [r0, #16]
   b6c42:	f7ff fa6d 	bl	b6120 <HAL_USB_USART_Available_Data>
}
   b6c46:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6c4a:	bd08      	pop	{r3, pc}

000b6c4c <_ZN9USBSerial5writeEh>:
{
   b6c4c:	b513      	push	{r0, r1, r4, lr}
   b6c4e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6c50:	7c00      	ldrb	r0, [r0, #16]
{
   b6c52:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6c54:	f7ff fa6c 	bl	b6130 <HAL_USB_USART_Available_Data_For_Write>
   b6c58:	2800      	cmp	r0, #0
   b6c5a:	9901      	ldr	r1, [sp, #4]
   b6c5c:	dc01      	bgt.n	b6c62 <_ZN9USBSerial5writeEh+0x16>
   b6c5e:	7c60      	ldrb	r0, [r4, #17]
   b6c60:	b120      	cbz	r0, b6c6c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6c62:	7c20      	ldrb	r0, [r4, #16]
   b6c64:	f7ff fa74 	bl	b6150 <HAL_USB_USART_Send_Data>
   b6c68:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6c6c:	b002      	add	sp, #8
   b6c6e:	bd10      	pop	{r4, pc}

000b6c70 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6c70:	7c00      	ldrb	r0, [r0, #16]
   b6c72:	f7ff ba75 	b.w	b6160 <HAL_USB_USART_Flush_Data>

000b6c76 <_ZN9USBSerialD0Ev>:
   b6c76:	b510      	push	{r4, lr}
   b6c78:	2114      	movs	r1, #20
   b6c7a:	4604      	mov	r4, r0
   b6c7c:	f7fd fa0f 	bl	b409e <_ZdlPvj>
   b6c80:	4620      	mov	r0, r4
   b6c82:	bd10      	pop	{r4, pc}

000b6c84 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6c84:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6c86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6c8a:	4604      	mov	r4, r0
   b6c8c:	4608      	mov	r0, r1
   b6c8e:	2100      	movs	r1, #0
   b6c90:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6c94:	4b04      	ldr	r3, [pc, #16]	; (b6ca8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6c96:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6c98:	2301      	movs	r3, #1
  _serial = serial;
   b6c9a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6c9c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6c9e:	4611      	mov	r1, r2
   b6ca0:	f7ff fa2e 	bl	b6100 <HAL_USB_USART_Init>
}
   b6ca4:	4620      	mov	r0, r4
   b6ca6:	bd10      	pop	{r4, pc}
   b6ca8:	000b8f6c 	.word	0x000b8f6c

000b6cac <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6cac:	7c00      	ldrb	r0, [r0, #16]
   b6cae:	2200      	movs	r2, #0
   b6cb0:	f7ff ba2e 	b.w	b6110 <HAL_USB_USART_Begin>

000b6cb4 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b6cb4:	7c00      	ldrb	r0, [r0, #16]
   b6cb6:	f7ff ba5b 	b.w	b6170 <HAL_USB_USART_Is_Connected>

000b6cba <_Z19acquireSerialBufferv>:
{
   b6cba:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6cbc:	2214      	movs	r2, #20
{
   b6cbe:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6cc0:	2100      	movs	r1, #0
   b6cc2:	f001 fb13 	bl	b82ec <memset>
}
   b6cc6:	4620      	mov	r0, r4
   b6cc8:	bd10      	pop	{r4, pc}
	...

000b6ccc <_Z16_fetch_usbserialv>:
{
   b6ccc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6cce:	4c0f      	ldr	r4, [pc, #60]	; (b6d0c <_Z16_fetch_usbserialv+0x40>)
{
   b6cd0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6cd2:	a803      	add	r0, sp, #12
   b6cd4:	f7ff fff1 	bl	b6cba <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6cd8:	7821      	ldrb	r1, [r4, #0]
   b6cda:	f3bf 8f5b 	dmb	ish
   b6cde:	f011 0101 	ands.w	r1, r1, #1
   b6ce2:	d10f      	bne.n	b6d04 <_Z16_fetch_usbserialv+0x38>
   b6ce4:	4620      	mov	r0, r4
   b6ce6:	9101      	str	r1, [sp, #4]
   b6ce8:	f7fd f9e8 	bl	b40bc <__cxa_guard_acquire>
   b6cec:	9901      	ldr	r1, [sp, #4]
   b6cee:	b148      	cbz	r0, b6d04 <_Z16_fetch_usbserialv+0x38>
   b6cf0:	aa03      	add	r2, sp, #12
   b6cf2:	4807      	ldr	r0, [pc, #28]	; (b6d10 <_Z16_fetch_usbserialv+0x44>)
   b6cf4:	f7ff ffc6 	bl	b6c84 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6cf8:	4620      	mov	r0, r4
   b6cfa:	f7fd f9e4 	bl	b40c6 <__cxa_guard_release>
   b6cfe:	4805      	ldr	r0, [pc, #20]	; (b6d14 <_Z16_fetch_usbserialv+0x48>)
   b6d00:	f001 fae0 	bl	b82c4 <atexit>
	return _usbserial;
}
   b6d04:	4802      	ldr	r0, [pc, #8]	; (b6d10 <_Z16_fetch_usbserialv+0x44>)
   b6d06:	b008      	add	sp, #32
   b6d08:	bd10      	pop	{r4, pc}
   b6d0a:	bf00      	nop
   b6d0c:	2003e700 	.word	0x2003e700
   b6d10:	2003e704 	.word	0x2003e704
   b6d14:	000b6c0d 	.word	0x000b6c0d

000b6d18 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6d18:	4770      	bx	lr

000b6d1a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6d1a:	7441      	strb	r1, [r0, #17]
}
   b6d1c:	4770      	bx	lr

000b6d1e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6d1e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6d20:	7c00      	ldrb	r0, [r0, #16]
   b6d22:	f7ff f905 	bl	b5f30 <hal_usart_available_data_for_write>
}
   b6d26:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6d2a:	bd08      	pop	{r3, pc}

000b6d2c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6d2c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6d2e:	7c00      	ldrb	r0, [r0, #16]
   b6d30:	f7ff f8d6 	bl	b5ee0 <hal_usart_available>
}
   b6d34:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6d38:	bd08      	pop	{r3, pc}

000b6d3a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6d3a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6d3c:	7c00      	ldrb	r0, [r0, #16]
   b6d3e:	f7ff f8df 	bl	b5f00 <hal_usart_peek>
}
   b6d42:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6d46:	bd08      	pop	{r3, pc}

000b6d48 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6d48:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6d4a:	7c00      	ldrb	r0, [r0, #16]
   b6d4c:	f7ff f8d0 	bl	b5ef0 <hal_usart_read>
}
   b6d50:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6d54:	bd08      	pop	{r3, pc}

000b6d56 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6d56:	7c00      	ldrb	r0, [r0, #16]
   b6d58:	f7ff b8da 	b.w	b5f10 <hal_usart_flush>

000b6d5c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6d5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6d5e:	7c45      	ldrb	r5, [r0, #17]
{
   b6d60:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6d62:	b12d      	cbz	r5, b6d70 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6d64:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6d66:	b003      	add	sp, #12
   b6d68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6d6c:	f7ff b8b0 	b.w	b5ed0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6d70:	7c00      	ldrb	r0, [r0, #16]
   b6d72:	9101      	str	r1, [sp, #4]
   b6d74:	f7ff f8dc 	bl	b5f30 <hal_usart_available_data_for_write>
   b6d78:	2800      	cmp	r0, #0
   b6d7a:	9901      	ldr	r1, [sp, #4]
   b6d7c:	dcf2      	bgt.n	b6d64 <_ZN11USARTSerial5writeEh+0x8>
}
   b6d7e:	4628      	mov	r0, r5
   b6d80:	b003      	add	sp, #12
   b6d82:	bd30      	pop	{r4, r5, pc}

000b6d84 <_ZN11USARTSerialD0Ev>:
   b6d84:	b510      	push	{r4, lr}
   b6d86:	2114      	movs	r1, #20
   b6d88:	4604      	mov	r4, r0
   b6d8a:	f7fd f988 	bl	b409e <_ZdlPvj>
   b6d8e:	4620      	mov	r0, r4
   b6d90:	bd10      	pop	{r4, pc}
	...

000b6d94 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6d94:	b510      	push	{r4, lr}
   b6d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6d9a:	4604      	mov	r4, r0
   b6d9c:	4608      	mov	r0, r1
   b6d9e:	4611      	mov	r1, r2
   b6da0:	2200      	movs	r2, #0
   b6da2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6da6:	4b04      	ldr	r3, [pc, #16]	; (b6db8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6da8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6daa:	2301      	movs	r3, #1
  _serial = serial;
   b6dac:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6dae:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6db0:	f7ff f8c6 	bl	b5f40 <hal_usart_init_ex>
}
   b6db4:	4620      	mov	r0, r4
   b6db6:	bd10      	pop	{r4, pc}
   b6db8:	000b8f9c 	.word	0x000b8f9c

000b6dbc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6dbc:	4770      	bx	lr

000b6dbe <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6dbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6dc0:	4606      	mov	r6, r0
   b6dc2:	4615      	mov	r5, r2
   b6dc4:	460c      	mov	r4, r1
   b6dc6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6dc8:	42bc      	cmp	r4, r7
   b6dca:	d006      	beq.n	b6dda <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6dcc:	6833      	ldr	r3, [r6, #0]
   b6dce:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6dd2:	689b      	ldr	r3, [r3, #8]
   b6dd4:	4630      	mov	r0, r6
   b6dd6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6dd8:	e7f6      	b.n	b6dc8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6dda:	4628      	mov	r0, r5
   b6ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6dde <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6dde:	7c00      	ldrb	r0, [r0, #16]
   b6de0:	2200      	movs	r2, #0
   b6de2:	f7ff b8cd 	b.w	b5f80 <hal_i2c_write>

000b6de6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6de6:	7c00      	ldrb	r0, [r0, #16]
   b6de8:	2100      	movs	r1, #0
   b6dea:	f7ff b8d1 	b.w	b5f90 <hal_i2c_available>

000b6dee <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6dee:	7c00      	ldrb	r0, [r0, #16]
   b6df0:	2100      	movs	r1, #0
   b6df2:	f7ff b8d5 	b.w	b5fa0 <hal_i2c_read>

000b6df6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6df6:	7c00      	ldrb	r0, [r0, #16]
   b6df8:	2100      	movs	r1, #0
   b6dfa:	f7ff b8d9 	b.w	b5fb0 <hal_i2c_peek>

000b6dfe <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6dfe:	7c00      	ldrb	r0, [r0, #16]
   b6e00:	2100      	movs	r1, #0
   b6e02:	f7ff b8dd 	b.w	b5fc0 <hal_i2c_flush>

000b6e06 <_ZN7TwoWireD0Ev>:
   b6e06:	b510      	push	{r4, lr}
   b6e08:	2114      	movs	r1, #20
   b6e0a:	4604      	mov	r4, r0
   b6e0c:	f7fd f947 	bl	b409e <_ZdlPvj>
   b6e10:	4620      	mov	r0, r4
   b6e12:	bd10      	pop	{r4, pc}

000b6e14 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6e14:	b538      	push	{r3, r4, r5, lr}
   b6e16:	4604      	mov	r4, r0
   b6e18:	4615      	mov	r5, r2
   b6e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6e1e:	2200      	movs	r2, #0
   b6e20:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6e24:	4b09      	ldr	r3, [pc, #36]	; (b6e4c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b6e26:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6e28:	4608      	mov	r0, r1
   b6e2a:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6e2c:	4629      	mov	r1, r5
   b6e2e:	f7ff f8d7 	bl	b5fe0 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6e32:	30bf      	adds	r0, #191	; 0xbf
   b6e34:	d108      	bne.n	b6e48 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b6e36:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6e38:	07db      	lsls	r3, r3, #31
   b6e3a:	d505      	bpl.n	b6e48 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6e3c:	6868      	ldr	r0, [r5, #4]
   b6e3e:	f7ff fa4b 	bl	b62d8 <free>
    free(conf.tx_buffer);
   b6e42:	68e8      	ldr	r0, [r5, #12]
   b6e44:	f7ff fa48 	bl	b62d8 <free>
}
   b6e48:	4620      	mov	r0, r4
   b6e4a:	bd38      	pop	{r3, r4, r5, pc}
   b6e4c:	000b8fcc 	.word	0x000b8fcc

000b6e50 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6e50:	2300      	movs	r3, #0
   b6e52:	7c00      	ldrb	r0, [r0, #16]
   b6e54:	461a      	mov	r2, r3
   b6e56:	4619      	mov	r1, r3
   b6e58:	f7ff b87a 	b.w	b5f50 <hal_i2c_begin>

000b6e5c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b6e5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b6e5e:	2200      	movs	r2, #0
   b6e60:	2314      	movs	r3, #20
   b6e62:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b6e66:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b6e6a:	780b      	ldrb	r3, [r1, #0]
   b6e6c:	f88d 3008 	strb.w	r3, [sp, #8]
   b6e70:	684b      	ldr	r3, [r1, #4]
   b6e72:	9303      	str	r3, [sp, #12]
   b6e74:	68cb      	ldr	r3, [r1, #12]
   b6e76:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b6e78:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b6e7a:	7a0b      	ldrb	r3, [r1, #8]
   b6e7c:	9305      	str	r3, [sp, #20]
   b6e7e:	a901      	add	r1, sp, #4
   b6e80:	f7ff f8b6 	bl	b5ff0 <hal_i2c_request_ex>
}
   b6e84:	b007      	add	sp, #28
   b6e86:	f85d fb04 	ldr.w	pc, [sp], #4

000b6e8a <_ZN7TwoWire11requestFromEhjh>:
{
   b6e8a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b6e8c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b6e8e:	f88d 1000 	strb.w	r1, [sp]
   b6e92:	f04f 0164 	mov.w	r1, #100	; 0x64
   b6e96:	9103      	str	r1, [sp, #12]
   b6e98:	bf18      	it	ne
   b6e9a:	2301      	movne	r3, #1
   b6e9c:	4669      	mov	r1, sp
    size_ = size;
   b6e9e:	9201      	str	r2, [sp, #4]
   b6ea0:	f88d 3008 	strb.w	r3, [sp, #8]
   b6ea4:	f7ff ffda 	bl	b6e5c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b6ea8:	b005      	add	sp, #20
   b6eaa:	f85d fb04 	ldr.w	pc, [sp], #4

000b6eae <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b6eae:	2301      	movs	r3, #1
   b6eb0:	f7ff bfeb 	b.w	b6e8a <_ZN7TwoWire11requestFromEhjh>

000b6eb4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b6eb4:	7c00      	ldrb	r0, [r0, #16]
   b6eb6:	2200      	movs	r2, #0
   b6eb8:	f7ff b852 	b.w	b5f60 <hal_i2c_begin_transmission>

000b6ebc <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b6ebc:	b2c9      	uxtb	r1, r1
   b6ebe:	f7ff bff9 	b.w	b6eb4 <_ZN7TwoWire17beginTransmissionEh>

000b6ec2 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6ec2:	7c00      	ldrb	r0, [r0, #16]
   b6ec4:	2200      	movs	r2, #0
   b6ec6:	f7ff b853 	b.w	b5f70 <hal_i2c_end_transmission>

000b6eca <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b6eca:	2101      	movs	r1, #1
   b6ecc:	f7ff bff9 	b.w	b6ec2 <_ZN7TwoWire15endTransmissionEh>

000b6ed0 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b6ed0:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6ed2:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b6ed4:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6ed8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6eda:	2201      	movs	r2, #1
   b6edc:	f04f 33ff 	mov.w	r3, #4294967295
   b6ee0:	f10d 0107 	add.w	r1, sp, #7
   b6ee4:	47a0      	blx	r4
}
   b6ee6:	b002      	add	sp, #8
   b6ee8:	bd10      	pop	{r4, pc}

000b6eea <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b6eea:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6eec:	6803      	ldr	r3, [r0, #0]
   b6eee:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6ef0:	f04f 33ff 	mov.w	r3, #4294967295
   b6ef4:	46a4      	mov	ip, r4
}
   b6ef6:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6efa:	4760      	bx	ip

000b6efc <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6efc:	b513      	push	{r0, r1, r4, lr}
   b6efe:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b6f00:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6f02:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b6f06:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b6f08:	f10d 0107 	add.w	r1, sp, #7
   b6f0c:	2201      	movs	r2, #1
   b6f0e:	47a0      	blx	r4
}
   b6f10:	b002      	add	sp, #8
   b6f12:	bd10      	pop	{r4, pc}

000b6f14 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b6f14:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6f16:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6f18:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6f1c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6f20:	429a      	cmp	r2, r3
int TCPClient::read() {
   b6f22:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6f24:	d008      	beq.n	b6f38 <_ZN9TCPClient4readEv+0x24>
   b6f26:	6963      	ldr	r3, [r4, #20]
   b6f28:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6f2c:	1c51      	adds	r1, r2, #1
   b6f2e:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b6f32:	4413      	add	r3, r2
   b6f34:	7918      	ldrb	r0, [r3, #4]
}
   b6f36:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6f38:	6803      	ldr	r3, [r0, #0]
   b6f3a:	691b      	ldr	r3, [r3, #16]
   b6f3c:	4798      	blx	r3
   b6f3e:	2800      	cmp	r0, #0
   b6f40:	d1f1      	bne.n	b6f26 <_ZN9TCPClient4readEv+0x12>
   b6f42:	f04f 30ff 	mov.w	r0, #4294967295
   b6f46:	e7f6      	b.n	b6f36 <_ZN9TCPClient4readEv+0x22>

000b6f48 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b6f48:	4770      	bx	lr

000b6f4a <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b6f4a:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b6f4c:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b6f4e:	43c0      	mvns	r0, r0
   b6f50:	0fc0      	lsrs	r0, r0, #31
   b6f52:	4770      	bx	lr

000b6f54 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6f54:	4770      	bx	lr
	...

000b6f58 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6f58:	4b06      	ldr	r3, [pc, #24]	; (b6f74 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6f5a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6f5c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6f5e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6f62:	d005      	beq.n	b6f70 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6f64:	4608      	mov	r0, r1
   b6f66:	f000 fca5 	bl	b78b4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6f6a:	2800      	cmp	r0, #0
   b6f6c:	bf08      	it	eq
   b6f6e:	2400      	moveq	r4, #0
      }
   b6f70:	4620      	mov	r0, r4
   b6f72:	bd10      	pop	{r4, pc}
   b6f74:	000b8f28 	.word	0x000b8f28

000b6f78 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6f78:	b510      	push	{r4, lr}
   b6f7a:	21ac      	movs	r1, #172	; 0xac
   b6f7c:	4604      	mov	r4, r0
   b6f7e:	f7fd f88e 	bl	b409e <_ZdlPvj>
   b6f82:	4620      	mov	r0, r4
   b6f84:	bd10      	pop	{r4, pc}

000b6f86 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6f86:	21ac      	movs	r1, #172	; 0xac
   b6f88:	f7fd b889 	b.w	b409e <_ZdlPvj>

000b6f8c <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b6f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b6f90:	f04f 0800 	mov.w	r8, #0
   b6f94:	b086      	sub	sp, #24
   b6f96:	461c      	mov	r4, r3
   b6f98:	f8c0 8004 	str.w	r8, [r0, #4]
   b6f9c:	4605      	mov	r5, r0
   b6f9e:	460e      	mov	r6, r1
   b6fa0:	4617      	mov	r7, r2
    struct timeval tv = {};
   b6fa2:	4641      	mov	r1, r8
   b6fa4:	2210      	movs	r2, #16
   b6fa6:	a802      	add	r0, sp, #8
   b6fa8:	f001 f9a0 	bl	b82ec <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b6fac:	1c63      	adds	r3, r4, #1
   b6fae:	d009      	beq.n	b6fc4 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b6fb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6fb4:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b6fb8:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b6fbc:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b6fc0:	435c      	muls	r4, r3
   b6fc2:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b6fc4:	6968      	ldr	r0, [r5, #20]
   b6fc6:	2310      	movs	r3, #16
   b6fc8:	9300      	str	r3, [sp, #0]
   b6fca:	6800      	ldr	r0, [r0, #0]
   b6fcc:	ab02      	add	r3, sp, #8
   b6fce:	f241 0205 	movw	r2, #4101	; 0x1005
   b6fd2:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6fd6:	f7ff f813 	bl	b6000 <sock_setsockopt>
    if (ret < 0) {
   b6fda:	2800      	cmp	r0, #0
   b6fdc:	da07      	bge.n	b6fee <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b6fde:	f7ff f993 	bl	b6308 <__errno>
   b6fe2:	6803      	ldr	r3, [r0, #0]
   b6fe4:	606b      	str	r3, [r5, #4]
        return 0;
   b6fe6:	2000      	movs	r0, #0
}
   b6fe8:	b006      	add	sp, #24
   b6fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b6fee:	6968      	ldr	r0, [r5, #20]
   b6ff0:	2300      	movs	r3, #0
   b6ff2:	6800      	ldr	r0, [r0, #0]
   b6ff4:	463a      	mov	r2, r7
   b6ff6:	4631      	mov	r1, r6
   b6ff8:	f7ff f822 	bl	b6040 <sock_send>
    if (ret < 0) {
   b6ffc:	1e03      	subs	r3, r0, #0
   b6ffe:	dbee      	blt.n	b6fde <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b7000:	4618      	mov	r0, r3
   b7002:	e7f1      	b.n	b6fe8 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b7004 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b7004:	b530      	push	{r4, r5, lr}
   b7006:	b087      	sub	sp, #28
   b7008:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b700a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b700c:	4668      	mov	r0, sp
   b700e:	f7ff fdeb 	bl	b6be8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7012:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7014:	3404      	adds	r4, #4
   b7016:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7018:	682b      	ldr	r3, [r5, #0]
   b701a:	7023      	strb	r3, [r4, #0]
    }
   b701c:	b007      	add	sp, #28
   b701e:	bd30      	pop	{r4, r5, pc}

000b7020 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b7020:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b7022:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b7024:	4b05      	ldr	r3, [pc, #20]	; (b703c <_ZN9TCPClient8remoteIPEv+0x1c>)
   b7026:	4604      	mov	r4, r0
   b7028:	358c      	adds	r5, #140	; 0x8c
   b702a:	f844 3b04 	str.w	r3, [r4], #4
   b702e:	4606      	mov	r6, r0
   b7030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7034:	682b      	ldr	r3, [r5, #0]
   b7036:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b7038:	4630      	mov	r0, r6
   b703a:	bd70      	pop	{r4, r5, r6, pc}
   b703c:	000b8f58 	.word	0x000b8f58

000b7040 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7044:	4698      	mov	r8, r3
    stop();
   b7046:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7048:	b093      	sub	sp, #76	; 0x4c
   b704a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b704c:	2400      	movs	r4, #0
    stop();
   b704e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7050:	4606      	mov	r6, r0
   b7052:	4617      	mov	r7, r2
    stop();
   b7054:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7056:	4628      	mov	r0, r5
   b7058:	466b      	mov	r3, sp
   b705a:	4622      	mov	r2, r4
   b705c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b705e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7060:	f7fe fea6 	bl	b5db0 <netdb_getaddrinfo>
   b7064:	4605      	mov	r5, r0
   b7066:	2800      	cmp	r0, #0
   b7068:	d163      	bne.n	b7132 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b706a:	9b00      	ldr	r3, [sp, #0]
   b706c:	2b00      	cmp	r3, #0
   b706e:	d04b      	beq.n	b7108 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7070:	695b      	ldr	r3, [r3, #20]
   b7072:	2b00      	cmp	r3, #0
   b7074:	d048      	beq.n	b7108 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b7076:	a806      	add	r0, sp, #24
   b7078:	f7ff fd72 	bl	b6b60 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b707c:	9b00      	ldr	r3, [sp, #0]
   b707e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b7080:	7863      	ldrb	r3, [r4, #1]
   b7082:	2b02      	cmp	r3, #2
   b7084:	d104      	bne.n	b7090 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b7086:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b7088:	a806      	add	r0, sp, #24
   b708a:	f7ff ffbb 	bl	b7004 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b708e:	e026      	b.n	b70de <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b7090:	2b0a      	cmp	r3, #10
   b7092:	d124      	bne.n	b70de <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b7094:	2211      	movs	r2, #17
   b7096:	4629      	mov	r1, r5
   b7098:	a801      	add	r0, sp, #4
   b709a:	f001 f927 	bl	b82ec <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b709e:	68a3      	ldr	r3, [r4, #8]
   b70a0:	2b00      	cmp	r3, #0
   b70a2:	d038      	beq.n	b7116 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b70a4:	f104 0308 	add.w	r3, r4, #8
   b70a8:	f10d 0c04 	add.w	ip, sp, #4
   b70ac:	3418      	adds	r4, #24
   b70ae:	6818      	ldr	r0, [r3, #0]
   b70b0:	6859      	ldr	r1, [r3, #4]
   b70b2:	4662      	mov	r2, ip
   b70b4:	c203      	stmia	r2!, {r0, r1}
   b70b6:	3308      	adds	r3, #8
   b70b8:	42a3      	cmp	r3, r4
   b70ba:	4694      	mov	ip, r2
   b70bc:	d1f7      	bne.n	b70ae <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b70be:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b70c0:	a901      	add	r1, sp, #4
   b70c2:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b70c4:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b70c8:	f7ff fd58 	bl	b6b7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b70cc:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b70d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b70d4:	ac07      	add	r4, sp, #28
   b70d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b70d8:	f8dc 3000 	ldr.w	r3, [ip]
   b70dc:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b70de:	a806      	add	r0, sp, #24
   b70e0:	f7ff fd5e 	bl	b6ba0 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b70e4:	b180      	cbz	r0, b7108 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b70e6:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b70e8:	ad07      	add	r5, sp, #28
   b70ea:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b70ee:	4b12      	ldr	r3, [pc, #72]	; (b7138 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b70f0:	930c      	str	r3, [sp, #48]	; 0x30
   b70f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b70f4:	ac0d      	add	r4, sp, #52	; 0x34
   b70f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b70f8:	682b      	ldr	r3, [r5, #0]
   b70fa:	7023      	strb	r3, [r4, #0]
   b70fc:	463a      	mov	r2, r7
   b70fe:	4643      	mov	r3, r8
   b7100:	a90c      	add	r1, sp, #48	; 0x30
   b7102:	4630      	mov	r0, r6
   b7104:	47c8      	blx	r9
   b7106:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b7108:	9800      	ldr	r0, [sp, #0]
   b710a:	f7fe fe49 	bl	b5da0 <netdb_freeaddrinfo>
}
   b710e:	4628      	mov	r0, r5
   b7110:	b013      	add	sp, #76	; 0x4c
   b7112:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7116:	68e3      	ldr	r3, [r4, #12]
   b7118:	2b00      	cmp	r3, #0
   b711a:	d1c3      	bne.n	b70a4 <_ZN9TCPClient7connectEPKctm+0x64>
   b711c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b7120:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b7124:	f7fe fec4 	bl	b5eb0 <inet_htonl>
   b7128:	4581      	cmp	r9, r0
   b712a:	d1bb      	bne.n	b70a4 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b712c:	f104 0114 	add.w	r1, r4, #20
   b7130:	e7aa      	b.n	b7088 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7132:	4625      	mov	r5, r4
   b7134:	e7e8      	b.n	b7108 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7136:	bf00      	nop
   b7138:	000b8f58 	.word	0x000b8f58

000b713c <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b713c:	b538      	push	{r3, r4, r5, lr}
   b713e:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b7140:	681a      	ldr	r2, [r3, #0]
   b7142:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b7144:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b7146:	da10      	bge.n	b716a <_ZN9TCPClient9connectedEv+0x2e>
   b7148:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b714c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7150:	429a      	cmp	r2, r3
   b7152:	d10a      	bne.n	b716a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b7154:	6803      	ldr	r3, [r0, #0]
   b7156:	691b      	ldr	r3, [r3, #16]
   b7158:	4798      	blx	r3
        if (!rv) {
   b715a:	4604      	mov	r4, r0
   b715c:	b928      	cbnz	r0, b716a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b715e:	682b      	ldr	r3, [r5, #0]
   b7160:	4628      	mov	r0, r5
   b7162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7164:	4798      	blx	r3
        rv = available();
   b7166:	4620      	mov	r0, r4
}
   b7168:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b716a:	2001      	movs	r0, #1
   b716c:	e7fc      	b.n	b7168 <_ZN9TCPClient9connectedEv+0x2c>

000b716e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b716e:	b510      	push	{r4, lr}
   b7170:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7172:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7176:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b717a:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b717c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b717e:	d005      	beq.n	b718c <_ZN9TCPClient4peekEv+0x1e>
   b7180:	6963      	ldr	r3, [r4, #20]
   b7182:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7186:	4413      	add	r3, r2
   b7188:	7918      	ldrb	r0, [r3, #4]
}
   b718a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b718c:	6803      	ldr	r3, [r0, #0]
   b718e:	691b      	ldr	r3, [r3, #16]
   b7190:	4798      	blx	r3
   b7192:	2800      	cmp	r0, #0
   b7194:	d1f4      	bne.n	b7180 <_ZN9TCPClient4peekEv+0x12>
   b7196:	f04f 30ff 	mov.w	r0, #4294967295
   b719a:	e7f6      	b.n	b718a <_ZN9TCPClient4peekEv+0x1c>

000b719c <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b719c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b719e:	6943      	ldr	r3, [r0, #20]
   b71a0:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b71a2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b71a6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b71aa:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b71ac:	4605      	mov	r5, r0
   b71ae:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b71b0:	d016      	beq.n	b71e0 <_ZN9TCPClient4readEPhj+0x44>
   b71b2:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b71b4:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b71b8:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b71bc:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b71be:	42bc      	cmp	r4, r7
   b71c0:	bf28      	it	cs
   b71c2:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b71c4:	3304      	adds	r3, #4
   b71c6:	4622      	mov	r2, r4
   b71c8:	4419      	add	r1, r3
   b71ca:	4630      	mov	r0, r6
   b71cc:	f001 f880 	bl	b82d0 <memcpy>
   b71d0:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b71d2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b71d6:	4423      	add	r3, r4
   b71d8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b71dc:	4620      	mov	r0, r4
   b71de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b71e0:	6803      	ldr	r3, [r0, #0]
   b71e2:	691b      	ldr	r3, [r3, #16]
   b71e4:	4798      	blx	r3
   b71e6:	2800      	cmp	r0, #0
   b71e8:	d1e3      	bne.n	b71b2 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b71ea:	f04f 34ff 	mov.w	r4, #4294967295
   b71ee:	e7f5      	b.n	b71dc <_ZN9TCPClient4readEPhj+0x40>

000b71f0 <_ZN9TCPClient12flush_bufferEv>:
   b71f0:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b71f2:	2300      	movs	r3, #0
   b71f4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b71f8:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b71fa:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b71fe:	4770      	bx	lr

000b7200 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7204:	461f      	mov	r7, r3
    stop();
   b7206:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7208:	460c      	mov	r4, r1
    stop();
   b720a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b720c:	b08a      	sub	sp, #40	; 0x28
   b720e:	4605      	mov	r5, r0
   b7210:	4616      	mov	r6, r2
    stop();
   b7212:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b7214:	7d23      	ldrb	r3, [r4, #20]
   b7216:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b721a:	2b04      	cmp	r3, #4
   b721c:	bf0c      	ite	eq
   b721e:	2002      	moveq	r0, #2
   b7220:	200a      	movne	r0, #10
   b7222:	2206      	movs	r2, #6
   b7224:	2101      	movs	r1, #1
   b7226:	f7fe ff13 	bl	b6050 <sock_socket>
   b722a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b722e:	696b      	ldr	r3, [r5, #20]
   b7230:	681b      	ldr	r3, [r3, #0]
   b7232:	2b00      	cmp	r3, #0
   b7234:	da08      	bge.n	b7248 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b7236:	682b      	ldr	r3, [r5, #0]
   b7238:	4628      	mov	r0, r5
   b723a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b723c:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b723e:	4798      	blx	r3
}
   b7240:	4620      	mov	r0, r4
   b7242:	b00a      	add	sp, #40	; 0x28
   b7244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b7248:	4628      	mov	r0, r5
   b724a:	f7ff ffd1 	bl	b71f0 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b724e:	b1b7      	cbz	r7, b727e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b7250:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7252:	a903      	add	r1, sp, #12
   b7254:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b7256:	9303      	str	r3, [sp, #12]
   b7258:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b725c:	f7fe fde8 	bl	b5e30 <if_index_to_name>
   b7260:	2800      	cmp	r0, #0
   b7262:	d1e8      	bne.n	b7236 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b7264:	6968      	ldr	r0, [r5, #20]
   b7266:	2306      	movs	r3, #6
   b7268:	9300      	str	r3, [sp, #0]
   b726a:	6800      	ldr	r0, [r0, #0]
   b726c:	ab03      	add	r3, sp, #12
   b726e:	f241 020b 	movw	r2, #4107	; 0x100b
   b7272:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7276:	f7fe fec3 	bl	b6000 <sock_setsockopt>
   b727a:	2800      	cmp	r0, #0
   b727c:	d1db      	bne.n	b7236 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b727e:	221c      	movs	r2, #28
   b7280:	2100      	movs	r1, #0
   b7282:	a803      	add	r0, sp, #12
   b7284:	f001 f832 	bl	b82ec <memset>
    if (ip.version() == 4) {
   b7288:	7d23      	ldrb	r3, [r4, #20]
   b728a:	2b04      	cmp	r3, #4
   b728c:	d11d      	bne.n	b72ca <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b728e:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b7292:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b7294:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b7298:	f7fe fe12 	bl	b5ec0 <inet_htons>
   b729c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b72a0:	6860      	ldr	r0, [r4, #4]
   b72a2:	f7fe fe05 	bl	b5eb0 <inet_htonl>
   b72a6:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b72a8:	696b      	ldr	r3, [r5, #20]
   b72aa:	221c      	movs	r2, #28
   b72ac:	6818      	ldr	r0, [r3, #0]
   b72ae:	a903      	add	r1, sp, #12
   b72b0:	f7fe feb6 	bl	b6020 <sock_connect>
   b72b4:	2800      	cmp	r0, #0
   b72b6:	d1be      	bne.n	b7236 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b72b8:	3404      	adds	r4, #4
   b72ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b72bc:	696d      	ldr	r5, [r5, #20]
   b72be:	358c      	adds	r5, #140	; 0x8c
   b72c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b72c2:	6823      	ldr	r3, [r4, #0]
   b72c4:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b72c6:	2401      	movs	r4, #1
   b72c8:	e7ba      	b.n	b7240 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b72ca:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b72ce:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b72d0:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b72d4:	f7fe fdf4 	bl	b5ec0 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b72d8:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b72da:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b72de:	1d23      	adds	r3, r4, #4
   b72e0:	f104 0714 	add.w	r7, r4, #20
   b72e4:	6818      	ldr	r0, [r3, #0]
   b72e6:	6859      	ldr	r1, [r3, #4]
   b72e8:	4632      	mov	r2, r6
   b72ea:	c203      	stmia	r2!, {r0, r1}
   b72ec:	3308      	adds	r3, #8
   b72ee:	42bb      	cmp	r3, r7
   b72f0:	4616      	mov	r6, r2
   b72f2:	d1f7      	bne.n	b72e4 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b72f4:	e7d8      	b.n	b72a8 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b72f8 <_ZN9TCPClient9availableEv>:
{
   b72f8:	b530      	push	{r4, r5, lr}
   b72fa:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b72fc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b7300:	b08b      	sub	sp, #44	; 0x2c
   b7302:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b7304:	b12b      	cbz	r3, b7312 <_ZN9TCPClient9availableEv+0x1a>
   b7306:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b730a:	429a      	cmp	r2, r3
   b730c:	d101      	bne.n	b7312 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b730e:	f7ff ff6f 	bl	b71f0 <_ZN9TCPClient12flush_bufferEv>
   b7312:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b7314:	6808      	ldr	r0, [r1, #0]
   b7316:	2800      	cmp	r0, #0
   b7318:	db18      	blt.n	b734c <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b731a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b731e:	2d7f      	cmp	r5, #127	; 0x7f
   b7320:	d814      	bhi.n	b734c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b7322:	3104      	adds	r1, #4
   b7324:	2308      	movs	r3, #8
   b7326:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b732a:	4429      	add	r1, r5
   b732c:	f7fe fe80 	bl	b6030 <sock_recv>
            if (ret > 0) {
   b7330:	2800      	cmp	r0, #0
   b7332:	dd13      	ble.n	b735c <_ZN9TCPClient9availableEv+0x64>
   b7334:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b7336:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b733a:	b90a      	cbnz	r2, b7340 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b733c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b7340:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b7342:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7346:	4410      	add	r0, r2
   b7348:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b734c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b734e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b7352:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b7356:	1ac0      	subs	r0, r0, r3
   b7358:	b00b      	add	sp, #44	; 0x2c
   b735a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b735c:	f7fe ffd4 	bl	b6308 <__errno>
   b7360:	6803      	ldr	r3, [r0, #0]
   b7362:	2b0b      	cmp	r3, #11
   b7364:	d0f2      	beq.n	b734c <_ZN9TCPClient9availableEv+0x54>
   b7366:	f7fe ffcf 	bl	b6308 <__errno>
   b736a:	6803      	ldr	r3, [r0, #0]
   b736c:	2b0b      	cmp	r3, #11
   b736e:	d0ed      	beq.n	b734c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b7370:	2320      	movs	r3, #32
   b7372:	2500      	movs	r5, #0
   b7374:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7378:	f7fe ffc6 	bl	b6308 <__errno>
   b737c:	6803      	ldr	r3, [r0, #0]
   b737e:	9301      	str	r3, [sp, #4]
   b7380:	4b08      	ldr	r3, [pc, #32]	; (b73a4 <_ZN9TCPClient9availableEv+0xac>)
   b7382:	4909      	ldr	r1, [pc, #36]	; (b73a8 <_ZN9TCPClient9availableEv+0xb0>)
   b7384:	9300      	str	r3, [sp, #0]
   b7386:	aa02      	add	r2, sp, #8
   b7388:	462b      	mov	r3, r5
   b738a:	2032      	movs	r0, #50	; 0x32
   b738c:	f7fe ff00 	bl	b6190 <log_message>
                    sock_close(d_->sock);
   b7390:	6963      	ldr	r3, [r4, #20]
   b7392:	6818      	ldr	r0, [r3, #0]
   b7394:	f7fe fe3c 	bl	b6010 <sock_close>
   b7398:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b739a:	f04f 32ff 	mov.w	r2, #4294967295
   b739e:	601a      	str	r2, [r3, #0]
   b73a0:	e7d4      	b.n	b734c <_ZN9TCPClient9availableEv+0x54>
   b73a2:	bf00      	nop
   b73a4:	000b8ff3 	.word	0x000b8ff3
   b73a8:	000b8fec 	.word	0x000b8fec

000b73ac <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b73ac:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b73ae:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b73b0:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b73b2:	6818      	ldr	r0, [r3, #0]
   b73b4:	2800      	cmp	r0, #0
   b73b6:	db01      	blt.n	b73bc <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b73b8:	f7fe fe2a 	bl	b6010 <sock_close>
   b73bc:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b73be:	f04f 32ff 	mov.w	r2, #4294967295
   b73c2:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b73c4:	6960      	ldr	r0, [r4, #20]
   b73c6:	2211      	movs	r2, #17
   b73c8:	2100      	movs	r1, #0
   b73ca:	308c      	adds	r0, #140	; 0x8c
   b73cc:	f000 ff8e 	bl	b82ec <memset>
    flush_buffer();
   b73d0:	4620      	mov	r0, r4
}
   b73d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b73d6:	f7ff bf0b 	b.w	b71f0 <_ZN9TCPClient12flush_bufferEv>

000b73da <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b73da:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b73dc:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b73de:	4604      	mov	r4, r0
          total(0) {
   b73e0:	6001      	str	r1, [r0, #0]
   b73e2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b73e6:	3088      	adds	r0, #136	; 0x88
   b73e8:	f7ff fbba 	bl	b6b60 <_ZN9IPAddressC1Ev>
}
   b73ec:	4620      	mov	r0, r4
   b73ee:	bd10      	pop	{r4, pc}

000b73f0 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b73f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b73f2:	2300      	movs	r3, #0
   b73f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b73f8:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b73fc:	4a0e      	ldr	r2, [pc, #56]	; (b7438 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b73fe:	6103      	str	r3, [r0, #16]
   b7400:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7402:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b7404:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7406:	20ac      	movs	r0, #172	; 0xac
   b7408:	9101      	str	r1, [sp, #4]
   b740a:	f7fc fe44 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b740e:	1e05      	subs	r5, r0, #0
   b7410:	f105 060c 	add.w	r6, r5, #12
   b7414:	d008      	beq.n	b7428 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b7416:	2301      	movs	r3, #1
   b7418:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b741c:	4b07      	ldr	r3, [pc, #28]	; (b743c <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b741e:	9901      	ldr	r1, [sp, #4]
   b7420:	602b      	str	r3, [r5, #0]
   b7422:	4630      	mov	r0, r6
   b7424:	f7ff ffd9 	bl	b73da <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b7428:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b742a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b742e:	f7ff fedf 	bl	b71f0 <_ZN9TCPClient12flush_bufferEv>
}
   b7432:	b002      	add	sp, #8
   b7434:	bd70      	pop	{r4, r5, r6, pc}
   b7436:	bf00      	nop
   b7438:	000b9028 	.word	0x000b9028
   b743c:	000b900c 	.word	0x000b900c

000b7440 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b7440:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b7442:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b7446:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b7448:	f7ff ffd2 	bl	b73f0 <_ZN9TCPClientC1Ei>
}
   b744c:	4620      	mov	r0, r4
   b744e:	bd10      	pop	{r4, pc}

000b7450 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b7450:	b510      	push	{r4, lr}
   b7452:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b7454:	6800      	ldr	r0, [r0, #0]
   b7456:	2800      	cmp	r0, #0
   b7458:	db01      	blt.n	b745e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b745a:	f7fe fdd9 	bl	b6010 <sock_close>
    }
}
   b745e:	4620      	mov	r0, r4
   b7460:	bd10      	pop	{r4, pc}

000b7462 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b7462:	300c      	adds	r0, #12
   b7464:	f7ff bff4 	b.w	b7450 <_ZN9TCPClient4DataD1Ev>

000b7468 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7468:	2200      	movs	r2, #0
   b746a:	6840      	ldr	r0, [r0, #4]
   b746c:	4611      	mov	r1, r2
   b746e:	f7fe bed3 	b.w	b6218 <network_ready>

000b7472 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7472:	2200      	movs	r2, #0
   b7474:	6840      	ldr	r0, [r0, #4]
   b7476:	4611      	mov	r1, r2
   b7478:	f7fe beee 	b.w	b6258 <network_listening>

000b747c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b747c:	2200      	movs	r2, #0
   b747e:	6840      	ldr	r0, [r0, #4]
   b7480:	4611      	mov	r1, r2
   b7482:	f7fe bef9 	b.w	b6278 <network_get_listen_timeout>

000b7486 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7486:	6840      	ldr	r0, [r0, #4]
   b7488:	2200      	movs	r2, #0
   b748a:	f7fe beed 	b.w	b6268 <network_set_listen_timeout>

000b748e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b748e:	6840      	ldr	r0, [r0, #4]
   b7490:	2200      	movs	r2, #0
   b7492:	f081 0101 	eor.w	r1, r1, #1
   b7496:	f7fe bed7 	b.w	b6248 <network_listen>

000b749a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b749a:	2300      	movs	r3, #0
   b749c:	6840      	ldr	r0, [r0, #4]
   b749e:	461a      	mov	r2, r3
   b74a0:	4619      	mov	r1, r3
   b74a2:	f7fe bec9 	b.w	b6238 <network_off>

000b74a6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b74a6:	2300      	movs	r3, #0
   b74a8:	6840      	ldr	r0, [r0, #4]
   b74aa:	461a      	mov	r2, r3
   b74ac:	4619      	mov	r1, r3
   b74ae:	f7fe bebb 	b.w	b6228 <network_on>

000b74b2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b74b2:	2200      	movs	r2, #0
   b74b4:	6840      	ldr	r0, [r0, #4]
   b74b6:	4611      	mov	r1, r2
   b74b8:	f7fe be9e 	b.w	b61f8 <network_connecting>

000b74bc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b74bc:	6840      	ldr	r0, [r0, #4]
   b74be:	2200      	movs	r2, #0
   b74c0:	2102      	movs	r1, #2
   b74c2:	f7fe bea1 	b.w	b6208 <network_disconnect>

000b74c6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b74c6:	2300      	movs	r3, #0
   b74c8:	6840      	ldr	r0, [r0, #4]
   b74ca:	461a      	mov	r2, r3
   b74cc:	f7fe be8c 	b.w	b61e8 <network_connect>

000b74d0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b74d0:	4b02      	ldr	r3, [pc, #8]	; (b74dc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b74d2:	2204      	movs	r2, #4
   b74d4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b74d6:	4a02      	ldr	r2, [pc, #8]	; (b74e0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b74d8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b74da:	4770      	bx	lr
   b74dc:	2003e718 	.word	0x2003e718
   b74e0:	000b9074 	.word	0x000b9074

000b74e4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b74e4:	2300      	movs	r3, #0
   b74e6:	6840      	ldr	r0, [r0, #4]
   b74e8:	461a      	mov	r2, r3
   b74ea:	f7fe be7d 	b.w	b61e8 <network_connect>

000b74ee <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b74ee:	6840      	ldr	r0, [r0, #4]
   b74f0:	2200      	movs	r2, #0
   b74f2:	2102      	movs	r1, #2
   b74f4:	f7fe be88 	b.w	b6208 <network_disconnect>

000b74f8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b74f8:	2200      	movs	r2, #0
   b74fa:	6840      	ldr	r0, [r0, #4]
   b74fc:	4611      	mov	r1, r2
   b74fe:	f7fe be7b 	b.w	b61f8 <network_connecting>

000b7502 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b7502:	2200      	movs	r2, #0
   b7504:	6840      	ldr	r0, [r0, #4]
   b7506:	4611      	mov	r1, r2
   b7508:	f7fe be86 	b.w	b6218 <network_ready>

000b750c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b750c:	2300      	movs	r3, #0
   b750e:	6840      	ldr	r0, [r0, #4]
   b7510:	461a      	mov	r2, r3
   b7512:	4619      	mov	r1, r3
   b7514:	f7fe be88 	b.w	b6228 <network_on>

000b7518 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7518:	2300      	movs	r3, #0
   b751a:	6840      	ldr	r0, [r0, #4]
   b751c:	461a      	mov	r2, r3
   b751e:	4619      	mov	r1, r3
   b7520:	f7fe be8a 	b.w	b6238 <network_off>

000b7524 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b7524:	6840      	ldr	r0, [r0, #4]
   b7526:	2100      	movs	r1, #0
   b7528:	f7fe beae 	b.w	b6288 <network_is_on>

000b752c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b752c:	6840      	ldr	r0, [r0, #4]
   b752e:	2100      	movs	r1, #0
   b7530:	f7fe beb2 	b.w	b6298 <network_is_off>

000b7534 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b7534:	6840      	ldr	r0, [r0, #4]
   b7536:	2200      	movs	r2, #0
   b7538:	f081 0101 	eor.w	r1, r1, #1
   b753c:	f7fe be84 	b.w	b6248 <network_listen>

000b7540 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7540:	6840      	ldr	r0, [r0, #4]
   b7542:	2200      	movs	r2, #0
   b7544:	f7fe be90 	b.w	b6268 <network_set_listen_timeout>

000b7548 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7548:	2200      	movs	r2, #0
   b754a:	6840      	ldr	r0, [r0, #4]
   b754c:	4611      	mov	r1, r2
   b754e:	f7fe be93 	b.w	b6278 <network_get_listen_timeout>

000b7552 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b7552:	2200      	movs	r2, #0
   b7554:	6840      	ldr	r0, [r0, #4]
   b7556:	4611      	mov	r1, r2
   b7558:	f7fe be7e 	b.w	b6258 <network_listening>

000b755c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b755c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7560:	b095      	sub	sp, #84	; 0x54
   b7562:	4614      	mov	r4, r2
   b7564:	460d      	mov	r5, r1
   b7566:	4607      	mov	r7, r0
    IPAddress addr;
   b7568:	f7ff fafa 	bl	b6b60 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b756c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b756e:	221c      	movs	r2, #28
   b7570:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b7572:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b7574:	f000 feba 	bl	b82ec <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b7578:	2340      	movs	r3, #64	; 0x40
   b757a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b757c:	4620      	mov	r0, r4
   b757e:	466b      	mov	r3, sp
   b7580:	aa0c      	add	r2, sp, #48	; 0x30
   b7582:	2100      	movs	r1, #0
   b7584:	f7fe fc14 	bl	b5db0 <netdb_getaddrinfo>
    if (!r) {
   b7588:	4604      	mov	r4, r0
   b758a:	2800      	cmp	r0, #0
   b758c:	d14b      	bne.n	b7626 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b758e:	4602      	mov	r2, r0
   b7590:	2101      	movs	r1, #1
   b7592:	6868      	ldr	r0, [r5, #4]
   b7594:	f7fe fe40 	bl	b6218 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7598:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b759a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b759c:	4622      	mov	r2, r4
   b759e:	6868      	ldr	r0, [r5, #4]
   b75a0:	f7fe fe3a 	bl	b6218 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b75a4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b75a6:	4681      	mov	r9, r0
        bool ok = false;
   b75a8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b75aa:	2e00      	cmp	r6, #0
   b75ac:	d03b      	beq.n	b7626 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b75ae:	2900      	cmp	r1, #0
   b75b0:	d139      	bne.n	b7626 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b75b2:	6873      	ldr	r3, [r6, #4]
   b75b4:	2b02      	cmp	r3, #2
   b75b6:	d003      	beq.n	b75c0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b75b8:	2b0a      	cmp	r3, #10
   b75ba:	d011      	beq.n	b75e0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b75bc:	69f6      	ldr	r6, [r6, #28]
   b75be:	e7f4      	b.n	b75aa <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b75c0:	f1b8 0f00 	cmp.w	r8, #0
   b75c4:	d0fa      	beq.n	b75bc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b75c6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b75c8:	a806      	add	r0, sp, #24
   b75ca:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b75cc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b75ce:	f7ff fb0b 	bl	b6be8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b75d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b75d4:	1d3c      	adds	r4, r7, #4
   b75d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b75d8:	682b      	ldr	r3, [r5, #0]
   b75da:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b75dc:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b75de:	e7ed      	b.n	b75bc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b75e0:	f1b9 0f00 	cmp.w	r9, #0
   b75e4:	d0ea      	beq.n	b75bc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b75e6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b75e8:	2210      	movs	r2, #16
   b75ea:	a801      	add	r0, sp, #4
   b75ec:	f000 fe7e 	bl	b82ec <memset>
                    a.v = 6;
   b75f0:	2306      	movs	r3, #6
   b75f2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b75f6:	ad01      	add	r5, sp, #4
   b75f8:	f104 0308 	add.w	r3, r4, #8
   b75fc:	3418      	adds	r4, #24
   b75fe:	6818      	ldr	r0, [r3, #0]
   b7600:	6859      	ldr	r1, [r3, #4]
   b7602:	462a      	mov	r2, r5
   b7604:	c203      	stmia	r2!, {r0, r1}
   b7606:	3308      	adds	r3, #8
   b7608:	42a3      	cmp	r3, r4
   b760a:	4615      	mov	r5, r2
   b760c:	d1f7      	bne.n	b75fe <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b760e:	a901      	add	r1, sp, #4
   b7610:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b7612:	ad07      	add	r5, sp, #28
   b7614:	f7ff fab2 	bl	b6b7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b761a:	1d3c      	adds	r4, r7, #4
   b761c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b761e:	682b      	ldr	r3, [r5, #0]
   b7620:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7622:	4649      	mov	r1, r9
   b7624:	e7ca      	b.n	b75bc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b7626:	9800      	ldr	r0, [sp, #0]
   b7628:	f7fe fbba 	bl	b5da0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b762c:	4638      	mov	r0, r7
   b762e:	b015      	add	sp, #84	; 0x54
   b7630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7634 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b7634:	4b02      	ldr	r3, [pc, #8]	; (b7640 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b7636:	4a03      	ldr	r2, [pc, #12]	; (b7644 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7638:	601a      	str	r2, [r3, #0]
   b763a:	2200      	movs	r2, #0
   b763c:	605a      	str	r2, [r3, #4]

} // spark
   b763e:	4770      	bx	lr
   b7640:	2003e720 	.word	0x2003e720
   b7644:	000b90b0 	.word	0x000b90b0

000b7648 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7648:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b764a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b764c:	d902      	bls.n	b7654 <pinAvailable+0xc>
    return false;
   b764e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7650:	b002      	add	sp, #8
   b7652:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7654:	f1a0 030b 	sub.w	r3, r0, #11
   b7658:	2b02      	cmp	r3, #2
   b765a:	d81a      	bhi.n	b7692 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b765c:	4c17      	ldr	r4, [pc, #92]	; (b76bc <pinAvailable+0x74>)
   b765e:	7821      	ldrb	r1, [r4, #0]
   b7660:	f3bf 8f5b 	dmb	ish
   b7664:	f011 0101 	ands.w	r1, r1, #1
   b7668:	d10b      	bne.n	b7682 <pinAvailable+0x3a>
   b766a:	4620      	mov	r0, r4
   b766c:	9101      	str	r1, [sp, #4]
   b766e:	f7fc fd25 	bl	b40bc <__cxa_guard_acquire>
   b7672:	9901      	ldr	r1, [sp, #4]
   b7674:	b128      	cbz	r0, b7682 <pinAvailable+0x3a>
   b7676:	4812      	ldr	r0, [pc, #72]	; (b76c0 <pinAvailable+0x78>)
   b7678:	f7fe fea2 	bl	b63c0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b767c:	4620      	mov	r0, r4
   b767e:	f7fc fd22 	bl	b40c6 <__cxa_guard_release>
   b7682:	4b0f      	ldr	r3, [pc, #60]	; (b76c0 <pinAvailable+0x78>)
   b7684:	7818      	ldrb	r0, [r3, #0]
   b7686:	f7fe fd1b 	bl	b60c0 <hal_spi_is_enabled>
   b768a:	2800      	cmp	r0, #0
   b768c:	d1df      	bne.n	b764e <pinAvailable+0x6>
  return true; // 'pin' is available
   b768e:	2001      	movs	r0, #1
   b7690:	e7de      	b.n	b7650 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7692:	2801      	cmp	r0, #1
   b7694:	d809      	bhi.n	b76aa <pinAvailable+0x62>
   b7696:	f000 f8e7 	bl	b7868 <_Z19__fetch_global_Wirev>
   b769a:	2100      	movs	r1, #0
   b769c:	7c00      	ldrb	r0, [r0, #16]
   b769e:	f7fe fc97 	bl	b5fd0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b76a2:	f080 0001 	eor.w	r0, r0, #1
   b76a6:	b2c0      	uxtb	r0, r0
   b76a8:	e7d2      	b.n	b7650 <pinAvailable+0x8>
   b76aa:	3809      	subs	r0, #9
   b76ac:	2801      	cmp	r0, #1
   b76ae:	d8ee      	bhi.n	b768e <pinAvailable+0x46>
   b76b0:	f000 f89a 	bl	b77e8 <_Z22__fetch_global_Serial1v>
   b76b4:	7c00      	ldrb	r0, [r0, #16]
   b76b6:	f7fe fc33 	bl	b5f20 <hal_usart_is_enabled>
   b76ba:	e7f2      	b.n	b76a2 <pinAvailable+0x5a>
   b76bc:	2003e6b8 	.word	0x2003e6b8
   b76c0:	2003e6bc 	.word	0x2003e6bc

000b76c4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b76c4:	2823      	cmp	r0, #35	; 0x23
{
   b76c6:	b538      	push	{r3, r4, r5, lr}
   b76c8:	4604      	mov	r4, r0
   b76ca:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b76cc:	d80a      	bhi.n	b76e4 <pinMode+0x20>
   b76ce:	29ff      	cmp	r1, #255	; 0xff
   b76d0:	d008      	beq.n	b76e4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b76d2:	f7ff ffb9 	bl	b7648 <pinAvailable>
   b76d6:	b128      	cbz	r0, b76e4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b76d8:	4629      	mov	r1, r5
   b76da:	4620      	mov	r0, r4
}
   b76dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b76e0:	f7fe bb7e 	b.w	b5de0 <HAL_Pin_Mode>
}
   b76e4:	bd38      	pop	{r3, r4, r5, pc}

000b76e6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b76e6:	b538      	push	{r3, r4, r5, lr}
   b76e8:	4604      	mov	r4, r0
   b76ea:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b76ec:	f7fe fb80 	bl	b5df0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b76f0:	28ff      	cmp	r0, #255	; 0xff
   b76f2:	d010      	beq.n	b7716 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b76f4:	2806      	cmp	r0, #6
   b76f6:	d804      	bhi.n	b7702 <digitalWrite+0x1c>
   b76f8:	234d      	movs	r3, #77	; 0x4d
   b76fa:	fa23 f000 	lsr.w	r0, r3, r0
   b76fe:	07c3      	lsls	r3, r0, #31
   b7700:	d409      	bmi.n	b7716 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7702:	4620      	mov	r0, r4
   b7704:	f7ff ffa0 	bl	b7648 <pinAvailable>
   b7708:	b128      	cbz	r0, b7716 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b770a:	4629      	mov	r1, r5
   b770c:	4620      	mov	r0, r4
}
   b770e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b7712:	f7fe bb75 	b.w	b5e00 <HAL_GPIO_Write>
}
   b7716:	bd38      	pop	{r3, r4, r5, pc}

000b7718 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b7718:	b510      	push	{r4, lr}
   b771a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b771c:	f7fe fb68 	bl	b5df0 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b7720:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b7722:	b2db      	uxtb	r3, r3
   b7724:	2b01      	cmp	r3, #1
   b7726:	d908      	bls.n	b773a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b7728:	4620      	mov	r0, r4
   b772a:	f7ff ff8d 	bl	b7648 <pinAvailable>
   b772e:	b120      	cbz	r0, b773a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b7730:	4620      	mov	r0, r4
}
   b7732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b7736:	f7fe bb6b 	b.w	b5e10 <HAL_GPIO_Read>
}
   b773a:	2000      	movs	r0, #0
   b773c:	bd10      	pop	{r4, pc}

000b773e <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b773e:	280d      	cmp	r0, #13
{
   b7740:	b510      	push	{r4, lr}
   b7742:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b7744:	bf9c      	itt	ls
   b7746:	340e      	addls	r4, #14
   b7748:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b774a:	4620      	mov	r0, r4
   b774c:	f7ff ff7c 	bl	b7648 <pinAvailable>
   b7750:	b150      	cbz	r0, b7768 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b7752:	2103      	movs	r1, #3
   b7754:	4620      	mov	r0, r4
   b7756:	f7fe fb3b 	bl	b5dd0 <HAL_Validate_Pin_Function>
   b775a:	2803      	cmp	r0, #3
   b775c:	d104      	bne.n	b7768 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b775e:	4620      	mov	r0, r4
}
   b7760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b7764:	f7fe bb5c 	b.w	b5e20 <hal_adc_read>
}
   b7768:	2000      	movs	r0, #0
   b776a:	bd10      	pop	{r4, pc}

000b776c <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b776c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7770:	4690      	mov	r8, r2
   b7772:	461f      	mov	r7, r3
   b7774:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b7776:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b7778:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b777a:	f1c4 0107 	rsb	r1, r4, #7
   b777e:	f1b8 0f00 	cmp.w	r8, #0
   b7782:	d112      	bne.n	b77aa <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b7784:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b7788:	f001 0101 	and.w	r1, r1, #1
   b778c:	4630      	mov	r0, r6
   b778e:	f7ff ffaa 	bl	b76e6 <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b7792:	2101      	movs	r1, #1
   b7794:	4628      	mov	r0, r5
   b7796:	f7ff ffa6 	bl	b76e6 <digitalWrite>
    digitalWrite(clockPin, LOW);
   b779a:	2100      	movs	r1, #0
   b779c:	4628      	mov	r0, r5
   b779e:	f7ff ffa2 	bl	b76e6 <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b77a2:	3c01      	subs	r4, #1
   b77a4:	d2e9      	bcs.n	b777a <shiftOut+0xe>
  }
}
   b77a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b77aa:	fa47 f104 	asr.w	r1, r7, r4
   b77ae:	e7eb      	b.n	b7788 <shiftOut+0x1c>

000b77b0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b77b0:	4770      	bx	lr
	...

000b77b4 <_Z20acquireSerial1Bufferv>:
{
   b77b4:	b538      	push	{r3, r4, r5, lr}
   b77b6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b77b8:	2514      	movs	r5, #20
   b77ba:	462a      	mov	r2, r5
   b77bc:	2100      	movs	r1, #0
   b77be:	f000 fd95 	bl	b82ec <memset>
   b77c2:	8025      	strh	r5, [r4, #0]
   b77c4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b77c6:	4907      	ldr	r1, [pc, #28]	; (b77e4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b77c8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b77ca:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b77cc:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b77ce:	f000 f86f 	bl	b78b0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b77d2:	4904      	ldr	r1, [pc, #16]	; (b77e4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b77d4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b77d6:	4628      	mov	r0, r5
   b77d8:	f000 f86a 	bl	b78b0 <_ZnajRKSt9nothrow_t>
    };
   b77dc:	60e0      	str	r0, [r4, #12]
}
   b77de:	4620      	mov	r0, r4
   b77e0:	bd38      	pop	{r3, r4, r5, pc}
   b77e2:	bf00      	nop
   b77e4:	000b90e4 	.word	0x000b90e4

000b77e8 <_Z22__fetch_global_Serial1v>:
{
   b77e8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b77ea:	4d0e      	ldr	r5, [pc, #56]	; (b7824 <_Z22__fetch_global_Serial1v+0x3c>)
   b77ec:	7829      	ldrb	r1, [r5, #0]
   b77ee:	f3bf 8f5b 	dmb	ish
   b77f2:	f011 0401 	ands.w	r4, r1, #1
{
   b77f6:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b77f8:	d111      	bne.n	b781e <_Z22__fetch_global_Serial1v+0x36>
   b77fa:	4628      	mov	r0, r5
   b77fc:	f7fc fc5e 	bl	b40bc <__cxa_guard_acquire>
   b7800:	b168      	cbz	r0, b781e <_Z22__fetch_global_Serial1v+0x36>
   b7802:	a801      	add	r0, sp, #4
   b7804:	f7ff ffd6 	bl	b77b4 <_Z20acquireSerial1Bufferv>
   b7808:	aa01      	add	r2, sp, #4
   b780a:	4621      	mov	r1, r4
   b780c:	4806      	ldr	r0, [pc, #24]	; (b7828 <_Z22__fetch_global_Serial1v+0x40>)
   b780e:	f7ff fac1 	bl	b6d94 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7812:	4628      	mov	r0, r5
   b7814:	f7fc fc57 	bl	b40c6 <__cxa_guard_release>
   b7818:	4804      	ldr	r0, [pc, #16]	; (b782c <_Z22__fetch_global_Serial1v+0x44>)
   b781a:	f000 fd53 	bl	b82c4 <atexit>
    return serial1;
}
   b781e:	4802      	ldr	r0, [pc, #8]	; (b7828 <_Z22__fetch_global_Serial1v+0x40>)
   b7820:	b007      	add	sp, #28
   b7822:	bd30      	pop	{r4, r5, pc}
   b7824:	2003e728 	.word	0x2003e728
   b7828:	2003e72c 	.word	0x2003e72c
   b782c:	000b77b1 	.word	0x000b77b1

000b7830 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7830:	4770      	bx	lr
	...

000b7834 <_Z17acquireWireBufferv>:
{
   b7834:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7836:	4b0a      	ldr	r3, [pc, #40]	; (b7860 <_Z17acquireWireBufferv+0x2c>)
   b7838:	6003      	str	r3, [r0, #0]
   b783a:	2301      	movs	r3, #1
{
   b783c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b783e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7840:	4908      	ldr	r1, [pc, #32]	; (b7864 <_Z17acquireWireBufferv+0x30>)
   b7842:	2020      	movs	r0, #32
   b7844:	f000 f834 	bl	b78b0 <_ZnajRKSt9nothrow_t>
	};
   b7848:	2520      	movs	r5, #32
   b784a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b784c:	4905      	ldr	r1, [pc, #20]	; (b7864 <_Z17acquireWireBufferv+0x30>)
	};
   b784e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7850:	4628      	mov	r0, r5
   b7852:	f000 f82d 	bl	b78b0 <_ZnajRKSt9nothrow_t>
	};
   b7856:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b785a:	4620      	mov	r0, r4
   b785c:	bd38      	pop	{r3, r4, r5, pc}
   b785e:	bf00      	nop
   b7860:	00010018 	.word	0x00010018
   b7864:	000b90e4 	.word	0x000b90e4

000b7868 <_Z19__fetch_global_Wirev>:
{
   b7868:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b786a:	4d0e      	ldr	r5, [pc, #56]	; (b78a4 <_Z19__fetch_global_Wirev+0x3c>)
   b786c:	7829      	ldrb	r1, [r5, #0]
   b786e:	f3bf 8f5b 	dmb	ish
   b7872:	f011 0401 	ands.w	r4, r1, #1
{
   b7876:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7878:	d111      	bne.n	b789e <_Z19__fetch_global_Wirev+0x36>
   b787a:	4628      	mov	r0, r5
   b787c:	f7fc fc1e 	bl	b40bc <__cxa_guard_acquire>
   b7880:	b168      	cbz	r0, b789e <_Z19__fetch_global_Wirev+0x36>
   b7882:	4668      	mov	r0, sp
   b7884:	f7ff ffd6 	bl	b7834 <_Z17acquireWireBufferv>
   b7888:	466a      	mov	r2, sp
   b788a:	4621      	mov	r1, r4
   b788c:	4806      	ldr	r0, [pc, #24]	; (b78a8 <_Z19__fetch_global_Wirev+0x40>)
   b788e:	f7ff fac1 	bl	b6e14 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7892:	4628      	mov	r0, r5
   b7894:	f7fc fc17 	bl	b40c6 <__cxa_guard_release>
   b7898:	4804      	ldr	r0, [pc, #16]	; (b78ac <_Z19__fetch_global_Wirev+0x44>)
   b789a:	f000 fd13 	bl	b82c4 <atexit>
	return wire;
}
   b789e:	4802      	ldr	r0, [pc, #8]	; (b78a8 <_Z19__fetch_global_Wirev+0x40>)
   b78a0:	b007      	add	sp, #28
   b78a2:	bd30      	pop	{r4, r5, pc}
   b78a4:	2003e744 	.word	0x2003e744
   b78a8:	2003e748 	.word	0x2003e748
   b78ac:	000b7831 	.word	0x000b7831

000b78b0 <_ZnajRKSt9nothrow_t>:
   b78b0:	f7fc bbf3 	b.w	b409a <_Znaj>

000b78b4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b78b4:	4901      	ldr	r1, [pc, #4]	; (b78bc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b78b6:	f000 b8f9 	b.w	b7aac <_ZNKSt9type_infoeqERKS_>
   b78ba:	bf00      	nop
   b78bc:	000b9100 	.word	0x000b9100

000b78c0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b78c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b78c2:	2400      	movs	r4, #0
   b78c4:	2310      	movs	r3, #16
   b78c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b78ca:	6803      	ldr	r3, [r0, #0]
   b78cc:	4615      	mov	r5, r2
   b78ce:	699e      	ldr	r6, [r3, #24]
   b78d0:	6812      	ldr	r2, [r2, #0]
   b78d2:	466b      	mov	r3, sp
   b78d4:	e9cd 4400 	strd	r4, r4, [sp]
   b78d8:	47b0      	blx	r6
   b78da:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b78de:	f003 0306 	and.w	r3, r3, #6
   b78e2:	2b06      	cmp	r3, #6
   b78e4:	bf03      	ittte	eq
   b78e6:	9b00      	ldreq	r3, [sp, #0]
   b78e8:	602b      	streq	r3, [r5, #0]
   b78ea:	2001      	moveq	r0, #1
   b78ec:	4620      	movne	r0, r4
   b78ee:	b004      	add	sp, #16
   b78f0:	bd70      	pop	{r4, r5, r6, pc}

000b78f2 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b78f2:	9800      	ldr	r0, [sp, #0]
   b78f4:	4290      	cmp	r0, r2
   b78f6:	bf14      	ite	ne
   b78f8:	2001      	movne	r0, #1
   b78fa:	2006      	moveq	r0, #6
   b78fc:	4770      	bx	lr
	...

000b7900 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b7900:	b510      	push	{r4, lr}
   b7902:	4b03      	ldr	r3, [pc, #12]	; (b7910 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b7904:	6003      	str	r3, [r0, #0]
   b7906:	4604      	mov	r4, r0
   b7908:	f000 f8cd 	bl	b7aa6 <_ZNSt9type_infoD1Ev>
   b790c:	4620      	mov	r0, r4
   b790e:	bd10      	pop	{r4, pc}
   b7910:	000b9140 	.word	0x000b9140

000b7914 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b7914:	b510      	push	{r4, lr}
   b7916:	4604      	mov	r4, r0
   b7918:	f7ff fff2 	bl	b7900 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b791c:	4620      	mov	r0, r4
   b791e:	2108      	movs	r1, #8
   b7920:	f7fc fbbd 	bl	b409e <_ZdlPvj>
   b7924:	4620      	mov	r0, r4
   b7926:	bd10      	pop	{r4, pc}

000b7928 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b7928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b792c:	461f      	mov	r7, r3
   b792e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b7932:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b7936:	4598      	cmp	r8, r3
   b7938:	4606      	mov	r6, r0
   b793a:	4615      	mov	r5, r2
   b793c:	d107      	bne.n	b794e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b793e:	9907      	ldr	r1, [sp, #28]
   b7940:	f000 f8b4 	bl	b7aac <_ZNKSt9type_infoeqERKS_>
   b7944:	b118      	cbz	r0, b794e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7946:	7165      	strb	r5, [r4, #5]
   b7948:	2000      	movs	r0, #0
   b794a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b794e:	4639      	mov	r1, r7
   b7950:	4630      	mov	r0, r6
   b7952:	f000 f8ab 	bl	b7aac <_ZNKSt9type_infoeqERKS_>
   b7956:	2800      	cmp	r0, #0
   b7958:	d0f6      	beq.n	b7948 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b795a:	2301      	movs	r3, #1
   b795c:	f8c4 8000 	str.w	r8, [r4]
   b7960:	7125      	strb	r5, [r4, #4]
   b7962:	71a3      	strb	r3, [r4, #6]
   b7964:	e7f0      	b.n	b7948 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b7966 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b7966:	b538      	push	{r3, r4, r5, lr}
   b7968:	4615      	mov	r5, r2
   b796a:	461c      	mov	r4, r3
   b796c:	f000 f89e 	bl	b7aac <_ZNKSt9type_infoeqERKS_>
   b7970:	b120      	cbz	r0, b797c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b7972:	2308      	movs	r3, #8
   b7974:	60e3      	str	r3, [r4, #12]
   b7976:	2306      	movs	r3, #6
   b7978:	6025      	str	r5, [r4, #0]
   b797a:	7123      	strb	r3, [r4, #4]
   b797c:	bd38      	pop	{r3, r4, r5, pc}

000b797e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b797e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7980:	4605      	mov	r5, r0
   b7982:	460c      	mov	r4, r1
   b7984:	9201      	str	r2, [sp, #4]
   b7986:	461e      	mov	r6, r3
   b7988:	f000 f890 	bl	b7aac <_ZNKSt9type_infoeqERKS_>
   b798c:	b950      	cbnz	r0, b79a4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b798e:	2e03      	cmp	r6, #3
   b7990:	d808      	bhi.n	b79a4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7992:	6823      	ldr	r3, [r4, #0]
   b7994:	9a01      	ldr	r2, [sp, #4]
   b7996:	695b      	ldr	r3, [r3, #20]
   b7998:	4629      	mov	r1, r5
   b799a:	4620      	mov	r0, r4
   b799c:	b002      	add	sp, #8
   b799e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b79a2:	4718      	bx	r3
   b79a4:	b002      	add	sp, #8
   b79a6:	bd70      	pop	{r4, r5, r6, pc}

000b79a8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b79a8:	b510      	push	{r4, lr}
   b79aa:	4b03      	ldr	r3, [pc, #12]	; (b79b8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b79ac:	6003      	str	r3, [r0, #0]
   b79ae:	4604      	mov	r4, r0
   b79b0:	f7ff ffa6 	bl	b7900 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b79b4:	4620      	mov	r0, r4
   b79b6:	bd10      	pop	{r4, pc}
   b79b8:	000b91a0 	.word	0x000b91a0

000b79bc <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b79bc:	b510      	push	{r4, lr}
   b79be:	4604      	mov	r4, r0
   b79c0:	f7ff fff2 	bl	b79a8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b79c4:	4620      	mov	r0, r4
   b79c6:	210c      	movs	r1, #12
   b79c8:	f7fc fb69 	bl	b409e <_ZdlPvj>
   b79cc:	4620      	mov	r0, r4
   b79ce:	bd10      	pop	{r4, pc}

000b79d0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b79d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b79d2:	9f08      	ldr	r7, [sp, #32]
   b79d4:	4297      	cmp	r7, r2
   b79d6:	4605      	mov	r5, r0
   b79d8:	460e      	mov	r6, r1
   b79da:	4614      	mov	r4, r2
   b79dc:	d00a      	beq.n	b79f4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b79de:	68a8      	ldr	r0, [r5, #8]
   b79e0:	6802      	ldr	r2, [r0, #0]
   b79e2:	9708      	str	r7, [sp, #32]
   b79e4:	6a15      	ldr	r5, [r2, #32]
   b79e6:	4631      	mov	r1, r6
   b79e8:	4622      	mov	r2, r4
   b79ea:	46ac      	mov	ip, r5
   b79ec:	b003      	add	sp, #12
   b79ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b79f2:	4760      	bx	ip
   b79f4:	4619      	mov	r1, r3
   b79f6:	9301      	str	r3, [sp, #4]
   b79f8:	f000 f858 	bl	b7aac <_ZNKSt9type_infoeqERKS_>
   b79fc:	9b01      	ldr	r3, [sp, #4]
   b79fe:	2800      	cmp	r0, #0
   b7a00:	d0ed      	beq.n	b79de <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b7a02:	2006      	movs	r0, #6
   b7a04:	b003      	add	sp, #12
   b7a06:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7a08 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b7a08:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7a0c:	460d      	mov	r5, r1
   b7a0e:	4619      	mov	r1, r3
   b7a10:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b7a14:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b7a18:	4681      	mov	r9, r0
   b7a1a:	4617      	mov	r7, r2
   b7a1c:	4698      	mov	r8, r3
   b7a1e:	f000 f845 	bl	b7aac <_ZNKSt9type_infoeqERKS_>
   b7a22:	b190      	cbz	r0, b7a4a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b7a24:	2d00      	cmp	r5, #0
   b7a26:	6034      	str	r4, [r6, #0]
   b7a28:	7137      	strb	r7, [r6, #4]
   b7a2a:	db09      	blt.n	b7a40 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b7a2c:	1961      	adds	r1, r4, r5
   b7a2e:	458a      	cmp	sl, r1
   b7a30:	bf0c      	ite	eq
   b7a32:	2106      	moveq	r1, #6
   b7a34:	2101      	movne	r1, #1
   b7a36:	71b1      	strb	r1, [r6, #6]
   b7a38:	2000      	movs	r0, #0
   b7a3a:	b001      	add	sp, #4
   b7a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7a40:	3502      	adds	r5, #2
   b7a42:	d1f9      	bne.n	b7a38 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7a44:	2301      	movs	r3, #1
   b7a46:	71b3      	strb	r3, [r6, #6]
   b7a48:	e7f6      	b.n	b7a38 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7a4a:	4554      	cmp	r4, sl
   b7a4c:	d106      	bne.n	b7a5c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7a4e:	4659      	mov	r1, fp
   b7a50:	4648      	mov	r0, r9
   b7a52:	f000 f82b 	bl	b7aac <_ZNKSt9type_infoeqERKS_>
   b7a56:	b108      	cbz	r0, b7a5c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7a58:	7177      	strb	r7, [r6, #5]
   b7a5a:	e7ed      	b.n	b7a38 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7a5c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b7a60:	6803      	ldr	r3, [r0, #0]
   b7a62:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b7a66:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b7a6a:	69dc      	ldr	r4, [r3, #28]
   b7a6c:	463a      	mov	r2, r7
   b7a6e:	4643      	mov	r3, r8
   b7a70:	4629      	mov	r1, r5
   b7a72:	46a4      	mov	ip, r4
   b7a74:	b001      	add	sp, #4
   b7a76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7a7a:	4760      	bx	ip

000b7a7c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b7a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7a80:	4607      	mov	r7, r0
   b7a82:	460c      	mov	r4, r1
   b7a84:	4615      	mov	r5, r2
   b7a86:	461e      	mov	r6, r3
   b7a88:	f7ff ff6d 	bl	b7966 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b7a8c:	b948      	cbnz	r0, b7aa2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b7a8e:	68b8      	ldr	r0, [r7, #8]
   b7a90:	6803      	ldr	r3, [r0, #0]
   b7a92:	699f      	ldr	r7, [r3, #24]
   b7a94:	462a      	mov	r2, r5
   b7a96:	4633      	mov	r3, r6
   b7a98:	4621      	mov	r1, r4
   b7a9a:	46bc      	mov	ip, r7
   b7a9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b7aa0:	4760      	bx	ip
   b7aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7aa6 <_ZNSt9type_infoD1Ev>:
   b7aa6:	4770      	bx	lr

000b7aa8 <_ZNKSt9type_info14__is_pointer_pEv>:
   b7aa8:	2000      	movs	r0, #0
   b7aaa:	4770      	bx	lr

000b7aac <_ZNKSt9type_infoeqERKS_>:
   b7aac:	4281      	cmp	r1, r0
   b7aae:	b508      	push	{r3, lr}
   b7ab0:	d00e      	beq.n	b7ad0 <_ZNKSt9type_infoeqERKS_+0x24>
   b7ab2:	6840      	ldr	r0, [r0, #4]
   b7ab4:	7803      	ldrb	r3, [r0, #0]
   b7ab6:	2b2a      	cmp	r3, #42	; 0x2a
   b7ab8:	d00c      	beq.n	b7ad4 <_ZNKSt9type_infoeqERKS_+0x28>
   b7aba:	6849      	ldr	r1, [r1, #4]
   b7abc:	780b      	ldrb	r3, [r1, #0]
   b7abe:	2b2a      	cmp	r3, #42	; 0x2a
   b7ac0:	bf08      	it	eq
   b7ac2:	3101      	addeq	r1, #1
   b7ac4:	f000 fc48 	bl	b8358 <strcmp>
   b7ac8:	fab0 f080 	clz	r0, r0
   b7acc:	0940      	lsrs	r0, r0, #5
   b7ace:	bd08      	pop	{r3, pc}
   b7ad0:	2001      	movs	r0, #1
   b7ad2:	e7fc      	b.n	b7ace <_ZNKSt9type_infoeqERKS_+0x22>
   b7ad4:	2000      	movs	r0, #0
   b7ad6:	e7fa      	b.n	b7ace <_ZNKSt9type_infoeqERKS_+0x22>

000b7ad8 <__aeabi_drsub>:
   b7ad8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b7adc:	e002      	b.n	b7ae4 <__adddf3>
   b7ade:	bf00      	nop

000b7ae0 <__aeabi_dsub>:
   b7ae0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b7ae4 <__adddf3>:
   b7ae4:	b530      	push	{r4, r5, lr}
   b7ae6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b7aea:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b7aee:	ea94 0f05 	teq	r4, r5
   b7af2:	bf08      	it	eq
   b7af4:	ea90 0f02 	teqeq	r0, r2
   b7af8:	bf1f      	itttt	ne
   b7afa:	ea54 0c00 	orrsne.w	ip, r4, r0
   b7afe:	ea55 0c02 	orrsne.w	ip, r5, r2
   b7b02:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b7b06:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7b0a:	f000 80e2 	beq.w	b7cd2 <__adddf3+0x1ee>
   b7b0e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b7b12:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b7b16:	bfb8      	it	lt
   b7b18:	426d      	neglt	r5, r5
   b7b1a:	dd0c      	ble.n	b7b36 <__adddf3+0x52>
   b7b1c:	442c      	add	r4, r5
   b7b1e:	ea80 0202 	eor.w	r2, r0, r2
   b7b22:	ea81 0303 	eor.w	r3, r1, r3
   b7b26:	ea82 0000 	eor.w	r0, r2, r0
   b7b2a:	ea83 0101 	eor.w	r1, r3, r1
   b7b2e:	ea80 0202 	eor.w	r2, r0, r2
   b7b32:	ea81 0303 	eor.w	r3, r1, r3
   b7b36:	2d36      	cmp	r5, #54	; 0x36
   b7b38:	bf88      	it	hi
   b7b3a:	bd30      	pophi	{r4, r5, pc}
   b7b3c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7b40:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7b44:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b7b48:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b7b4c:	d002      	beq.n	b7b54 <__adddf3+0x70>
   b7b4e:	4240      	negs	r0, r0
   b7b50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7b54:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b7b58:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7b5c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b7b60:	d002      	beq.n	b7b68 <__adddf3+0x84>
   b7b62:	4252      	negs	r2, r2
   b7b64:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7b68:	ea94 0f05 	teq	r4, r5
   b7b6c:	f000 80a7 	beq.w	b7cbe <__adddf3+0x1da>
   b7b70:	f1a4 0401 	sub.w	r4, r4, #1
   b7b74:	f1d5 0e20 	rsbs	lr, r5, #32
   b7b78:	db0d      	blt.n	b7b96 <__adddf3+0xb2>
   b7b7a:	fa02 fc0e 	lsl.w	ip, r2, lr
   b7b7e:	fa22 f205 	lsr.w	r2, r2, r5
   b7b82:	1880      	adds	r0, r0, r2
   b7b84:	f141 0100 	adc.w	r1, r1, #0
   b7b88:	fa03 f20e 	lsl.w	r2, r3, lr
   b7b8c:	1880      	adds	r0, r0, r2
   b7b8e:	fa43 f305 	asr.w	r3, r3, r5
   b7b92:	4159      	adcs	r1, r3
   b7b94:	e00e      	b.n	b7bb4 <__adddf3+0xd0>
   b7b96:	f1a5 0520 	sub.w	r5, r5, #32
   b7b9a:	f10e 0e20 	add.w	lr, lr, #32
   b7b9e:	2a01      	cmp	r2, #1
   b7ba0:	fa03 fc0e 	lsl.w	ip, r3, lr
   b7ba4:	bf28      	it	cs
   b7ba6:	f04c 0c02 	orrcs.w	ip, ip, #2
   b7baa:	fa43 f305 	asr.w	r3, r3, r5
   b7bae:	18c0      	adds	r0, r0, r3
   b7bb0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b7bb4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7bb8:	d507      	bpl.n	b7bca <__adddf3+0xe6>
   b7bba:	f04f 0e00 	mov.w	lr, #0
   b7bbe:	f1dc 0c00 	rsbs	ip, ip, #0
   b7bc2:	eb7e 0000 	sbcs.w	r0, lr, r0
   b7bc6:	eb6e 0101 	sbc.w	r1, lr, r1
   b7bca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b7bce:	d31b      	bcc.n	b7c08 <__adddf3+0x124>
   b7bd0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b7bd4:	d30c      	bcc.n	b7bf0 <__adddf3+0x10c>
   b7bd6:	0849      	lsrs	r1, r1, #1
   b7bd8:	ea5f 0030 	movs.w	r0, r0, rrx
   b7bdc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b7be0:	f104 0401 	add.w	r4, r4, #1
   b7be4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b7be8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b7bec:	f080 809a 	bcs.w	b7d24 <__adddf3+0x240>
   b7bf0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7bf4:	bf08      	it	eq
   b7bf6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7bfa:	f150 0000 	adcs.w	r0, r0, #0
   b7bfe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7c02:	ea41 0105 	orr.w	r1, r1, r5
   b7c06:	bd30      	pop	{r4, r5, pc}
   b7c08:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b7c0c:	4140      	adcs	r0, r0
   b7c0e:	eb41 0101 	adc.w	r1, r1, r1
   b7c12:	3c01      	subs	r4, #1
   b7c14:	bf28      	it	cs
   b7c16:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b7c1a:	d2e9      	bcs.n	b7bf0 <__adddf3+0x10c>
   b7c1c:	f091 0f00 	teq	r1, #0
   b7c20:	bf04      	itt	eq
   b7c22:	4601      	moveq	r1, r0
   b7c24:	2000      	moveq	r0, #0
   b7c26:	fab1 f381 	clz	r3, r1
   b7c2a:	bf08      	it	eq
   b7c2c:	3320      	addeq	r3, #32
   b7c2e:	f1a3 030b 	sub.w	r3, r3, #11
   b7c32:	f1b3 0220 	subs.w	r2, r3, #32
   b7c36:	da0c      	bge.n	b7c52 <__adddf3+0x16e>
   b7c38:	320c      	adds	r2, #12
   b7c3a:	dd08      	ble.n	b7c4e <__adddf3+0x16a>
   b7c3c:	f102 0c14 	add.w	ip, r2, #20
   b7c40:	f1c2 020c 	rsb	r2, r2, #12
   b7c44:	fa01 f00c 	lsl.w	r0, r1, ip
   b7c48:	fa21 f102 	lsr.w	r1, r1, r2
   b7c4c:	e00c      	b.n	b7c68 <__adddf3+0x184>
   b7c4e:	f102 0214 	add.w	r2, r2, #20
   b7c52:	bfd8      	it	le
   b7c54:	f1c2 0c20 	rsble	ip, r2, #32
   b7c58:	fa01 f102 	lsl.w	r1, r1, r2
   b7c5c:	fa20 fc0c 	lsr.w	ip, r0, ip
   b7c60:	bfdc      	itt	le
   b7c62:	ea41 010c 	orrle.w	r1, r1, ip
   b7c66:	4090      	lslle	r0, r2
   b7c68:	1ae4      	subs	r4, r4, r3
   b7c6a:	bfa2      	ittt	ge
   b7c6c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b7c70:	4329      	orrge	r1, r5
   b7c72:	bd30      	popge	{r4, r5, pc}
   b7c74:	ea6f 0404 	mvn.w	r4, r4
   b7c78:	3c1f      	subs	r4, #31
   b7c7a:	da1c      	bge.n	b7cb6 <__adddf3+0x1d2>
   b7c7c:	340c      	adds	r4, #12
   b7c7e:	dc0e      	bgt.n	b7c9e <__adddf3+0x1ba>
   b7c80:	f104 0414 	add.w	r4, r4, #20
   b7c84:	f1c4 0220 	rsb	r2, r4, #32
   b7c88:	fa20 f004 	lsr.w	r0, r0, r4
   b7c8c:	fa01 f302 	lsl.w	r3, r1, r2
   b7c90:	ea40 0003 	orr.w	r0, r0, r3
   b7c94:	fa21 f304 	lsr.w	r3, r1, r4
   b7c98:	ea45 0103 	orr.w	r1, r5, r3
   b7c9c:	bd30      	pop	{r4, r5, pc}
   b7c9e:	f1c4 040c 	rsb	r4, r4, #12
   b7ca2:	f1c4 0220 	rsb	r2, r4, #32
   b7ca6:	fa20 f002 	lsr.w	r0, r0, r2
   b7caa:	fa01 f304 	lsl.w	r3, r1, r4
   b7cae:	ea40 0003 	orr.w	r0, r0, r3
   b7cb2:	4629      	mov	r1, r5
   b7cb4:	bd30      	pop	{r4, r5, pc}
   b7cb6:	fa21 f004 	lsr.w	r0, r1, r4
   b7cba:	4629      	mov	r1, r5
   b7cbc:	bd30      	pop	{r4, r5, pc}
   b7cbe:	f094 0f00 	teq	r4, #0
   b7cc2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b7cc6:	bf06      	itte	eq
   b7cc8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b7ccc:	3401      	addeq	r4, #1
   b7cce:	3d01      	subne	r5, #1
   b7cd0:	e74e      	b.n	b7b70 <__adddf3+0x8c>
   b7cd2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7cd6:	bf18      	it	ne
   b7cd8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7cdc:	d029      	beq.n	b7d32 <__adddf3+0x24e>
   b7cde:	ea94 0f05 	teq	r4, r5
   b7ce2:	bf08      	it	eq
   b7ce4:	ea90 0f02 	teqeq	r0, r2
   b7ce8:	d005      	beq.n	b7cf6 <__adddf3+0x212>
   b7cea:	ea54 0c00 	orrs.w	ip, r4, r0
   b7cee:	bf04      	itt	eq
   b7cf0:	4619      	moveq	r1, r3
   b7cf2:	4610      	moveq	r0, r2
   b7cf4:	bd30      	pop	{r4, r5, pc}
   b7cf6:	ea91 0f03 	teq	r1, r3
   b7cfa:	bf1e      	ittt	ne
   b7cfc:	2100      	movne	r1, #0
   b7cfe:	2000      	movne	r0, #0
   b7d00:	bd30      	popne	{r4, r5, pc}
   b7d02:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b7d06:	d105      	bne.n	b7d14 <__adddf3+0x230>
   b7d08:	0040      	lsls	r0, r0, #1
   b7d0a:	4149      	adcs	r1, r1
   b7d0c:	bf28      	it	cs
   b7d0e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b7d12:	bd30      	pop	{r4, r5, pc}
   b7d14:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b7d18:	bf3c      	itt	cc
   b7d1a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b7d1e:	bd30      	popcc	{r4, r5, pc}
   b7d20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7d24:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b7d28:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b7d2c:	f04f 0000 	mov.w	r0, #0
   b7d30:	bd30      	pop	{r4, r5, pc}
   b7d32:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b7d36:	bf1a      	itte	ne
   b7d38:	4619      	movne	r1, r3
   b7d3a:	4610      	movne	r0, r2
   b7d3c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b7d40:	bf1c      	itt	ne
   b7d42:	460b      	movne	r3, r1
   b7d44:	4602      	movne	r2, r0
   b7d46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b7d4a:	bf06      	itte	eq
   b7d4c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b7d50:	ea91 0f03 	teqeq	r1, r3
   b7d54:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b7d58:	bd30      	pop	{r4, r5, pc}
   b7d5a:	bf00      	nop

000b7d5c <__aeabi_ui2d>:
   b7d5c:	f090 0f00 	teq	r0, #0
   b7d60:	bf04      	itt	eq
   b7d62:	2100      	moveq	r1, #0
   b7d64:	4770      	bxeq	lr
   b7d66:	b530      	push	{r4, r5, lr}
   b7d68:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7d6c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7d70:	f04f 0500 	mov.w	r5, #0
   b7d74:	f04f 0100 	mov.w	r1, #0
   b7d78:	e750      	b.n	b7c1c <__adddf3+0x138>
   b7d7a:	bf00      	nop

000b7d7c <__aeabi_i2d>:
   b7d7c:	f090 0f00 	teq	r0, #0
   b7d80:	bf04      	itt	eq
   b7d82:	2100      	moveq	r1, #0
   b7d84:	4770      	bxeq	lr
   b7d86:	b530      	push	{r4, r5, lr}
   b7d88:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7d8c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7d90:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b7d94:	bf48      	it	mi
   b7d96:	4240      	negmi	r0, r0
   b7d98:	f04f 0100 	mov.w	r1, #0
   b7d9c:	e73e      	b.n	b7c1c <__adddf3+0x138>
   b7d9e:	bf00      	nop

000b7da0 <__aeabi_f2d>:
   b7da0:	0042      	lsls	r2, r0, #1
   b7da2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b7da6:	ea4f 0131 	mov.w	r1, r1, rrx
   b7daa:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b7dae:	bf1f      	itttt	ne
   b7db0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b7db4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b7db8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b7dbc:	4770      	bxne	lr
   b7dbe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b7dc2:	bf08      	it	eq
   b7dc4:	4770      	bxeq	lr
   b7dc6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b7dca:	bf04      	itt	eq
   b7dcc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b7dd0:	4770      	bxeq	lr
   b7dd2:	b530      	push	{r4, r5, lr}
   b7dd4:	f44f 7460 	mov.w	r4, #896	; 0x380
   b7dd8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7ddc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7de0:	e71c      	b.n	b7c1c <__adddf3+0x138>
   b7de2:	bf00      	nop

000b7de4 <__aeabi_ul2d>:
   b7de4:	ea50 0201 	orrs.w	r2, r0, r1
   b7de8:	bf08      	it	eq
   b7dea:	4770      	bxeq	lr
   b7dec:	b530      	push	{r4, r5, lr}
   b7dee:	f04f 0500 	mov.w	r5, #0
   b7df2:	e00a      	b.n	b7e0a <__aeabi_l2d+0x16>

000b7df4 <__aeabi_l2d>:
   b7df4:	ea50 0201 	orrs.w	r2, r0, r1
   b7df8:	bf08      	it	eq
   b7dfa:	4770      	bxeq	lr
   b7dfc:	b530      	push	{r4, r5, lr}
   b7dfe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b7e02:	d502      	bpl.n	b7e0a <__aeabi_l2d+0x16>
   b7e04:	4240      	negs	r0, r0
   b7e06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7e0a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b7e0e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b7e12:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b7e16:	f43f aed8 	beq.w	b7bca <__adddf3+0xe6>
   b7e1a:	f04f 0203 	mov.w	r2, #3
   b7e1e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7e22:	bf18      	it	ne
   b7e24:	3203      	addne	r2, #3
   b7e26:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b7e2a:	bf18      	it	ne
   b7e2c:	3203      	addne	r2, #3
   b7e2e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b7e32:	f1c2 0320 	rsb	r3, r2, #32
   b7e36:	fa00 fc03 	lsl.w	ip, r0, r3
   b7e3a:	fa20 f002 	lsr.w	r0, r0, r2
   b7e3e:	fa01 fe03 	lsl.w	lr, r1, r3
   b7e42:	ea40 000e 	orr.w	r0, r0, lr
   b7e46:	fa21 f102 	lsr.w	r1, r1, r2
   b7e4a:	4414      	add	r4, r2
   b7e4c:	e6bd      	b.n	b7bca <__adddf3+0xe6>
   b7e4e:	bf00      	nop

000b7e50 <__aeabi_dmul>:
   b7e50:	b570      	push	{r4, r5, r6, lr}
   b7e52:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b7e56:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b7e5a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b7e5e:	bf1d      	ittte	ne
   b7e60:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b7e64:	ea94 0f0c 	teqne	r4, ip
   b7e68:	ea95 0f0c 	teqne	r5, ip
   b7e6c:	f000 f8de 	bleq	b802c <__aeabi_dmul+0x1dc>
   b7e70:	442c      	add	r4, r5
   b7e72:	ea81 0603 	eor.w	r6, r1, r3
   b7e76:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b7e7a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b7e7e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b7e82:	bf18      	it	ne
   b7e84:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b7e88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7e8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b7e90:	d038      	beq.n	b7f04 <__aeabi_dmul+0xb4>
   b7e92:	fba0 ce02 	umull	ip, lr, r0, r2
   b7e96:	f04f 0500 	mov.w	r5, #0
   b7e9a:	fbe1 e502 	umlal	lr, r5, r1, r2
   b7e9e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b7ea2:	fbe0 e503 	umlal	lr, r5, r0, r3
   b7ea6:	f04f 0600 	mov.w	r6, #0
   b7eaa:	fbe1 5603 	umlal	r5, r6, r1, r3
   b7eae:	f09c 0f00 	teq	ip, #0
   b7eb2:	bf18      	it	ne
   b7eb4:	f04e 0e01 	orrne.w	lr, lr, #1
   b7eb8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b7ebc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b7ec0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b7ec4:	d204      	bcs.n	b7ed0 <__aeabi_dmul+0x80>
   b7ec6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b7eca:	416d      	adcs	r5, r5
   b7ecc:	eb46 0606 	adc.w	r6, r6, r6
   b7ed0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b7ed4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b7ed8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b7edc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b7ee0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b7ee4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b7ee8:	bf88      	it	hi
   b7eea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b7eee:	d81e      	bhi.n	b7f2e <__aeabi_dmul+0xde>
   b7ef0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b7ef4:	bf08      	it	eq
   b7ef6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b7efa:	f150 0000 	adcs.w	r0, r0, #0
   b7efe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7f02:	bd70      	pop	{r4, r5, r6, pc}
   b7f04:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b7f08:	ea46 0101 	orr.w	r1, r6, r1
   b7f0c:	ea40 0002 	orr.w	r0, r0, r2
   b7f10:	ea81 0103 	eor.w	r1, r1, r3
   b7f14:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b7f18:	bfc2      	ittt	gt
   b7f1a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b7f1e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b7f22:	bd70      	popgt	{r4, r5, r6, pc}
   b7f24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b7f28:	f04f 0e00 	mov.w	lr, #0
   b7f2c:	3c01      	subs	r4, #1
   b7f2e:	f300 80ab 	bgt.w	b8088 <__aeabi_dmul+0x238>
   b7f32:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b7f36:	bfde      	ittt	le
   b7f38:	2000      	movle	r0, #0
   b7f3a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b7f3e:	bd70      	pople	{r4, r5, r6, pc}
   b7f40:	f1c4 0400 	rsb	r4, r4, #0
   b7f44:	3c20      	subs	r4, #32
   b7f46:	da35      	bge.n	b7fb4 <__aeabi_dmul+0x164>
   b7f48:	340c      	adds	r4, #12
   b7f4a:	dc1b      	bgt.n	b7f84 <__aeabi_dmul+0x134>
   b7f4c:	f104 0414 	add.w	r4, r4, #20
   b7f50:	f1c4 0520 	rsb	r5, r4, #32
   b7f54:	fa00 f305 	lsl.w	r3, r0, r5
   b7f58:	fa20 f004 	lsr.w	r0, r0, r4
   b7f5c:	fa01 f205 	lsl.w	r2, r1, r5
   b7f60:	ea40 0002 	orr.w	r0, r0, r2
   b7f64:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b7f68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b7f6c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7f70:	fa21 f604 	lsr.w	r6, r1, r4
   b7f74:	eb42 0106 	adc.w	r1, r2, r6
   b7f78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7f7c:	bf08      	it	eq
   b7f7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7f82:	bd70      	pop	{r4, r5, r6, pc}
   b7f84:	f1c4 040c 	rsb	r4, r4, #12
   b7f88:	f1c4 0520 	rsb	r5, r4, #32
   b7f8c:	fa00 f304 	lsl.w	r3, r0, r4
   b7f90:	fa20 f005 	lsr.w	r0, r0, r5
   b7f94:	fa01 f204 	lsl.w	r2, r1, r4
   b7f98:	ea40 0002 	orr.w	r0, r0, r2
   b7f9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7fa0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b7fa4:	f141 0100 	adc.w	r1, r1, #0
   b7fa8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7fac:	bf08      	it	eq
   b7fae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7fb2:	bd70      	pop	{r4, r5, r6, pc}
   b7fb4:	f1c4 0520 	rsb	r5, r4, #32
   b7fb8:	fa00 f205 	lsl.w	r2, r0, r5
   b7fbc:	ea4e 0e02 	orr.w	lr, lr, r2
   b7fc0:	fa20 f304 	lsr.w	r3, r0, r4
   b7fc4:	fa01 f205 	lsl.w	r2, r1, r5
   b7fc8:	ea43 0302 	orr.w	r3, r3, r2
   b7fcc:	fa21 f004 	lsr.w	r0, r1, r4
   b7fd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b7fd4:	fa21 f204 	lsr.w	r2, r1, r4
   b7fd8:	ea20 0002 	bic.w	r0, r0, r2
   b7fdc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b7fe0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b7fe4:	bf08      	it	eq
   b7fe6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b7fea:	bd70      	pop	{r4, r5, r6, pc}
   b7fec:	f094 0f00 	teq	r4, #0
   b7ff0:	d10f      	bne.n	b8012 <__aeabi_dmul+0x1c2>
   b7ff2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b7ff6:	0040      	lsls	r0, r0, #1
   b7ff8:	eb41 0101 	adc.w	r1, r1, r1
   b7ffc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8000:	bf08      	it	eq
   b8002:	3c01      	subeq	r4, #1
   b8004:	d0f7      	beq.n	b7ff6 <__aeabi_dmul+0x1a6>
   b8006:	ea41 0106 	orr.w	r1, r1, r6
   b800a:	f095 0f00 	teq	r5, #0
   b800e:	bf18      	it	ne
   b8010:	4770      	bxne	lr
   b8012:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b8016:	0052      	lsls	r2, r2, #1
   b8018:	eb43 0303 	adc.w	r3, r3, r3
   b801c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b8020:	bf08      	it	eq
   b8022:	3d01      	subeq	r5, #1
   b8024:	d0f7      	beq.n	b8016 <__aeabi_dmul+0x1c6>
   b8026:	ea43 0306 	orr.w	r3, r3, r6
   b802a:	4770      	bx	lr
   b802c:	ea94 0f0c 	teq	r4, ip
   b8030:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b8034:	bf18      	it	ne
   b8036:	ea95 0f0c 	teqne	r5, ip
   b803a:	d00c      	beq.n	b8056 <__aeabi_dmul+0x206>
   b803c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8040:	bf18      	it	ne
   b8042:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8046:	d1d1      	bne.n	b7fec <__aeabi_dmul+0x19c>
   b8048:	ea81 0103 	eor.w	r1, r1, r3
   b804c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8050:	f04f 0000 	mov.w	r0, #0
   b8054:	bd70      	pop	{r4, r5, r6, pc}
   b8056:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b805a:	bf06      	itte	eq
   b805c:	4610      	moveq	r0, r2
   b805e:	4619      	moveq	r1, r3
   b8060:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8064:	d019      	beq.n	b809a <__aeabi_dmul+0x24a>
   b8066:	ea94 0f0c 	teq	r4, ip
   b806a:	d102      	bne.n	b8072 <__aeabi_dmul+0x222>
   b806c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b8070:	d113      	bne.n	b809a <__aeabi_dmul+0x24a>
   b8072:	ea95 0f0c 	teq	r5, ip
   b8076:	d105      	bne.n	b8084 <__aeabi_dmul+0x234>
   b8078:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b807c:	bf1c      	itt	ne
   b807e:	4610      	movne	r0, r2
   b8080:	4619      	movne	r1, r3
   b8082:	d10a      	bne.n	b809a <__aeabi_dmul+0x24a>
   b8084:	ea81 0103 	eor.w	r1, r1, r3
   b8088:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b808c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b8090:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b8094:	f04f 0000 	mov.w	r0, #0
   b8098:	bd70      	pop	{r4, r5, r6, pc}
   b809a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b809e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b80a2:	bd70      	pop	{r4, r5, r6, pc}

000b80a4 <__aeabi_ddiv>:
   b80a4:	b570      	push	{r4, r5, r6, lr}
   b80a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b80aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b80ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b80b2:	bf1d      	ittte	ne
   b80b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b80b8:	ea94 0f0c 	teqne	r4, ip
   b80bc:	ea95 0f0c 	teqne	r5, ip
   b80c0:	f000 f8a7 	bleq	b8212 <__aeabi_ddiv+0x16e>
   b80c4:	eba4 0405 	sub.w	r4, r4, r5
   b80c8:	ea81 0e03 	eor.w	lr, r1, r3
   b80cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b80d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b80d4:	f000 8088 	beq.w	b81e8 <__aeabi_ddiv+0x144>
   b80d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b80dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b80e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b80e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b80e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b80ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b80f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b80f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b80f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b80fc:	429d      	cmp	r5, r3
   b80fe:	bf08      	it	eq
   b8100:	4296      	cmpeq	r6, r2
   b8102:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b8106:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b810a:	d202      	bcs.n	b8112 <__aeabi_ddiv+0x6e>
   b810c:	085b      	lsrs	r3, r3, #1
   b810e:	ea4f 0232 	mov.w	r2, r2, rrx
   b8112:	1ab6      	subs	r6, r6, r2
   b8114:	eb65 0503 	sbc.w	r5, r5, r3
   b8118:	085b      	lsrs	r3, r3, #1
   b811a:	ea4f 0232 	mov.w	r2, r2, rrx
   b811e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b8122:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b8126:	ebb6 0e02 	subs.w	lr, r6, r2
   b812a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b812e:	bf22      	ittt	cs
   b8130:	1ab6      	subcs	r6, r6, r2
   b8132:	4675      	movcs	r5, lr
   b8134:	ea40 000c 	orrcs.w	r0, r0, ip
   b8138:	085b      	lsrs	r3, r3, #1
   b813a:	ea4f 0232 	mov.w	r2, r2, rrx
   b813e:	ebb6 0e02 	subs.w	lr, r6, r2
   b8142:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8146:	bf22      	ittt	cs
   b8148:	1ab6      	subcs	r6, r6, r2
   b814a:	4675      	movcs	r5, lr
   b814c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b8150:	085b      	lsrs	r3, r3, #1
   b8152:	ea4f 0232 	mov.w	r2, r2, rrx
   b8156:	ebb6 0e02 	subs.w	lr, r6, r2
   b815a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b815e:	bf22      	ittt	cs
   b8160:	1ab6      	subcs	r6, r6, r2
   b8162:	4675      	movcs	r5, lr
   b8164:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b8168:	085b      	lsrs	r3, r3, #1
   b816a:	ea4f 0232 	mov.w	r2, r2, rrx
   b816e:	ebb6 0e02 	subs.w	lr, r6, r2
   b8172:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8176:	bf22      	ittt	cs
   b8178:	1ab6      	subcs	r6, r6, r2
   b817a:	4675      	movcs	r5, lr
   b817c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b8180:	ea55 0e06 	orrs.w	lr, r5, r6
   b8184:	d018      	beq.n	b81b8 <__aeabi_ddiv+0x114>
   b8186:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b818a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b818e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b8192:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b8196:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b819a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b819e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b81a2:	d1c0      	bne.n	b8126 <__aeabi_ddiv+0x82>
   b81a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b81a8:	d10b      	bne.n	b81c2 <__aeabi_ddiv+0x11e>
   b81aa:	ea41 0100 	orr.w	r1, r1, r0
   b81ae:	f04f 0000 	mov.w	r0, #0
   b81b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b81b6:	e7b6      	b.n	b8126 <__aeabi_ddiv+0x82>
   b81b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b81bc:	bf04      	itt	eq
   b81be:	4301      	orreq	r1, r0
   b81c0:	2000      	moveq	r0, #0
   b81c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b81c6:	bf88      	it	hi
   b81c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b81cc:	f63f aeaf 	bhi.w	b7f2e <__aeabi_dmul+0xde>
   b81d0:	ebb5 0c03 	subs.w	ip, r5, r3
   b81d4:	bf04      	itt	eq
   b81d6:	ebb6 0c02 	subseq.w	ip, r6, r2
   b81da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b81de:	f150 0000 	adcs.w	r0, r0, #0
   b81e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b81e6:	bd70      	pop	{r4, r5, r6, pc}
   b81e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b81ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b81f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b81f4:	bfc2      	ittt	gt
   b81f6:	ebd4 050c 	rsbsgt	r5, r4, ip
   b81fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b81fe:	bd70      	popgt	{r4, r5, r6, pc}
   b8200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8204:	f04f 0e00 	mov.w	lr, #0
   b8208:	3c01      	subs	r4, #1
   b820a:	e690      	b.n	b7f2e <__aeabi_dmul+0xde>
   b820c:	ea45 0e06 	orr.w	lr, r5, r6
   b8210:	e68d      	b.n	b7f2e <__aeabi_dmul+0xde>
   b8212:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b8216:	ea94 0f0c 	teq	r4, ip
   b821a:	bf08      	it	eq
   b821c:	ea95 0f0c 	teqeq	r5, ip
   b8220:	f43f af3b 	beq.w	b809a <__aeabi_dmul+0x24a>
   b8224:	ea94 0f0c 	teq	r4, ip
   b8228:	d10a      	bne.n	b8240 <__aeabi_ddiv+0x19c>
   b822a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b822e:	f47f af34 	bne.w	b809a <__aeabi_dmul+0x24a>
   b8232:	ea95 0f0c 	teq	r5, ip
   b8236:	f47f af25 	bne.w	b8084 <__aeabi_dmul+0x234>
   b823a:	4610      	mov	r0, r2
   b823c:	4619      	mov	r1, r3
   b823e:	e72c      	b.n	b809a <__aeabi_dmul+0x24a>
   b8240:	ea95 0f0c 	teq	r5, ip
   b8244:	d106      	bne.n	b8254 <__aeabi_ddiv+0x1b0>
   b8246:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b824a:	f43f aefd 	beq.w	b8048 <__aeabi_dmul+0x1f8>
   b824e:	4610      	mov	r0, r2
   b8250:	4619      	mov	r1, r3
   b8252:	e722      	b.n	b809a <__aeabi_dmul+0x24a>
   b8254:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8258:	bf18      	it	ne
   b825a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b825e:	f47f aec5 	bne.w	b7fec <__aeabi_dmul+0x19c>
   b8262:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b8266:	f47f af0d 	bne.w	b8084 <__aeabi_dmul+0x234>
   b826a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b826e:	f47f aeeb 	bne.w	b8048 <__aeabi_dmul+0x1f8>
   b8272:	e712      	b.n	b809a <__aeabi_dmul+0x24a>

000b8274 <__aeabi_d2iz>:
   b8274:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b8278:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b827c:	d215      	bcs.n	b82aa <__aeabi_d2iz+0x36>
   b827e:	d511      	bpl.n	b82a4 <__aeabi_d2iz+0x30>
   b8280:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b8284:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b8288:	d912      	bls.n	b82b0 <__aeabi_d2iz+0x3c>
   b828a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b828e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b8292:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b8296:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b829a:	fa23 f002 	lsr.w	r0, r3, r2
   b829e:	bf18      	it	ne
   b82a0:	4240      	negne	r0, r0
   b82a2:	4770      	bx	lr
   b82a4:	f04f 0000 	mov.w	r0, #0
   b82a8:	4770      	bx	lr
   b82aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b82ae:	d105      	bne.n	b82bc <__aeabi_d2iz+0x48>
   b82b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b82b4:	bf08      	it	eq
   b82b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b82ba:	4770      	bx	lr
   b82bc:	f04f 0000 	mov.w	r0, #0
   b82c0:	4770      	bx	lr
   b82c2:	bf00      	nop

000b82c4 <atexit>:
   b82c4:	2300      	movs	r3, #0
   b82c6:	4601      	mov	r1, r0
   b82c8:	461a      	mov	r2, r3
   b82ca:	4618      	mov	r0, r3
   b82cc:	f000 b85e 	b.w	b838c <__register_exitproc>

000b82d0 <memcpy>:
   b82d0:	440a      	add	r2, r1
   b82d2:	4291      	cmp	r1, r2
   b82d4:	f100 33ff 	add.w	r3, r0, #4294967295
   b82d8:	d100      	bne.n	b82dc <memcpy+0xc>
   b82da:	4770      	bx	lr
   b82dc:	b510      	push	{r4, lr}
   b82de:	f811 4b01 	ldrb.w	r4, [r1], #1
   b82e2:	f803 4f01 	strb.w	r4, [r3, #1]!
   b82e6:	4291      	cmp	r1, r2
   b82e8:	d1f9      	bne.n	b82de <memcpy+0xe>
   b82ea:	bd10      	pop	{r4, pc}

000b82ec <memset>:
   b82ec:	4402      	add	r2, r0
   b82ee:	4603      	mov	r3, r0
   b82f0:	4293      	cmp	r3, r2
   b82f2:	d100      	bne.n	b82f6 <memset+0xa>
   b82f4:	4770      	bx	lr
   b82f6:	f803 1b01 	strb.w	r1, [r3], #1
   b82fa:	e7f9      	b.n	b82f0 <memset+0x4>

000b82fc <srand>:
   b82fc:	b538      	push	{r3, r4, r5, lr}
   b82fe:	4b10      	ldr	r3, [pc, #64]	; (b8340 <srand+0x44>)
   b8300:	681d      	ldr	r5, [r3, #0]
   b8302:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8304:	4604      	mov	r4, r0
   b8306:	b9b3      	cbnz	r3, b8336 <srand+0x3a>
   b8308:	2018      	movs	r0, #24
   b830a:	f7fd ffdd 	bl	b62c8 <malloc>
   b830e:	4602      	mov	r2, r0
   b8310:	63a8      	str	r0, [r5, #56]	; 0x38
   b8312:	b920      	cbnz	r0, b831e <srand+0x22>
   b8314:	4b0b      	ldr	r3, [pc, #44]	; (b8344 <srand+0x48>)
   b8316:	480c      	ldr	r0, [pc, #48]	; (b8348 <srand+0x4c>)
   b8318:	2142      	movs	r1, #66	; 0x42
   b831a:	f7fd fffd 	bl	b6318 <__assert_func>
   b831e:	490b      	ldr	r1, [pc, #44]	; (b834c <srand+0x50>)
   b8320:	4b0b      	ldr	r3, [pc, #44]	; (b8350 <srand+0x54>)
   b8322:	e9c0 1300 	strd	r1, r3, [r0]
   b8326:	4b0b      	ldr	r3, [pc, #44]	; (b8354 <srand+0x58>)
   b8328:	6083      	str	r3, [r0, #8]
   b832a:	230b      	movs	r3, #11
   b832c:	8183      	strh	r3, [r0, #12]
   b832e:	2100      	movs	r1, #0
   b8330:	2001      	movs	r0, #1
   b8332:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8336:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8338:	2200      	movs	r2, #0
   b833a:	611c      	str	r4, [r3, #16]
   b833c:	615a      	str	r2, [r3, #20]
   b833e:	bd38      	pop	{r3, r4, r5, pc}
   b8340:	2003e534 	.word	0x2003e534
   b8344:	000b91d9 	.word	0x000b91d9
   b8348:	000b91f0 	.word	0x000b91f0
   b834c:	abcd330e 	.word	0xabcd330e
   b8350:	e66d1234 	.word	0xe66d1234
   b8354:	0005deec 	.word	0x0005deec

000b8358 <strcmp>:
   b8358:	f810 2b01 	ldrb.w	r2, [r0], #1
   b835c:	f811 3b01 	ldrb.w	r3, [r1], #1
   b8360:	2a01      	cmp	r2, #1
   b8362:	bf28      	it	cs
   b8364:	429a      	cmpcs	r2, r3
   b8366:	d0f7      	beq.n	b8358 <strcmp>
   b8368:	1ad0      	subs	r0, r2, r3
   b836a:	4770      	bx	lr

000b836c <strcpy>:
   b836c:	4603      	mov	r3, r0
   b836e:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8372:	f803 2b01 	strb.w	r2, [r3], #1
   b8376:	2a00      	cmp	r2, #0
   b8378:	d1f9      	bne.n	b836e <strcpy+0x2>
   b837a:	4770      	bx	lr

000b837c <strlen>:
   b837c:	4603      	mov	r3, r0
   b837e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b8382:	2a00      	cmp	r2, #0
   b8384:	d1fb      	bne.n	b837e <strlen+0x2>
   b8386:	1a18      	subs	r0, r3, r0
   b8388:	3801      	subs	r0, #1
   b838a:	4770      	bx	lr

000b838c <__register_exitproc>:
   b838c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8390:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b844c <__register_exitproc+0xc0>
   b8394:	4606      	mov	r6, r0
   b8396:	f8d8 0000 	ldr.w	r0, [r8]
   b839a:	461f      	mov	r7, r3
   b839c:	460d      	mov	r5, r1
   b839e:	4691      	mov	r9, r2
   b83a0:	f000 f856 	bl	b8450 <__retarget_lock_acquire_recursive>
   b83a4:	4b25      	ldr	r3, [pc, #148]	; (b843c <__register_exitproc+0xb0>)
   b83a6:	681c      	ldr	r4, [r3, #0]
   b83a8:	b934      	cbnz	r4, b83b8 <__register_exitproc+0x2c>
   b83aa:	4c25      	ldr	r4, [pc, #148]	; (b8440 <__register_exitproc+0xb4>)
   b83ac:	601c      	str	r4, [r3, #0]
   b83ae:	4b25      	ldr	r3, [pc, #148]	; (b8444 <__register_exitproc+0xb8>)
   b83b0:	b113      	cbz	r3, b83b8 <__register_exitproc+0x2c>
   b83b2:	681b      	ldr	r3, [r3, #0]
   b83b4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b83b8:	6863      	ldr	r3, [r4, #4]
   b83ba:	2b1f      	cmp	r3, #31
   b83bc:	dd07      	ble.n	b83ce <__register_exitproc+0x42>
   b83be:	f8d8 0000 	ldr.w	r0, [r8]
   b83c2:	f000 f847 	bl	b8454 <__retarget_lock_release_recursive>
   b83c6:	f04f 30ff 	mov.w	r0, #4294967295
   b83ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b83ce:	b34e      	cbz	r6, b8424 <__register_exitproc+0x98>
   b83d0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b83d4:	b988      	cbnz	r0, b83fa <__register_exitproc+0x6e>
   b83d6:	4b1c      	ldr	r3, [pc, #112]	; (b8448 <__register_exitproc+0xbc>)
   b83d8:	b923      	cbnz	r3, b83e4 <__register_exitproc+0x58>
   b83da:	f8d8 0000 	ldr.w	r0, [r8]
   b83de:	f000 f838 	bl	b8452 <__retarget_lock_release>
   b83e2:	e7f0      	b.n	b83c6 <__register_exitproc+0x3a>
   b83e4:	f44f 7084 	mov.w	r0, #264	; 0x108
   b83e8:	f7fd ff6e 	bl	b62c8 <malloc>
   b83ec:	2800      	cmp	r0, #0
   b83ee:	d0f4      	beq.n	b83da <__register_exitproc+0x4e>
   b83f0:	2300      	movs	r3, #0
   b83f2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b83f6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b83fa:	6863      	ldr	r3, [r4, #4]
   b83fc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8400:	2201      	movs	r2, #1
   b8402:	409a      	lsls	r2, r3
   b8404:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8408:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b840c:	4313      	orrs	r3, r2
   b840e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8412:	2e02      	cmp	r6, #2
   b8414:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8418:	bf02      	ittt	eq
   b841a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b841e:	4313      	orreq	r3, r2
   b8420:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8424:	6863      	ldr	r3, [r4, #4]
   b8426:	f8d8 0000 	ldr.w	r0, [r8]
   b842a:	1c5a      	adds	r2, r3, #1
   b842c:	3302      	adds	r3, #2
   b842e:	6062      	str	r2, [r4, #4]
   b8430:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8434:	f000 f80e 	bl	b8454 <__retarget_lock_release_recursive>
   b8438:	2000      	movs	r0, #0
   b843a:	e7c6      	b.n	b83ca <__register_exitproc+0x3e>
   b843c:	2003e7e8 	.word	0x2003e7e8
   b8440:	2003e75c 	.word	0x2003e75c
   b8444:	00000000 	.word	0x00000000
   b8448:	000b62c9 	.word	0x000b62c9
   b844c:	2003e598 	.word	0x2003e598

000b8450 <__retarget_lock_acquire_recursive>:
   b8450:	4770      	bx	lr

000b8452 <__retarget_lock_release>:
   b8452:	4770      	bx	lr

000b8454 <__retarget_lock_release_recursive>:
   b8454:	4770      	bx	lr

000b8456 <link_code_end>:
	...

000b8458 <dynalib_user>:
   b8458:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b8468:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b8478:	7620 7269 7574 6c61 4e00 206f 6843 6e61      virtual.No Chan
   b8488:	6567 2d20 4320 6e61 6563 6c6c 6e69 2067     ge - Cancelling 
   b8498:	4d43 0a44 7b00 6f22 226e 743a 7572 2c65     CMD..{"on":true,
   b84a8:	7322 7461 3a22 2c00 6222 6972 3a22 2c00     "sat":.,"bri":.,
   b84b8:	6822 6575 3a22 7b00 6f22 226e 663a 6c61     "hue":.{"on":fal
   b84c8:	6573 007d 6553 646e 6e69 2067 6f43 6d6d     se}.Sending Comm
   b84d8:	6e61 2064 6f74 4820 6575 5000 5455 2f20     and to Hue.PUT /
   b84e8:	7061 2f69 2f00 696c 6867 7374 002f 732f     api/./lights/./s
   b84f8:	6174 6574 4820 5454 2f50 2e31 0031 6f48     tate HTTP/1.1.Ho
   b8508:	7473 203a 4300 6e6f 6574 746e 4c2d 6e65     st: .Content-Len
   b8518:	7467 3a68 0020 6f43 746e 6e65 2d74 7954     gth: .Content-Ty
   b8528:	6570 203a 6574 7478 702f 616c 6e69 633b     pe: text/plain;c
   b8538:	6168 7372 7465 553d 4654 382d 4600 6f72     harset=UTF-8.Fro
   b8548:	206d 7548 0065 7753 7469 6863 4e4f 2520     m Hue.SwitchON %
   b8558:	2069 000a 3f3c 6d78 206c 6576 7372 6f69     i ..<?xml versio
   b8568:	3d6e 3122 302e 2022 6e65 6f63 6964 676e     n="1.0" encoding
   b8578:	223d 7475 2d66 2238 3e3f 733c 453a 766e     ="utf-8"?><s:Env
   b8588:	6c65 706f 2065 6d78 6e6c 3a73 3d73 6822     elope xmlns:s="h
   b8598:	7474 3a70 2f2f 6373 6568 616d 2e73 6d78     ttp://schemas.xm
   b85a8:	736c 616f 2e70 726f 2f67 6f73 7061 652f     lsoap.org/soap/e
   b85b8:	766e 6c65 706f 2f65 2022 3a73 6e65 6f63     nvelope/" s:enco
   b85c8:	6964 676e 7453 6c79 3d65 6822 7474 3a70     dingStyle="http:
   b85d8:	2f2f 6373 6568 616d 2e73 6d78 736c 616f     //schemas.xmlsoa
   b85e8:	2e70 726f 2f67 6f73 7061 652f 636e 646f     p.org/soap/encod
   b85f8:	6e69 2f67 3e22 733c 423a 646f 3e79 753c     ing/"><s:Body><u
   b8608:	533a 7465 6942 616e 7972 7453 7461 2065     :SetBinaryState 
   b8618:	6d78 6e6c 3a73 3d75 7522 6e72 423a 6c65     xmlns:u="urn:Bel
   b8628:	696b 3a6e 6573 7672 6369 3a65 6162 6973     kin:service:basi
   b8638:	6563 6576 746e 313a 3e22 423c 6e69 7261     cevent:1"><Binar
   b8648:	5379 6174 6574 313e 2f3c 6942 616e 7972     yState>1</Binary
   b8658:	7453 7461 3e65 2f3c 3a75 6553 4274 6e69     State></u:SetBin
   b8668:	7261 5379 6174 6574 3c3e 732f 423a 646f     aryState></s:Bod
   b8678:	3e79 2f3c 3a73 6e45 6576 6f6c 6570 003e     y></s:Envelope>.
   b8688:	4f50 5453 2f20 7075 706e 632f 6e6f 7274     POST /upnp/contr
   b8698:	6c6f 622f 7361 6369 7665 6e65 3174 4820     ol/basicevent1 H
   b86a8:	5454 2f50 2e31 0031 6f43 746e 6e65 2d74     TTP/1.1.Content-
   b86b8:	7954 6570 203a 6574 7478 782f 6c6d 203b     Type: text/xml; 
   b86c8:	6863 7261 6573 3d74 7475 2d66 0038 4f53     charset=utf-8.SO
   b86d8:	5041 4341 4954 4e4f 203a 7522 6e72 423a     APACTION: "urn:B
   b86e8:	6c65 696b 3a6e 6573 7672 6369 3a65 6162     elkin:service:ba
   b86f8:	6973 6563 6576 746e 313a 5323 7465 6942     sicevent:1#SetBi
   b8708:	616e 7972 7453 7461 2265 4300 6e6f 656e     naryState".Conne
   b8718:	7463 6f69 3a6e 6b20 6565 2d70 6c61 7669     ction: keep-aliv
   b8728:	0065 7773 7469 6863 464f 2046 6925 0a20     e.switchOFF %i .
   b8738:	3c00 783f 6c6d 7620 7265 6973 6e6f 223d     .<?xml version="
   b8748:	2e31 2230 6520 636e 646f 6e69 3d67 7522     1.0" encoding="u
   b8758:	6674 382d 3f22 3c3e 3a73 6e45 6576 6f6c     tf-8"?><s:Envelo
   b8768:	6570 7820 6c6d 736e 733a 223d 7468 7074     pe xmlns:s="http
   b8778:	2f3a 732f 6863 6d65 7361 782e 6c6d 6f73     ://schemas.xmlso
   b8788:	7061 6f2e 6772 732f 616f 2f70 6e65 6576     ap.org/soap/enve
   b8798:	6f6c 6570 222f 7320 653a 636e 646f 6e69     lope/" s:encodin
   b87a8:	5367 7974 656c 223d 7468 7074 2f3a 732f     gStyle="http://s
   b87b8:	6863 6d65 7361 782e 6c6d 6f73 7061 6f2e     chemas.xmlsoap.o
   b87c8:	6772 732f 616f 2f70 6e65 6f63 6964 676e     rg/soap/encoding
   b87d8:	222f 3c3e 3a73 6f42 7964 3c3e 3a75 6553     /"><s:Body><u:Se
   b87e8:	4274 6e69 7261 5379 6174 6574 7820 6c6d     tBinaryState xml
   b87f8:	736e 753a 223d 7275 3a6e 6542 6b6c 6e69     ns:u="urn:Belkin
   b8808:	733a 7265 6976 6563 623a 7361 6369 7665     :service:basicev
   b8818:	6e65 3a74 2231 3c3e 6942 616e 7972 7453     ent:1"><BinarySt
   b8828:	7461 3e65 3c30 422f 6e69 7261 5379 6174     ate>0</BinarySta
   b8838:	6574 3c3e 752f 533a 7465 6942 616e 7972     te></u:SetBinary
   b8848:	7453 7461 3e65 2f3c 3a73 6f42 7964 3c3e     State></s:Body><
   b8858:	732f 453a 766e 6c65 706f 3e65 4200 504d     /s:Envelope>.BMP
   b8868:	3832 2030 7461 6120 6464 6572 7373 3020     280 at address 0
   b8878:	2578 3230 2058 6166 6c69 6465 7420 206f     x%02X failed to 
   b8888:	7473 7261 0a74 2500 4369 000a 6925 0a46     start..%iC..%iF.
   b8898:	5700 7461 7265 4e0a 6565 6564 0064 6925     .Water.Needed.%i
   b88a8:	0a0a 3100 3239 312e 3836 312e 332e 0030     ...192.168.1.30.
   b88b8:	3931 2e32 3631 2e38 2e31 3133 3100 3239     192.168.1.31.192
   b88c8:	312e 3836 312e 332e 0032 3931 2e32 3631     .168.1.32.192.16
   b88d8:	2e38 2e31 3333 3100 3239 312e 3836 312e     8.1.33.192.168.1
   b88e8:	332e 0034                                   .34.

000b88ec <_ZL11hueUsername>:
   b88ec:	514d 5a6c 697a 4f52 5730 6961 4d35 4d73     MQlZziRO0Wai5MsM
   b88fc:	6c48 386c 4178 4155 7151 3877 5135 7272     Hll8xAUAQqw85Qrr
   b890c:	7438 334d 4637 5433                          8tM37F3T.

000b8915 <_ZL8hueHubIP>:
   b8915:	3931 2e32 3631 2e38 2e31 0035 0000           192.168.1.5....

000b8924 <CSWTCH.88>:
   b8924:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   b8934:	0050 0000                                   P...

000b8938 <_ZTV16Adafruit_SSD1306>:
	...
   b8940:	5231 000b 52c1 000b 5965 000b 67e9 000b     1R...R..eY...g..
   b8950:	5235 000b 567d 000b 50bd 000b 4f4d 000b     5R..}V...P..MO..
   b8960:	573b 000b 57d9 000b 580f 000b 582b 000b     ;W...W...X..+X..

000b8970 <_ZL4font>:
   b8970:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b8980:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b8990:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b89a0:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b89b0:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b89c0:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b89d0:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b89e0:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b89f0:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b8a00:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b8a10:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b8a20:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b8a30:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b8a40:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b8a50:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b8a60:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b8a70:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b8a80:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b8a90:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b8aa0:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b8ab0:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b8ac0:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b8ad0:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b8ae0:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b8af0:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b8b00:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b8b10:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b8b20:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b8b30:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b8b40:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b8b50:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b8b60:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b8b70:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b8b80:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b8b90:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b8ba0:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b8bb0:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b8bc0:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b8bd0:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b8be0:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b8bf0:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b8c00:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   b8c10:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b8c20:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b8c30:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   b8c40:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b8c50:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   b8c60:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   b8c70:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   b8c80:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b8c90:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b8ca0:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b8cb0:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b8cc0:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b8cd0:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b8ce0:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   b8cf0:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   b8d00:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   b8d10:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   b8d20:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   b8d30:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   b8d40:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   b8d50:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   b8d60:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   b8d70:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   b8d80:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   b8d90:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   b8da0:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   b8db0:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   b8dc0:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   b8dd0:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   b8de0:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   b8df0:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   b8e00:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   b8e10:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   b8e20:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   b8e30:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   b8e40:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   b8e50:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   b8e60:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000b8e6c <_ZTV12Adafruit_GFX>:
	...
   b8e7c:	5965 000b 67e9 000b 40a5 000b 567d 000b     eY...g...@..}V..
   b8e8c:	57a3 000b 57bf 000b 573b 000b 57d9 000b     .W...W..;W...W..
   b8e9c:	580f 000b 582b 000b 6f53 7466 6177 6572     .X..+X..Software
   b8eac:	5320 4950 4200 6765 6e69 4920 4332 4200      SPI.Begin I2C.B
   b8ebc:	6765 6e69 6820 7261 7764 7261 2065 5053     egin hardware SP
   b8ecc:	0049 6542 6967 206e 6f73 7466 6177 6572     I.Begin software
   b8edc:	5320 4950 0000 0000                          SPI....

000b8ee4 <_ZTVN5spark13EthernetClassE>:
	...
   b8eec:	6397 000b 638d 000b 6383 000b 6379 000b     .c...c...c..yc..
   b8efc:	636d 000b 6361 000b 7525 000b 752d 000b     mc..ac..%u..-u..
   b8f0c:	6355 000b 634d 000b 6343 000b 6339 000b     Uc..Mc..Cc..9c..
   b8f1c:	755d 000b                                   ]u..

000b8f20 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b8f20:	0800 1810 2820 3830                         .... (08

000b8f28 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b8f30:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   b8f40:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b8f50 <_ZTV9IPAddress>:
	...
   b8f58:	6afd 000b 6aed 000b 6aef 000b               .j...j...j..

000b8f64 <_ZTV9USBSerial>:
	...
   b8f6c:	6c0f 000b 6c77 000b 6c4d 000b 67e9 000b     .l..wl..Ml...g..
   b8f7c:	6c3f 000b 6c11 000b 6c21 000b 6c71 000b     ?l...l..!l..ql..
   b8f8c:	6c31 000b 6c09 000b                         1l...l..

000b8f94 <_ZTV11USARTSerial>:
	...
   b8f9c:	6d19 000b 6d85 000b 6d5d 000b 67e9 000b     .m...m..]m...g..
   b8fac:	6d2d 000b 6d49 000b 6d3b 000b 6d57 000b     -m..Im..;m..Wm..
   b8fbc:	6d1b 000b 6d1f 000b                         .m...m..

000b8fc4 <_ZTV7TwoWire>:
	...
   b8fcc:	6dbd 000b 6e07 000b 6ddf 000b 6dbf 000b     .m...n...m...m..
   b8fdc:	6de7 000b 6def 000b 6df7 000b 6dff 000b     .m...m...m...m..
   b8fec:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   b8ffc:	2072 203d 6425 0000                         r = %d..

000b9004 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b900c:	6f55 000b 6f79 000b 7463 000b 6f87 000b     Uo..yo..ct...o..
   b901c:	6f59 000b                                   Yo..

000b9020 <_ZTV9TCPClient>:
	...
   b9028:	4111 000b 4145 000b 6ed1 000b 6eeb 000b     .A..EA...n...n..
   b9038:	72f9 000b 6f15 000b 716f 000b 6f49 000b     .r...o..oq..Io..
   b9048:	7201 000b 7041 000b 719d 000b 73ad 000b     .r..Ap...q...s..
   b9058:	713d 000b 6f4b 000b 6efd 000b 6f8d 000b     =q..Ko...n...o..
   b9068:	7021 000b                                   !p..

000b906c <_ZTVN5spark9WiFiClassE>:
	...
   b9074:	74c7 000b 74bd 000b 74b3 000b 7469 000b     .t...t...t..it..
   b9084:	74a7 000b 749b 000b 7525 000b 752d 000b     .t...t..%u..-u..
   b9094:	748f 000b 7487 000b 747d 000b 7473 000b     .t...t..}t..st..
   b90a4:	755d 000b                                   ]u..

000b90a8 <_ZTVN5spark12NetworkClassE>:
	...
   b90b0:	74e5 000b 74ef 000b 74f9 000b 7503 000b     .t...t...t...u..
   b90c0:	750d 000b 7519 000b 7525 000b 752d 000b     .u...u..%u..-u..
   b90d0:	7535 000b 7541 000b 7549 000b 7553 000b     5u..Au..Iu..Su..
   b90e0:	755d 000b                                   ]u..

000b90e4 <_ZSt7nothrow>:
	...

000b90e5 <_ZTSSt19_Sp_make_shared_tag>:
   b90e5:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b90f5:	6572 5f64 6174 0067 0000                     red_tag....

000b9100 <_ZTISt19_Sp_make_shared_tag>:
   b9100:	9140 000b 90e5 000b                         @.......

000b9108 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b9108:	91a0 000b 9114 000b 91c4 000b               ............

000b9114 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b9114:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b9124:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b9134:	0045 0000                                   E...

000b9138 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b9138:	0000 0000 9108 000b 7901 000b 7915 000b     .........y...y..
   b9148:	7aa9 000b 7aa9 000b 797f 000b 78c1 000b     .z...z...y...x..
   b9158:	7967 000b 7929 000b 78f3 000b               gy..)y...x..

000b9164 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b9164:	91a0 000b 9170 000b 9108 000b               ....p.......

000b9170 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b9170:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b9180:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b9190:	666e 456f 0000 0000                         nfoE....

000b9198 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b9198:	0000 0000 9164 000b 79a9 000b 79bd 000b     ....d....y...y..
   b91a8:	7aa9 000b 7aa9 000b 797f 000b 78c1 000b     .z...z...y...x..
   b91b8:	7a7d 000b 7a09 000b 79d1 000b               }z...z...y..

000b91c4 <_ZTISt9type_info>:
   b91c4:	9140 000b 91cc 000b                         @.......

000b91cc <_ZTSSt9type_info>:
   b91cc:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b91dc:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b91ec:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b91fc:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b920c:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b921c:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b922c:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b923c:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b924c:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b925c:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b926d <link_const_variable_data_end>:
   b926d:	00          	.byte	0x00
	...

000b9270 <link_constructors_location>:
   b9270:	000b498d 	.word	0x000b498d
   b9274:	000b4f3d 	.word	0x000b4f3d
   b9278:	000b63a1 	.word	0x000b63a1
   b927c:	000b6535 	.word	0x000b6535
   b9280:	000b67d9 	.word	0x000b67d9
   b9284:	000b6965 	.word	0x000b6965
   b9288:	000b6975 	.word	0x000b6975
   b928c:	000b69a9 	.word	0x000b69a9
   b9290:	000b74d1 	.word	0x000b74d1
   b9294:	000b7635 	.word	0x000b7635

000b9298 <link_constructors_end>:
	...
